---
title: "Hands-On_Ex02"
author: "Hei Yee Kai"
date: "August 24, 2024"
date-modified: "last-modified"
execute:
  echo: true
  eval: true
  freeze: true
---

## **1.0 Overview**

Today's hands-on exercise focuses on thematic or choropleth mapping and other methods of geospatial visualization.

Thematic mapping typically involves using map symbols to represent specific attributes of geographic features that aren't immediately visible, such as population density, temperature, crime rates, or property values.

On the other hand, geovisualization enhances our ability to perceive and interpret spatial data by graphically representing locations, phenomena, or processes. This taps into our spatial cognition, leveraging the eye-brain system for processing visual information.

During this exercise, we'll learn how to create effective and accurate choropleth maps using the `tmap` package.

## **2.0 Importing Packages**

Before beginning the exercise, we need to load the required R packages. The following packages will be used:

-   [**readr**](https://readr.tidyverse.org/) for importing delimited text file,

-   [**tidyr**](https://tidyr.tidyverse.org/) for tidying data,

-   [**dplyr**](https://dplyr.tidyverse.org/) for wrangling data and

-   [**sf**](https://cran.r-project.org/web/packages/sf/) for handling geospatial data.

Since **`readr`**, **`tidyr`** and **`dplyr`** are part of **`tidyverse`** package, we will only need to install and import `tidyverse`.

```{r}
pacman::p_load(sf, tmap, tidyverse)
devtools::install_github("thomasp85/patchwork")
library(patchwork)
```

## **3.0 Importing Datasets into R Environment**

### **3.1 Datasets**

In this exercise, we will use two datasets as follows:

-   Master Plan 2014 Subzone Boundary (Web) (i.e. `MP14_SUBZONE_WEB_PL`) in ESRI shapefile format. It can be downloaded at [data.gov.sg](https://data.gov.sg/) This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.

-   Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e.`respopagesextod2011to2020.csv`). This is an aspatial data fie. It can be downloaded at [Department of Statistics, Singapore](https://www.singstat.gov.sg/) Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to `MP14_SUBZONE_WEB_PL` shapefile.

### **3.2 Importing Geospatial Data into R**

For geospatial data, we will use `st_read()` function of **sf** package to import shapefile into R as a simple feature data frame called `mpsz`.

```{r}
mpsz <- st_read(dsn = "C:/endurrus/IS415-GAA/Hands-On_Ex/Hands-On_Ex02/data/geospatial", 
                layer = "MP14_SUBZONE_WEB_PL")
mpsz
```

### **3.3 Importing Aspatial (Attribute) Data into R**

For aspatial datasets like *`respopagsex2011to2020.csv`,* we will import into Rstudio using `read_csv()` function of **readr** package.

```{r}
popdata <- read_csv("C:/endurrus/IS415-GAA/Hands-On_Ex/Hands-On_Ex02/data/aspatial/respopagesexfa2011to2020.csv")
```

## **4.0 Data Preparation and Wrangling**

Before a thematic map can be prepared, we are required to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.

-   YOUNG: age group 0 to 4 until age groyup 20 to 24,

-   ECONOMY ACTIVE: age group 25-29 until age group 60-64,

-   AGED: age group 65 and above,

-   TOTAL: all age group, and

-   DEPENDENCY: the ratio between young and aged against economy active group

### **4.1 Data Wrangling**

In order to carry out necessary data wrangling and transformation, the following functions will be used:

-   `pivot_wider()` of **tidyr** package, and

-   `mutate()`, `filter()`, `group_by()` and `select()` of **dplyr** package

    ```{r}
    popdata2020 <- popdata %>%
      filter(Time == 2020) %>%
      group_by(PA, SZ, AG) %>%
      summarise(`POP` = sum(`Pop`)) %>%
      ungroup()%>%
      pivot_wider(names_from=AG, 
                  values_from=POP) %>%
      mutate(YOUNG = rowSums(.[3:6])
             +rowSums(.[12])) %>%
    mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+
    rowSums(.[13:15]))%>%
    mutate(`AGED`=rowSums(.[16:21])) %>%
    mutate(`TOTAL`=rowSums(.[3:21])) %>%  
    mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)
    /`ECONOMY ACTIVE`) %>%
      select(`PA`, `SZ`, `YOUNG`, 
           `ECONOMY ACTIVE`, `AGED`, 
           `TOTAL`, `DEPENDENCY`)
    ```

### **4.2 Joining Geospatial Data and Attribute Data**

Before performing the georelational join, we need to ensure consistency in the data by converting the values in the PA and SZ fields to uppercase. This step is necessary because the PA and SZ fields contain a mix of upper and lowercase letters, while the corresponding SUBZONE_N and PLN_AREA_N fields are in uppercase.

Hence, we will standard the data values in these two fields.

```{r}
popdata2020 <- popdata2020 %>%
  mutate_at(.vars = vars(PA, SZ), 
          .funs = list(toupper)) %>%
  filter(`ECONOMY ACTIVE` > 0)
```

Next, we'll use the `left_join()` function from the `dplyr` package to merge the geographical data with the attribute table. The join will be based on the planning subzone name, using **SUBZONE_N** from the geographical data and **SZ** from the attribute table as the common identifier.

```{r}
mpsz_pop2020 <- left_join(mpsz, popdata2020,
                          by = c("SUBZONE_N" = "SZ"))
```

## **5.0 Choropleth Mapping Geospatial Data Using *tmap***

Choropleth mapping uses area patterns or graduated colors to represent data across defined regions, such as countries, provinces, states, counties, or census units. For instance, a social scientist might create a choropleth map to illustrate the distribution of the elderly population across Singapore, using the Master Plan 2014 Subzone Boundary.

When using the `tmap` package to create thematic maps, there are two approaches:

Two approaches can be used to prepare thematic map using *`tmap`*, they are:

-   Quick Thematic Mapping with `qtm()`: This method allows you to generate a thematic map rapidly.

-   Customizable Thematic Mapping with `tmap` Elements: This approach offers more flexibility and allows for detailed customization of the map's appearance.

### **5.1 Plotting a choropleth map quickly by using *qtm()***

The easiest and quickest to draw a choropleth map using **tmap** is using *`qtm()`*. It is concise and provides a good default visualisation in many cases.

```{r}
tmap_mode("plot")
qtm(mpsz_pop2020, 
    fill = "DEPENDENCY",
    fill.palette ="plasma")
```

### **5.2 Plotting a choropleth map quickly by using *qtm()***

In practical applications, the quick choropleth map generated in the previous session may not adequately visualize geospatial data. Fortunately, the **tmap** package provides extensive customization options that allow us to better control the design of our choropleth maps. By leveraging **tmap's** drawing elements, we can create a high-quality cartographic choropleth map that presents data more accurately and informatively.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "plasma",
          title = "Dependency ratio") +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

Next, we will breakdown the different tmpa functions used to plot the additional elements in the map above.

### **5.3 Drawing a Base Map Using *tm_shape()***

The basic building block of **tmap** is `tm_shape()` followed by one or more layer elemments such as `tm_fill()` and `tm_polygons()`.

-   `tm_shape()` is used to define the input data (i.e *mpsz_pop2020*) and `tm_polygons()` is used to draw the planning subzone polygons.

```{r}
tm_shape(mpsz_pop2020) +
  tm_polygons()
```

### **5.4 Drawing a Choropleth Map Using *tm_polygons()***

To draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as *Dependency* to `tm_polygons()`.

```{r}
tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY")
```

### **5.5 Drawing a Choropleth Map Using *tm_fill()* and *tm_border()***

Actually, *tm_polygons()* is a wraper of *tm_fill()* and *tm_border()*. *tm_fill()* shades the polygons by using the default colour scheme and *tm_borders()* adds the borders of the shapefile onto the choropleth map.

Firstly, we will try to draw a choropleth map by using `tm_fill()` alone.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY")
```

To add the boundary of the planning subzones, tm_borders will be used as shown below.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY") +
  tm_borders(lwd = 0.1,  alpha = 1)
```

## **6.0 Data Classification Methods of tmap**

Most choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.

**tmap** provides a total ten data classification methods, namely:

-   *fixed*,

-   *sd*,

-   *equal*,

-   *pretty* (default),

-   *quantile*,

-   *kmeans*,

-   *hclust*,

-   *bclust*,

-   *fisher*, and

-   *jenks*.

### **6.1 Plotting Choropleth Maps with Built-in Classification Methods**

To define a data classification method, the *style* argument of `tm_fill()` or `tm_polygons()` will be used. The code chunk below shows a quantile data classification that used 5 classes.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          palette = "plasma",
          style = "jenks") +
  tm_borders(alpha = 0.5)
```

Next, we will try equal data classification method.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          palette = "plasma",
          style = "equal") +
  tm_borders(alpha = 0.5)

tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          palette = "plasma",
          style = "sd") +
  tm_borders(alpha = 0.5)

tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          palette = "plasma",
          style = "hclust") +
  tm_borders(alpha = 0.5)

tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          palette = "plasma",
          style = "bclust") +
  tm_borders(alpha = 0.5)
```

Also, we can try exploring using the same classification methods, but with different numbers of classes. As an example, we will use kmeans clustering method with different class sizes (2,6,10,20)

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 2,
          palette = "plasma",
          style = "kmeans") +
  tm_borders(alpha = 0.5)

tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 6,
          palette = "plasma",
          style = "kmeans") +
  tm_borders(alpha = 0.5)

tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 10,
          palette = "plasma",
          style = "kmeans") +
  tm_borders(alpha = 0.5)

tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 20,
          palette = "plasma",
          style = "kmeans") +
  tm_borders(alpha = 0.5)
```

### **6.2 Plotting Choropleth Maps with Custom Breaks**

For the built-in styles in **tmap**, category breaks are calculated internally by default. However, you can override these defaults by explicitly setting breakpoints using the breaks argument in the `tm_fill()` function. It's important to remember that in **tmap**, the breaks include both the minimum and maximum values. Therefore, to create n categories, you must specify **n+1** elements in the breaks option, with the values listed in increasing order.

Before setting these breakpoints, it's a good practice to first obtain descriptive statistics for the variable you're mapping. This helps ensure that the breakpoints are meaningful and effectively represent the data.

```{r}
summary(mpsz_pop2020$DEPENDENCY)

original <- ggplot(data=mpsz_pop2020, aes(x=`DEPENDENCY`)) +
  geom_bar(color="black", fill="#e9531e")+
  scale_x_binned(n.breaks=10)

#Try to remove outliers
mpsz_pop2020_no_outlier <- subset(mpsz_pop2020, mpsz_pop2020$DEPENDENCY <3)

filtered <- ggplot(data=mpsz_pop2020_no_outlier, aes(x=`DEPENDENCY`)) +
  geom_bar(color="black", fill="#e9531e")+
  scale_x_binned(n.breaks=10)

original + filtered
```

With reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 1.00. Our *breaks* vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)

Using this information, we will now proceed to plot the choropleth map.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          palette="plasma",
          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +
  tm_borders(alpha = 0.5)
```

### **6.3 Customising Colour Schemes**

**tmap** supports colour ramps either defined by the user or a set of predefined colour ramps from the **RColorBrewer** package.

To change the colour, we assign the preferred colour to *palette* argument of *tm_fill()* as shown in the code chunk below.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 6,
          style = "quantile",
          palette = "plasma") +
  tm_borders(alpha = 0.5)
```

## **7.0 Controlling and Customizing Map Layots**

Map layout refers to the combination of all map elements into a cohensive map. Map elements include among others the objects to be mapped, the title, the scale bar, the compass, margins and aspects ratios. Colour settings and data classification methods covered in the previous section relate to the palette and break-points are used to affect how the map looks.

### **7.1 Map Legend**

In **tmap**, several *legend* options are provided to change the placement, format and appearance of the legend.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "jenks", 
          palette = "plasma", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone \n(Jenks classification)",
            main.title.position = "center",
            main.title.size = 1,
            #legend.height = 0.45, 
            #legend.width = 0.35,
            legend.outside = TRUE,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```

### **7.2 Map Style**

**tmap** allows a wide variety of layout settings to be changed. They can be called by using `tmap_style()`.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "plasma") +
  tm_borders(alpha = 0.5) +
  tmap_style("classic")
```

### **7.3 Cartographic Furniture**

Beside map style, **tmap** also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.

In the code chunk below, `tm_compass()`, `tm_scale_bar()` and `tm_grid()` are used to add compass, scale bar and grid lines onto the choropleth map.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "plasma",
          title = "No. of persons") +
  tm_layout(main.title = "Distribution of Dependency Ratio \nby planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

## **8.0 Drawing Small Multiple Choropleth Maps**

**Small multiple maps**, also referred to as **facet maps**, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.

In **tmap**, small multiple maps can be plotted in three ways:

-   by assigning multiple values to at least one of the asthetic arguments,

-   by defining a group-by variable in `tm_facets()`, and

-   by creating multiple stand-alone maps with `tmap_arrange()`.

### **8.1 By assigning multiple values to at least one of the aesthetic arguments**

In this example, small multiple choropleth maps are created by defining ***ncols*** in **`tm_fill()`**

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill(c("YOUNG", "AGED"),
          style = "equal", 
          palette = "plasma") +
  tm_layout(legend.position = c("right", "bottom")) +
  tm_borders(alpha = 0.5) +
  tmap_style("white")
```

In this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments.

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "plasma",
          thres.poly = 0) + 
  tm_facets(by="REGION_N", 
            free.coords=TRUE) +
  tm_layout(legend.show = FALSE,
            title.position = c("center", "center"), 
            title.size = 20) +
  tm_borders(alpha = 0.5)
```

### **8.2 By defining a group-by variable in *tm_facets()***

In this example, multiple small choropleth maps are created by using **`tm_facets()`**

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "plasma",
          thres.poly = 0) + 
  tm_facets(by="REGION_N", 
            free.coords=TRUE) +
  tm_layout(legend.show = FALSE,
            title.position = c("center", "center"), 
            title.size = 20) +
  tm_borders(alpha = 0.5)
```

### **8.3 By creating multiple stand-alone maps with *tmap_arrange()***

In this example, multiple small choropleth maps are created by creating multiple stand-alone maps with **`tmap_arrange()`**.

```{r}
youngmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("YOUNG", 
              style = "quantile", 
              palette = "viridis")

agedmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("AGED", 
              style = "quantile", 
              palette = "plasma")

tmap_arrange(youngmap, agedmap, asp=1, ncol=2)
```

## **9.0 Mappping Spatial Object Meeting a Selection Criterion**

Instead of creating small multiple choropleth map, we can also use selection funtion to map spatial objects meeting the selection criterion.

For example, we have select the central region and *DEPENDENCY* column to plot.

```{r}
tm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N=="CENTRAL REGION", ])+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "plasma", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(legend.outside = TRUE,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```
