[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "IS415 Geospatial Analytics and Applications"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "pacman::p_load(sf, tidyverse)\nmpsz = st_read(dsn = \"C:/endurrus/IS415-GAA/Hands-on_Ex/Hands-on_Ex01/data\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\endurrus\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\ncyclingpath = st_read(dsn = \"C:/endurrus/IS415-GAA/Hands-on_Ex/Hands-on_Ex01/data\", layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\endurrus\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data' using driver `ESRI Shapefile'\nSimple feature collection with 3138 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42644.17 ymax: 48948.15\nProjected CRS: SVY21\n\npreschool = st_read(\"C:/endurrus/IS415-GAA/Hands-on_Ex/Hands-on_Ex01/data/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\endurrus\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\nlistings &lt;- read_csv(\"C:/endurrus/IS415-GAA/Hands-on_Ex/Hands-on_Ex01/data/listings.csv\") \n\nRows: 3540 Columns: 75\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (26): listing_url, source, name, description, neighborhood_overview, pi...\ndbl  (38): id, scrape_id, host_id, host_listings_count, host_total_listings_...\nlgl   (6): host_is_superhost, host_has_profile_pic, host_identity_verified, ...\ndate  (5): last_scraped, host_since, calendar_last_scraped, first_review, la...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglimpse(listings)\n\nRows: 3,540\nColumns: 75\n$ id                                           &lt;dbl&gt; 71609, 71896, 71903, 2753…\n$ listing_url                                  &lt;chr&gt; \"https://www.airbnb.com/r…\n$ scrape_id                                    &lt;dbl&gt; 2.024063e+13, 2.024063e+1…\n$ last_scraped                                 &lt;date&gt; 2024-06-29, 2024-06-29, …\n$ source                                       &lt;chr&gt; \"previous scrape\", \"city …\n$ name                                         &lt;chr&gt; \"Ensuite Room (Room 1 & 2…\n$ description                                  &lt;chr&gt; \"For 3 rooms.Book room 1 …\n$ neighborhood_overview                        &lt;chr&gt; NA, NA, \"Quiet and view o…\n$ picture_url                                  &lt;chr&gt; \"https://a0.muscache.com/…\n$ host_id                                      &lt;dbl&gt; 367042, 367042, 367042, 1…\n$ host_url                                     &lt;chr&gt; \"https://www.airbnb.com/u…\n$ host_name                                    &lt;chr&gt; \"Belinda\", \"Belinda\", \"Be…\n$ host_since                                   &lt;date&gt; 2011-01-29, 2011-01-29, …\n$ host_location                                &lt;chr&gt; \"Singapore\", \"Singapore\",…\n$ host_about                                   &lt;chr&gt; \"Hi My name is Belinda -H…\n$ host_response_time                           &lt;chr&gt; \"within an hour\", \"within…\n$ host_response_rate                           &lt;chr&gt; \"100%\", \"100%\", \"100%\", \"…\n$ host_acceptance_rate                         &lt;chr&gt; \"N/A\", \"N/A\", \"N/A\", \"99%…\n$ host_is_superhost                            &lt;lgl&gt; FALSE, FALSE, FALSE, FALS…\n$ host_thumbnail_url                           &lt;chr&gt; \"https://a0.muscache.com/…\n$ host_picture_url                             &lt;chr&gt; \"https://a0.muscache.com/…\n$ host_neighbourhood                           &lt;chr&gt; \"Tampines\", \"Tampines\", \"…\n$ host_listings_count                          &lt;dbl&gt; 6, 6, 6, 49, 49, 6, 7, 49…\n$ host_total_listings_count                    &lt;dbl&gt; 11, 11, 11, 73, 73, 11, 8…\n$ host_verifications                           &lt;chr&gt; \"['email', 'phone']\", \"['…\n$ host_has_profile_pic                         &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T…\n$ host_identity_verified                       &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T…\n$ neighbourhood                                &lt;chr&gt; NA, NA, \"Singapore, Singa…\n$ neighbourhood_cleansed                       &lt;chr&gt; \"Tampines\", \"Tampines\", \"…\n$ neighbourhood_group_cleansed                 &lt;chr&gt; \"East Region\", \"East Regi…\n$ latitude                                     &lt;dbl&gt; 1.34537, 1.34754, 1.34531…\n$ longitude                                    &lt;dbl&gt; 103.9589, 103.9596, 103.9…\n$ property_type                                &lt;chr&gt; \"Private room in villa\", …\n$ room_type                                    &lt;chr&gt; \"Private room\", \"Private …\n$ accommodates                                 &lt;dbl&gt; 3, 1, 2, 1, 1, 4, 2, 1, 1…\n$ bathrooms                                    &lt;dbl&gt; NA, 0.5, 0.5, 2.0, 2.5, N…\n$ bathrooms_text                               &lt;chr&gt; \"1 private bath\", \"Shared…\n$ bedrooms                                     &lt;dbl&gt; 2, 1, 1, 1, 1, 3, 2, 1, 1…\n$ beds                                         &lt;dbl&gt; NA, 1, 2, 1, 1, NA, 1, 1,…\n$ amenities                                    &lt;chr&gt; \"[\\\"Free parking on premi…\n$ price                                        &lt;chr&gt; NA, \"$80.00\", \"$80.00\", \"…\n$ minimum_nights                               &lt;dbl&gt; 92, 92, 92, 180, 180, 92,…\n$ maximum_nights                               &lt;dbl&gt; 365, 365, 365, 999, 999, …\n$ minimum_minimum_nights                       &lt;dbl&gt; 92, 92, 92, 180, 180, 92,…\n$ maximum_minimum_nights                       &lt;dbl&gt; 92, 92, 92, 180, 180, 92,…\n$ minimum_maximum_nights                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1…\n$ maximum_maximum_nights                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1…\n$ minimum_nights_avg_ntm                       &lt;dbl&gt; 92, 92, 92, 180, 180, 92,…\n$ maximum_nights_avg_ntm                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1…\n$ calendar_updated                             &lt;lgl&gt; NA, NA, NA, NA, NA, NA, N…\n$ has_availability                             &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T…\n$ availability_30                              &lt;dbl&gt; 30, 30, 30, 28, 0, 29, 30…\n$ availability_60                              &lt;dbl&gt; 59, 53, 60, 58, 0, 58, 60…\n$ availability_90                              &lt;dbl&gt; 89, 83, 90, 62, 0, 88, 90…\n$ availability_365                             &lt;dbl&gt; 89, 148, 90, 62, 0, 88, 3…\n$ calendar_last_scraped                        &lt;date&gt; 2024-06-29, 2024-06-29, …\n$ number_of_reviews                            &lt;dbl&gt; 19, 24, 46, 20, 16, 12, 1…\n$ number_of_reviews_ltm                        &lt;dbl&gt; 0, 0, 0, 0, 2, 0, 0, 1, 1…\n$ number_of_reviews_l30d                       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ first_review                                 &lt;date&gt; 2011-12-19, 2011-07-30, …\n$ last_review                                  &lt;date&gt; 2020-01-17, 2019-10-13, …\n$ review_scores_rating                         &lt;dbl&gt; 4.44, 4.16, 4.41, 4.40, 4…\n$ review_scores_accuracy                       &lt;dbl&gt; 4.37, 4.22, 4.39, 4.16, 4…\n$ review_scores_cleanliness                    &lt;dbl&gt; 4.00, 4.09, 4.52, 4.26, 4…\n$ review_scores_checkin                        &lt;dbl&gt; 4.63, 4.43, 4.63, 4.47, 4…\n$ review_scores_communication                  &lt;dbl&gt; 4.78, 4.43, 4.64, 4.42, 4…\n$ review_scores_location                       &lt;dbl&gt; 4.26, 4.17, 4.50, 4.53, 4…\n$ review_scores_value                          &lt;dbl&gt; 4.32, 4.04, 4.36, 4.63, 4…\n$ license                                      &lt;chr&gt; NA, NA, NA, \"S0399\", \"S03…\n$ instant_bookable                             &lt;lgl&gt; FALSE, FALSE, FALSE, TRUE…\n$ calculated_host_listings_count               &lt;dbl&gt; 6, 6, 6, 49, 49, 6, 7, 49…\n$ calculated_host_listings_count_entire_homes  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 1, 0, 0…\n$ calculated_host_listings_count_private_rooms &lt;dbl&gt; 6, 6, 6, 49, 49, 6, 6, 49…\n$ calculated_host_listings_count_shared_rooms  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ reviews_per_month                            &lt;dbl&gt; 0.12, 0.15, 0.29, 0.15, 0…\n\nlistings_sf &lt;- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %&gt;%\n  st_transform(crs = 3414)\n\nglimpse(listings_sf)\n\nRows: 3,540\nColumns: 74\n$ id                                           &lt;dbl&gt; 71609, 71896, 71903, 2753…\n$ listing_url                                  &lt;chr&gt; \"https://www.airbnb.com/r…\n$ scrape_id                                    &lt;dbl&gt; 2.024063e+13, 2.024063e+1…\n$ last_scraped                                 &lt;date&gt; 2024-06-29, 2024-06-29, …\n$ source                                       &lt;chr&gt; \"previous scrape\", \"city …\n$ name                                         &lt;chr&gt; \"Ensuite Room (Room 1 & 2…\n$ description                                  &lt;chr&gt; \"For 3 rooms.Book room 1 …\n$ neighborhood_overview                        &lt;chr&gt; NA, NA, \"Quiet and view o…\n$ picture_url                                  &lt;chr&gt; \"https://a0.muscache.com/…\n$ host_id                                      &lt;dbl&gt; 367042, 367042, 367042, 1…\n$ host_url                                     &lt;chr&gt; \"https://www.airbnb.com/u…\n$ host_name                                    &lt;chr&gt; \"Belinda\", \"Belinda\", \"Be…\n$ host_since                                   &lt;date&gt; 2011-01-29, 2011-01-29, …\n$ host_location                                &lt;chr&gt; \"Singapore\", \"Singapore\",…\n$ host_about                                   &lt;chr&gt; \"Hi My name is Belinda -H…\n$ host_response_time                           &lt;chr&gt; \"within an hour\", \"within…\n$ host_response_rate                           &lt;chr&gt; \"100%\", \"100%\", \"100%\", \"…\n$ host_acceptance_rate                         &lt;chr&gt; \"N/A\", \"N/A\", \"N/A\", \"99%…\n$ host_is_superhost                            &lt;lgl&gt; FALSE, FALSE, FALSE, FALS…\n$ host_thumbnail_url                           &lt;chr&gt; \"https://a0.muscache.com/…\n$ host_picture_url                             &lt;chr&gt; \"https://a0.muscache.com/…\n$ host_neighbourhood                           &lt;chr&gt; \"Tampines\", \"Tampines\", \"…\n$ host_listings_count                          &lt;dbl&gt; 6, 6, 6, 49, 49, 6, 7, 49…\n$ host_total_listings_count                    &lt;dbl&gt; 11, 11, 11, 73, 73, 11, 8…\n$ host_verifications                           &lt;chr&gt; \"['email', 'phone']\", \"['…\n$ host_has_profile_pic                         &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T…\n$ host_identity_verified                       &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T…\n$ neighbourhood                                &lt;chr&gt; NA, NA, \"Singapore, Singa…\n$ neighbourhood_cleansed                       &lt;chr&gt; \"Tampines\", \"Tampines\", \"…\n$ neighbourhood_group_cleansed                 &lt;chr&gt; \"East Region\", \"East Regi…\n$ property_type                                &lt;chr&gt; \"Private room in villa\", …\n$ room_type                                    &lt;chr&gt; \"Private room\", \"Private …\n$ accommodates                                 &lt;dbl&gt; 3, 1, 2, 1, 1, 4, 2, 1, 1…\n$ bathrooms                                    &lt;dbl&gt; NA, 0.5, 0.5, 2.0, 2.5, N…\n$ bathrooms_text                               &lt;chr&gt; \"1 private bath\", \"Shared…\n$ bedrooms                                     &lt;dbl&gt; 2, 1, 1, 1, 1, 3, 2, 1, 1…\n$ beds                                         &lt;dbl&gt; NA, 1, 2, 1, 1, NA, 1, 1,…\n$ amenities                                    &lt;chr&gt; \"[\\\"Free parking on premi…\n$ price                                        &lt;chr&gt; NA, \"$80.00\", \"$80.00\", \"…\n$ minimum_nights                               &lt;dbl&gt; 92, 92, 92, 180, 180, 92,…\n$ maximum_nights                               &lt;dbl&gt; 365, 365, 365, 999, 999, …\n$ minimum_minimum_nights                       &lt;dbl&gt; 92, 92, 92, 180, 180, 92,…\n$ maximum_minimum_nights                       &lt;dbl&gt; 92, 92, 92, 180, 180, 92,…\n$ minimum_maximum_nights                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1…\n$ maximum_maximum_nights                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1…\n$ minimum_nights_avg_ntm                       &lt;dbl&gt; 92, 92, 92, 180, 180, 92,…\n$ maximum_nights_avg_ntm                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1…\n$ calendar_updated                             &lt;lgl&gt; NA, NA, NA, NA, NA, NA, N…\n$ has_availability                             &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T…\n$ availability_30                              &lt;dbl&gt; 30, 30, 30, 28, 0, 29, 30…\n$ availability_60                              &lt;dbl&gt; 59, 53, 60, 58, 0, 58, 60…\n$ availability_90                              &lt;dbl&gt; 89, 83, 90, 62, 0, 88, 90…\n$ availability_365                             &lt;dbl&gt; 89, 148, 90, 62, 0, 88, 3…\n$ calendar_last_scraped                        &lt;date&gt; 2024-06-29, 2024-06-29, …\n$ number_of_reviews                            &lt;dbl&gt; 19, 24, 46, 20, 16, 12, 1…\n$ number_of_reviews_ltm                        &lt;dbl&gt; 0, 0, 0, 0, 2, 0, 0, 1, 1…\n$ number_of_reviews_l30d                       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ first_review                                 &lt;date&gt; 2011-12-19, 2011-07-30, …\n$ last_review                                  &lt;date&gt; 2020-01-17, 2019-10-13, …\n$ review_scores_rating                         &lt;dbl&gt; 4.44, 4.16, 4.41, 4.40, 4…\n$ review_scores_accuracy                       &lt;dbl&gt; 4.37, 4.22, 4.39, 4.16, 4…\n$ review_scores_cleanliness                    &lt;dbl&gt; 4.00, 4.09, 4.52, 4.26, 4…\n$ review_scores_checkin                        &lt;dbl&gt; 4.63, 4.43, 4.63, 4.47, 4…\n$ review_scores_communication                  &lt;dbl&gt; 4.78, 4.43, 4.64, 4.42, 4…\n$ review_scores_location                       &lt;dbl&gt; 4.26, 4.17, 4.50, 4.53, 4…\n$ review_scores_value                          &lt;dbl&gt; 4.32, 4.04, 4.36, 4.63, 4…\n$ license                                      &lt;chr&gt; NA, NA, NA, \"S0399\", \"S03…\n$ instant_bookable                             &lt;lgl&gt; FALSE, FALSE, FALSE, TRUE…\n$ calculated_host_listings_count               &lt;dbl&gt; 6, 6, 6, 49, 49, 6, 7, 49…\n$ calculated_host_listings_count_entire_homes  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 1, 0, 0…\n$ calculated_host_listings_count_private_rooms &lt;dbl&gt; 6, 6, 6, 49, 49, 6, 6, 49…\n$ calculated_host_listings_count_shared_rooms  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ reviews_per_month                            &lt;dbl&gt; 0.12, 0.15, 0.29, 0.15, 0…\n$ geometry                                     &lt;POINT [m]&gt; POINT (41972.5 3639…\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\nhead(mpsz, n=5)  \n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\nplot(mpsz)\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\nplot(st_geometry(mpsz))\n\n\n\n\n\n\n\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\n\n\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\nmpsz3414 &lt;- st_set_crs(mpsz, 3414)\n\nWarning: st_crs&lt;- : replacing crs does not reproject data; use st_transform for\nthat\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\npreschool3414 &lt;- st_transform(preschool, \n                              crs = 3414)\n\nbuffer_cycling &lt;- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 30)\n\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\n\nsum(buffer_cycling$AREA)\n\n2218855 [m^2]\n\nmpsz3414$`PreSch Count`&lt;- lengths(st_intersects(mpsz3414, preschool3414))\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n\nmpsz3414$Area &lt;- mpsz3414 %&gt;%\n  st_area()\n\nmpsz3414 &lt;- mpsz3414 %&gt;%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\n\n\n\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\n\n\n\nggplot(data=mpsz3414, \n       aes(y = `PreSch Count`, \n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\", \n             fill=\"light blue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Pre-school count\")\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`)."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html",
    "href": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html",
    "title": "Hands-On_Ex02",
    "section": "",
    "text": "The main learning topics of today’s hands-on exercise are thematic/choropleth mapping and other geospatial visualization techniques.\nIn general, thematic mapping involves the use of map symbols to visualize selected properties of geographic features that are not naturally visible, such as population, temperature, crime rate, and property prices, just to mention a few of them.\nGeovisualisation, on the other hand, works by providing graphical ideation to render a place, a phenomenon or a process visible, enabling human’s most powerful information-processing abilities – those of spatial cognition associated with our eye–brain vision system – to be directly brought to bear.\nIn this exercise, we will explore how to plot functional and truthful choropleth maps by using tmap package."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html",
    "href": "Hands-On_Ex/Hands-On_Ex01/Hands-On_Ex01.html",
    "title": "Hands-On Exercise 1",
    "section": "",
    "text": "pacman::p_load(sf, tidyverse)\nmpsz = st_read(dsn = \"C:/endurrus/IS415-GAA/Hands-On_Ex/Hands-On_Ex01/data\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\endurrus\\IS415-GAA\\Hands-On_Ex\\Hands-On_Ex01\\data' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\ncyclingpath = st_read(dsn = \"C:/endurrus/IS415-GAA/Hands-On_Ex/Hands-On_Ex01/data\", layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\endurrus\\IS415-GAA\\Hands-On_Ex\\Hands-On_Ex01\\data' using driver `ESRI Shapefile'\nSimple feature collection with 3138 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42644.17 ymax: 48948.15\nProjected CRS: SVY21\n\npreschool = st_read(\"C:/endurrus/IS415-GAA/Hands-On_Ex/Hands-On_Ex01/data/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\endurrus\\IS415-GAA\\Hands-On_Ex\\Hands-On_Ex01\\data\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\nlistings &lt;- read_csv(\"C:/endurrus/IS415-GAA/Hands-On_Ex/Hands-On_Ex01/data/listings.csv\") \n\nRows: 3540 Columns: 75\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (26): listing_url, source, name, description, neighborhood_overview, pi...\ndbl  (38): id, scrape_id, host_id, host_listings_count, host_total_listings_...\nlgl   (6): host_is_superhost, host_has_profile_pic, host_identity_verified, ...\ndate  (5): last_scraped, host_since, calendar_last_scraped, first_review, la...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglimpse(listings)\n\nRows: 3,540\nColumns: 75\n$ id                                           &lt;dbl&gt; 71609, 71896, 71903, 2753…\n$ listing_url                                  &lt;chr&gt; \"https://www.airbnb.com/r…\n$ scrape_id                                    &lt;dbl&gt; 2.024063e+13, 2.024063e+1…\n$ last_scraped                                 &lt;date&gt; 2024-06-29, 2024-06-29, …\n$ source                                       &lt;chr&gt; \"previous scrape\", \"city …\n$ name                                         &lt;chr&gt; \"Ensuite Room (Room 1 & 2…\n$ description                                  &lt;chr&gt; \"For 3 rooms.Book room 1 …\n$ neighborhood_overview                        &lt;chr&gt; NA, NA, \"Quiet and view o…\n$ picture_url                                  &lt;chr&gt; \"https://a0.muscache.com/…\n$ host_id                                      &lt;dbl&gt; 367042, 367042, 367042, 1…\n$ host_url                                     &lt;chr&gt; \"https://www.airbnb.com/u…\n$ host_name                                    &lt;chr&gt; \"Belinda\", \"Belinda\", \"Be…\n$ host_since                                   &lt;date&gt; 2011-01-29, 2011-01-29, …\n$ host_location                                &lt;chr&gt; \"Singapore\", \"Singapore\",…\n$ host_about                                   &lt;chr&gt; \"Hi My name is Belinda -H…\n$ host_response_time                           &lt;chr&gt; \"within an hour\", \"within…\n$ host_response_rate                           &lt;chr&gt; \"100%\", \"100%\", \"100%\", \"…\n$ host_acceptance_rate                         &lt;chr&gt; \"N/A\", \"N/A\", \"N/A\", \"99%…\n$ host_is_superhost                            &lt;lgl&gt; FALSE, FALSE, FALSE, FALS…\n$ host_thumbnail_url                           &lt;chr&gt; \"https://a0.muscache.com/…\n$ host_picture_url                             &lt;chr&gt; \"https://a0.muscache.com/…\n$ host_neighbourhood                           &lt;chr&gt; \"Tampines\", \"Tampines\", \"…\n$ host_listings_count                          &lt;dbl&gt; 6, 6, 6, 49, 49, 6, 7, 49…\n$ host_total_listings_count                    &lt;dbl&gt; 11, 11, 11, 73, 73, 11, 8…\n$ host_verifications                           &lt;chr&gt; \"['email', 'phone']\", \"['…\n$ host_has_profile_pic                         &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T…\n$ host_identity_verified                       &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T…\n$ neighbourhood                                &lt;chr&gt; NA, NA, \"Singapore, Singa…\n$ neighbourhood_cleansed                       &lt;chr&gt; \"Tampines\", \"Tampines\", \"…\n$ neighbourhood_group_cleansed                 &lt;chr&gt; \"East Region\", \"East Regi…\n$ latitude                                     &lt;dbl&gt; 1.34537, 1.34754, 1.34531…\n$ longitude                                    &lt;dbl&gt; 103.9589, 103.9596, 103.9…\n$ property_type                                &lt;chr&gt; \"Private room in villa\", …\n$ room_type                                    &lt;chr&gt; \"Private room\", \"Private …\n$ accommodates                                 &lt;dbl&gt; 3, 1, 2, 1, 1, 4, 2, 1, 1…\n$ bathrooms                                    &lt;dbl&gt; NA, 0.5, 0.5, 2.0, 2.5, N…\n$ bathrooms_text                               &lt;chr&gt; \"1 private bath\", \"Shared…\n$ bedrooms                                     &lt;dbl&gt; 2, 1, 1, 1, 1, 3, 2, 1, 1…\n$ beds                                         &lt;dbl&gt; NA, 1, 2, 1, 1, NA, 1, 1,…\n$ amenities                                    &lt;chr&gt; \"[\\\"Free parking on premi…\n$ price                                        &lt;chr&gt; NA, \"$80.00\", \"$80.00\", \"…\n$ minimum_nights                               &lt;dbl&gt; 92, 92, 92, 180, 180, 92,…\n$ maximum_nights                               &lt;dbl&gt; 365, 365, 365, 999, 999, …\n$ minimum_minimum_nights                       &lt;dbl&gt; 92, 92, 92, 180, 180, 92,…\n$ maximum_minimum_nights                       &lt;dbl&gt; 92, 92, 92, 180, 180, 92,…\n$ minimum_maximum_nights                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1…\n$ maximum_maximum_nights                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1…\n$ minimum_nights_avg_ntm                       &lt;dbl&gt; 92, 92, 92, 180, 180, 92,…\n$ maximum_nights_avg_ntm                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1…\n$ calendar_updated                             &lt;lgl&gt; NA, NA, NA, NA, NA, NA, N…\n$ has_availability                             &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T…\n$ availability_30                              &lt;dbl&gt; 30, 30, 30, 28, 0, 29, 30…\n$ availability_60                              &lt;dbl&gt; 59, 53, 60, 58, 0, 58, 60…\n$ availability_90                              &lt;dbl&gt; 89, 83, 90, 62, 0, 88, 90…\n$ availability_365                             &lt;dbl&gt; 89, 148, 90, 62, 0, 88, 3…\n$ calendar_last_scraped                        &lt;date&gt; 2024-06-29, 2024-06-29, …\n$ number_of_reviews                            &lt;dbl&gt; 19, 24, 46, 20, 16, 12, 1…\n$ number_of_reviews_ltm                        &lt;dbl&gt; 0, 0, 0, 0, 2, 0, 0, 1, 1…\n$ number_of_reviews_l30d                       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ first_review                                 &lt;date&gt; 2011-12-19, 2011-07-30, …\n$ last_review                                  &lt;date&gt; 2020-01-17, 2019-10-13, …\n$ review_scores_rating                         &lt;dbl&gt; 4.44, 4.16, 4.41, 4.40, 4…\n$ review_scores_accuracy                       &lt;dbl&gt; 4.37, 4.22, 4.39, 4.16, 4…\n$ review_scores_cleanliness                    &lt;dbl&gt; 4.00, 4.09, 4.52, 4.26, 4…\n$ review_scores_checkin                        &lt;dbl&gt; 4.63, 4.43, 4.63, 4.47, 4…\n$ review_scores_communication                  &lt;dbl&gt; 4.78, 4.43, 4.64, 4.42, 4…\n$ review_scores_location                       &lt;dbl&gt; 4.26, 4.17, 4.50, 4.53, 4…\n$ review_scores_value                          &lt;dbl&gt; 4.32, 4.04, 4.36, 4.63, 4…\n$ license                                      &lt;chr&gt; NA, NA, NA, \"S0399\", \"S03…\n$ instant_bookable                             &lt;lgl&gt; FALSE, FALSE, FALSE, TRUE…\n$ calculated_host_listings_count               &lt;dbl&gt; 6, 6, 6, 49, 49, 6, 7, 49…\n$ calculated_host_listings_count_entire_homes  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 1, 0, 0…\n$ calculated_host_listings_count_private_rooms &lt;dbl&gt; 6, 6, 6, 49, 49, 6, 6, 49…\n$ calculated_host_listings_count_shared_rooms  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ reviews_per_month                            &lt;dbl&gt; 0.12, 0.15, 0.29, 0.15, 0…\n\nlistings_sf &lt;- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %&gt;%\n  st_transform(crs = 3414)\n\nglimpse(listings_sf)\n\nRows: 3,540\nColumns: 74\n$ id                                           &lt;dbl&gt; 71609, 71896, 71903, 2753…\n$ listing_url                                  &lt;chr&gt; \"https://www.airbnb.com/r…\n$ scrape_id                                    &lt;dbl&gt; 2.024063e+13, 2.024063e+1…\n$ last_scraped                                 &lt;date&gt; 2024-06-29, 2024-06-29, …\n$ source                                       &lt;chr&gt; \"previous scrape\", \"city …\n$ name                                         &lt;chr&gt; \"Ensuite Room (Room 1 & 2…\n$ description                                  &lt;chr&gt; \"For 3 rooms.Book room 1 …\n$ neighborhood_overview                        &lt;chr&gt; NA, NA, \"Quiet and view o…\n$ picture_url                                  &lt;chr&gt; \"https://a0.muscache.com/…\n$ host_id                                      &lt;dbl&gt; 367042, 367042, 367042, 1…\n$ host_url                                     &lt;chr&gt; \"https://www.airbnb.com/u…\n$ host_name                                    &lt;chr&gt; \"Belinda\", \"Belinda\", \"Be…\n$ host_since                                   &lt;date&gt; 2011-01-29, 2011-01-29, …\n$ host_location                                &lt;chr&gt; \"Singapore\", \"Singapore\",…\n$ host_about                                   &lt;chr&gt; \"Hi My name is Belinda -H…\n$ host_response_time                           &lt;chr&gt; \"within an hour\", \"within…\n$ host_response_rate                           &lt;chr&gt; \"100%\", \"100%\", \"100%\", \"…\n$ host_acceptance_rate                         &lt;chr&gt; \"N/A\", \"N/A\", \"N/A\", \"99%…\n$ host_is_superhost                            &lt;lgl&gt; FALSE, FALSE, FALSE, FALS…\n$ host_thumbnail_url                           &lt;chr&gt; \"https://a0.muscache.com/…\n$ host_picture_url                             &lt;chr&gt; \"https://a0.muscache.com/…\n$ host_neighbourhood                           &lt;chr&gt; \"Tampines\", \"Tampines\", \"…\n$ host_listings_count                          &lt;dbl&gt; 6, 6, 6, 49, 49, 6, 7, 49…\n$ host_total_listings_count                    &lt;dbl&gt; 11, 11, 11, 73, 73, 11, 8…\n$ host_verifications                           &lt;chr&gt; \"['email', 'phone']\", \"['…\n$ host_has_profile_pic                         &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T…\n$ host_identity_verified                       &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T…\n$ neighbourhood                                &lt;chr&gt; NA, NA, \"Singapore, Singa…\n$ neighbourhood_cleansed                       &lt;chr&gt; \"Tampines\", \"Tampines\", \"…\n$ neighbourhood_group_cleansed                 &lt;chr&gt; \"East Region\", \"East Regi…\n$ property_type                                &lt;chr&gt; \"Private room in villa\", …\n$ room_type                                    &lt;chr&gt; \"Private room\", \"Private …\n$ accommodates                                 &lt;dbl&gt; 3, 1, 2, 1, 1, 4, 2, 1, 1…\n$ bathrooms                                    &lt;dbl&gt; NA, 0.5, 0.5, 2.0, 2.5, N…\n$ bathrooms_text                               &lt;chr&gt; \"1 private bath\", \"Shared…\n$ bedrooms                                     &lt;dbl&gt; 2, 1, 1, 1, 1, 3, 2, 1, 1…\n$ beds                                         &lt;dbl&gt; NA, 1, 2, 1, 1, NA, 1, 1,…\n$ amenities                                    &lt;chr&gt; \"[\\\"Free parking on premi…\n$ price                                        &lt;chr&gt; NA, \"$80.00\", \"$80.00\", \"…\n$ minimum_nights                               &lt;dbl&gt; 92, 92, 92, 180, 180, 92,…\n$ maximum_nights                               &lt;dbl&gt; 365, 365, 365, 999, 999, …\n$ minimum_minimum_nights                       &lt;dbl&gt; 92, 92, 92, 180, 180, 92,…\n$ maximum_minimum_nights                       &lt;dbl&gt; 92, 92, 92, 180, 180, 92,…\n$ minimum_maximum_nights                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1…\n$ maximum_maximum_nights                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1…\n$ minimum_nights_avg_ntm                       &lt;dbl&gt; 92, 92, 92, 180, 180, 92,…\n$ maximum_nights_avg_ntm                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1…\n$ calendar_updated                             &lt;lgl&gt; NA, NA, NA, NA, NA, NA, N…\n$ has_availability                             &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T…\n$ availability_30                              &lt;dbl&gt; 30, 30, 30, 28, 0, 29, 30…\n$ availability_60                              &lt;dbl&gt; 59, 53, 60, 58, 0, 58, 60…\n$ availability_90                              &lt;dbl&gt; 89, 83, 90, 62, 0, 88, 90…\n$ availability_365                             &lt;dbl&gt; 89, 148, 90, 62, 0, 88, 3…\n$ calendar_last_scraped                        &lt;date&gt; 2024-06-29, 2024-06-29, …\n$ number_of_reviews                            &lt;dbl&gt; 19, 24, 46, 20, 16, 12, 1…\n$ number_of_reviews_ltm                        &lt;dbl&gt; 0, 0, 0, 0, 2, 0, 0, 1, 1…\n$ number_of_reviews_l30d                       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ first_review                                 &lt;date&gt; 2011-12-19, 2011-07-30, …\n$ last_review                                  &lt;date&gt; 2020-01-17, 2019-10-13, …\n$ review_scores_rating                         &lt;dbl&gt; 4.44, 4.16, 4.41, 4.40, 4…\n$ review_scores_accuracy                       &lt;dbl&gt; 4.37, 4.22, 4.39, 4.16, 4…\n$ review_scores_cleanliness                    &lt;dbl&gt; 4.00, 4.09, 4.52, 4.26, 4…\n$ review_scores_checkin                        &lt;dbl&gt; 4.63, 4.43, 4.63, 4.47, 4…\n$ review_scores_communication                  &lt;dbl&gt; 4.78, 4.43, 4.64, 4.42, 4…\n$ review_scores_location                       &lt;dbl&gt; 4.26, 4.17, 4.50, 4.53, 4…\n$ review_scores_value                          &lt;dbl&gt; 4.32, 4.04, 4.36, 4.63, 4…\n$ license                                      &lt;chr&gt; NA, NA, NA, \"S0399\", \"S03…\n$ instant_bookable                             &lt;lgl&gt; FALSE, FALSE, FALSE, TRUE…\n$ calculated_host_listings_count               &lt;dbl&gt; 6, 6, 6, 49, 49, 6, 7, 49…\n$ calculated_host_listings_count_entire_homes  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 1, 0, 0…\n$ calculated_host_listings_count_private_rooms &lt;dbl&gt; 6, 6, 6, 49, 49, 6, 6, 49…\n$ calculated_host_listings_count_shared_rooms  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ reviews_per_month                            &lt;dbl&gt; 0.12, 0.15, 0.29, 0.15, 0…\n$ geometry                                     &lt;POINT [m]&gt; POINT (41972.5 3639…\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\nhead(mpsz, n=5)  \n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\nplot(mpsz)\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\nplot(st_geometry(mpsz))\n\n\n\n\n\n\n\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\n\n\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\nmpsz3414 &lt;- st_set_crs(mpsz, 3414)\n\nWarning: st_crs&lt;- : replacing crs does not reproject data; use st_transform for\nthat\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\npreschool3414 &lt;- st_transform(preschool, \n                              crs = 3414)\n\nbuffer_cycling &lt;- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 30)\n\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\n\nsum(buffer_cycling$AREA)\n\n2218855 [m^2]\n\nmpsz3414$`PreSch Count`&lt;- lengths(st_intersects(mpsz3414, preschool3414))\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n\nmpsz3414$Area &lt;- mpsz3414 %&gt;%\n  st_area()\n\nmpsz3414 &lt;- mpsz3414 %&gt;%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\n\n\n\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\n\n\n\nggplot(data=mpsz3414, \n       aes(y = `PreSch Count`, \n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\", \n             fill=\"light blue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Pre-school count\")\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`)."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#overview",
    "href": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#overview",
    "title": "Hands-On_Ex02",
    "section": "",
    "text": "The main learning topics of today’s hands-on exercise are thematic/choropleth mapping and other geospatial visualization techniques.\nIn general, thematic mapping involves the use of map symbols to visualize selected properties of geographic features that are not naturally visible, such as population, temperature, crime rate, and property prices, just to mention a few of them.\nGeovisualisation, on the other hand, works by providing graphical ideation to render a place, a phenomenon or a process visible, enabling human’s most powerful information-processing abilities – those of spatial cognition associated with our eye–brain vision system – to be directly brought to bear.\nIn this exercise, we will explore how to plot functional and truthful choropleth maps by using tmap package."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#importing-packages",
    "href": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#importing-packages",
    "title": "Hands-On_Ex02",
    "section": "2.0 Importing Packages",
    "text": "2.0 Importing Packages\nBefore we start the exercise, we will need to import necessary R packages first. We will use the following packages:\n\nreadr for importing delimited text file,\ntidyr for tidying data,\ndplyr for wrangling data and\nsf for handling geospatial data.\n\nSince readr, tidyr and dplyr are part of tidyverse package, we will only need to install and import tidyverse.\n\npacman::p_load(sf, tmap, tidyverse)\ndevtools::install_github(\"thomasp85/patchwork\")\n\nUsing GitHub PAT from the git credential store.\n\n\nSkipping install of 'patchwork' from a github remote, the SHA1 (3e549b42) has not changed since last install.\n  Use `force = TRUE` to force installation\n\nlibrary(patchwork)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#importing-datasets-into-r-environment",
    "href": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#importing-datasets-into-r-environment",
    "title": "Hands-On_Ex02",
    "section": "3.0 Importing Datasets into R Environment",
    "text": "3.0 Importing Datasets into R Environment\n\n3.1 Datasets\nIn this exercise, we will use two datasets as follows:\n\nMaster Plan 2014 Subzone Boundary (Web) (i.e. MP14_SUBZONE_WEB_PL) in ESRI shapefile format. It can be downloaded at data.gov.sg This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e.respopagesextod2011to2020.csv). This is an aspatial data fie. It can be downloaded at Department of Statistics, Singapore Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile.\n\n\n\n3.2 Importing Geospatial Data into R\nFor geospatial data, we will use st_read() function of sf package to import shapefile into R as a simple feature data frame called mpsz.\n\nmpsz &lt;- st_read(dsn = \"C:/endurrus/IS415-GAA/Hands-On_Ex/Hands-On_Ex02/data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\endurrus\\IS415-GAA\\Hands-On_Ex\\Hands-On_Ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\n\n3.3 Importing Aspatial (Attribute) Data into R\nFor aspatial datasets like respopagsex2011to2020.csv, we will import into Rstudio using read_csv() function of readr package.\n\npopdata &lt;- read_csv(\"C:/endurrus/IS415-GAA/Hands-On_Ex/Hands-On_Ex02/data/aspatial/respopagesexfa2011to2020.csv\")\n\nRows: 738492 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, FA\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#data-preparation-and-wrangling",
    "href": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#data-preparation-and-wrangling",
    "title": "Hands-On_Ex02",
    "section": "4.0 Data Preparation and Wrangling",
    "text": "4.0 Data Preparation and Wrangling\nBefore a thematic map can be prepared, we are required to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\nYOUNG: age group 0 to 4 until age groyup 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\n4.1 Data Wrangling\nIn order to carry out necessary data wrangling and transformation, the following functions will be used:\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by() and select() of dplyr package\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup()%&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %&gt;%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%&gt;%\nmutate(`AGED`=rowSums(.[16:21])) %&gt;%\nmutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\n\n\n\n4.2 Joining Geospatial Data and Attribute Data\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.\nHence, we will standard the data values in these two fields.\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = list(toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier.\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#choropleth-mapping-geospatial-data-using-tmap",
    "href": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#choropleth-mapping-geospatial-data-using-tmap",
    "title": "Hands-On_Ex02",
    "section": "5.0 Choropleth Mapping Geospatial Data Using tmap",
    "text": "5.0 Choropleth Mapping Geospatial Data Using tmap\nChoropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\nTwo approaches can be used to prepare thematic map using tmap, they are:\n\nPlotting a thematic map quickly by using qtm().\nPlotting highly customisable thematic map by using tmap elements.\n\n\n5.1 Plotting a choropleth map quickly by using qtm()\nThe easiest and quickest to draw a choropleth map using tmap is using qtm(). It is concise and provides a good default visualisation in many cases.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\",\n    fill.palette =\"plasma\")\n\n\n\n\n\n\n\n\n\n\n5.2 Plotting a choropleth map quickly by using qtm()\nHowever, in real-life application, the quick choropleth map produced in the previous session may not be sufficient enough to properly visualize geospatial data. However, tmap packages allow us to customise and control how we design our choropleth maps. We will exploit tmap’s drawing elements to create a high quality cartographic choropleth map that includes more accurate and informative information.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"plasma\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\nNext, we will breakdown the different tmpa functions used to plot the additional elements in the map above.\n\n\n5.3 Drawing a Base Map Using tm_shape()\nThe basic building block of tmap is tm_shape() followed by one or more layer elemments such as tm_fill() and tm_polygons().\n\ntm_shape() is used to define the input data (i.e mpsz_pop2020) and tm_polygons() is used to draw the planning subzone polygons.\n\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\n\n\n\n\n5.4 Drawing a Choropleth Map Using tm_polygons()\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as Dependency to tm_polygons().\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\n\n5.5 Drawing a Choropleth Map Using tm_fill() and tm_border()\nActually, tm_polygons() is a wraper of tm_fill() and tm_border(). tm_fill() shades the polygons by using the default colour scheme and tm_borders() adds the borders of the shapefile onto the choropleth map.\nFirstly, we will try to draw a choropleth map by using tm_fill() alone.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nTo add the boundary of the planning subzones, tm_borders will be used as shown below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#data-classification-methods-of-tmap",
    "href": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#data-classification-methods-of-tmap",
    "title": "Hands-On_Ex02",
    "section": "6.0 Data Classification Methods of tmap",
    "text": "6.0 Data Classification Methods of tmap\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\ntmap provides a total ten data classification methods, namely:\n\nfixed,\nsd,\nequal,\npretty (default),\nquantile,\nkmeans,\nhclust,\nbclust,\nfisher, and\njenks.\n\n\n6.1 Plotting Choropleth Maps with Built-in Classification Methods\nTo define a data classification method, the style argument of tm_fill() or tm_polygons() will be used. The code chunk below shows a quantile data classification that used 5 classes.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          palette = \"plasma\",\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nNext, we will try equal data classification method.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          palette = \"plasma\",\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          palette = \"plasma\",\n          style = \"sd\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          palette = \"plasma\",\n          style = \"hclust\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          palette = \"plasma\",\n          style = \"bclust\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nCommittee Member: 1(1) 2(1) 3(1) 4(1) 5(1) 6(1) 7(1) 8(1) 9(1) 10(1)\nComputing Hierarchical Clustering\n\n\nAlso, we can try exploring using the same classification methods, but with different numbers of classes. As an example, we will use kmeans clustering method with different class sizes (2,6,10,20)\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 2,\n          palette = \"plasma\",\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          palette = \"plasma\",\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 10,\n          palette = \"plasma\",\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,\n          palette = \"plasma\",\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n6.2 Plotting Choropleth Maps with Custom Breaks\nFor all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the breaks argument to the tm_fill(). It is important to note that, in tmap the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).\nBefore we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.7113  0.7926  0.8561  0.8786 19.0000      92 \n\noriginal &lt;- ggplot(data=mpsz_pop2020, aes(x=`DEPENDENCY`)) +\n  geom_bar(color=\"black\", fill=\"#e9531e\")+\n  scale_x_binned(n.breaks=10)\n\n#Try to remove outliers\nmpsz_pop2020_no_outlier &lt;- subset(mpsz_pop2020, mpsz_pop2020$DEPENDENCY &lt;3)\n\nfiltered &lt;- ggplot(data=mpsz_pop2020_no_outlier, aes(x=`DEPENDENCY`)) +\n  geom_bar(color=\"black\", fill=\"#e9531e\")+\n  scale_x_binned(n.breaks=10)\n\noriginal + filtered\n\nWarning: Removed 92 rows containing non-finite outside the scale range\n(`stat_count()`).\n\n\n\n\n\n\n\n\n\nWith reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 1.00. Our breaks vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\nUsing this information, we will now proceed to plot the choropleth map.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          palette=\"plasma\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\nWarning: Values have found that are higher than the highest break\n\n\n\n\n\n\n\n\n\n\n\n6.3 Customising Colour Schemes\ntmap supports colour ramps either defined by the user or a set of predefined colour ramps from the RColorBrewer package.\nTo change the colour, we assign the preferred colour to palette argument of tm_fill() as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"plasma\") +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#controlling-and-customizing-map-layots",
    "href": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#controlling-and-customizing-map-layots",
    "title": "Hands-On_Ex02",
    "section": "7.0 Controlling and Customizing Map Layots",
    "text": "7.0 Controlling and Customizing Map Layots\nMap layout refers to the combination of all map elements into a cohensive map. Map elements include among others the objects to be mapped, the title, the scale bar, the compass, margins and aspects ratios. Colour settings and data classification methods covered in the previous section relate to the palette and break-points are used to affect how the map looks.\n\n7.1 Map Legend\nIn tmap, several legend options are provided to change the placement, format and appearance of the legend.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"plasma\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            #legend.height = 0.45, \n            #legend.width = 0.35,\n            legend.outside = TRUE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n7.2 Map Style\ntmap allows a wide variety of layout settings to be changed. They can be called by using tmap_style().\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"plasma\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n\n\n\n\n\n\n\n\n\n\n\n7.3 Cartographic Furniture\nBeside map style, tmap also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\nIn the code chunk below, tm_compass(), tm_scale_bar() and tm_grid() are used to add compass, scale bar and grid lines onto the choropleth map.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"plasma\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#drawing-small-multiple-choropleth-maps",
    "href": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#drawing-small-multiple-choropleth-maps",
    "title": "Hands-On_Ex02",
    "section": "8.0 Drawing Small Multiple Choropleth Maps",
    "text": "8.0 Drawing Small Multiple Choropleth Maps\nSmall multiple maps, also referred to as facet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\n\n8.1 By assigning multiple values to at least one of the aesthetic arguments\nIn this example, small multiple choropleth maps are created by defining ncols in tm_fill()\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"plasma\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n\n\n\n\nIn this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"plasma\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n8.2 By defining a group-by variable in tm_facets()\nIn this example, multiple small choropleth maps are created by using tm_facets()\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"plasma\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n8.3 By creating multiple stand-alone maps with tmap_arrange()\nIn this example, multiple small choropleth maps are created by creating multiple stand-alone maps with tmap_arrange().\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"viridis\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"plasma\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#mappping-spatial-object-meeting-a-selection-criterion",
    "href": "Hands-On_Ex/Hands-On_Ex02/Hands-On_Ex02.html#mappping-spatial-object-meeting-a-selection-criterion",
    "title": "Hands-On_Ex02",
    "section": "9.0 Mappping Spatial Object Meeting a Selection Criterion",
    "text": "9.0 Mappping Spatial Object Meeting a Selection Criterion\nInstead of creating small multiple choropleth map, we can also use selection funtion to map spatial objects meeting the selection criterion.\nFor example, we have select the central region and DEPENDENCY column to plot.\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"plasma\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex01/data/MPSZ-2019.html",
    "href": "In-Class_Ex/In-Class_Ex01/data/MPSZ-2019.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03.html",
    "href": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03.html",
    "title": "Hands-On_Ex03",
    "section": "",
    "text": "Spatial Point Pattern Analysis is the evaluation of the distribution of a set of points on a surface. THe points can represent the location of events (crime occurences, accidents), or physical facilities (FnB outlets, healthcare clinics).\nThis exercise uses spatstat functions to discover the spatial point processes of childcare centers in Singapore, and seeks to answer the following:\n\nAre childcare centers in Singapore randomly distributed throughout the country?\nIf not, where are the locations with a higher concentration of childcare centers?\n\n\n\nThis exercise uses the R packages tmap, sf, tidyverse, raster, and spatstat.\n\ninstall.packages(\"maptools\", repos = \"https://packagemanager.posit.co/cran/2023-10-13\")\n\nInstalling package into 'C:/Users/Kai/AppData/Local/R/win-library/4.4'\n(as 'lib' is unspecified)\n\n\npackage 'maptools' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Kai\\AppData\\Local\\Temp\\RtmpcTyqsF\\downloaded_packages\n\n\n\npacman::p_load(tmap, sf, tidyverse, raster, spatstat, maptools, sp)\n\nInstalling package into 'C:/Users/Kai/AppData/Local/R/win-library/4.4'\n(as 'lib' is unspecified)\n\n\nalso installing the dependencies 'deldir', 'polyclip', 'spatstat.sparse', 'goftest', 'tensor', 'spatstat.data', 'spatstat.univar', 'spatstat.geom', 'spatstat.random', 'spatstat.explore', 'spatstat.model', 'spatstat.linnet', 'spatstat.utils'\n\n\nWarning: unable to access index for repository http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.4:\n  cannot open URL 'http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.4/PACKAGES'\n\n\npackage 'deldir' successfully unpacked and MD5 sums checked\npackage 'polyclip' successfully unpacked and MD5 sums checked\npackage 'spatstat.sparse' successfully unpacked and MD5 sums checked\npackage 'goftest' successfully unpacked and MD5 sums checked\npackage 'tensor' successfully unpacked and MD5 sums checked\npackage 'spatstat.data' successfully unpacked and MD5 sums checked\npackage 'spatstat.univar' successfully unpacked and MD5 sums checked\npackage 'spatstat.geom' successfully unpacked and MD5 sums checked\npackage 'spatstat.random' successfully unpacked and MD5 sums checked\npackage 'spatstat.explore' successfully unpacked and MD5 sums checked\npackage 'spatstat.model' successfully unpacked and MD5 sums checked\npackage 'spatstat.linnet' successfully unpacked and MD5 sums checked\npackage 'spatstat.utils' successfully unpacked and MD5 sums checked\npackage 'spatstat' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Kai\\AppData\\Local\\Temp\\RtmpcTyqsF\\downloaded_packages\n\n\n\nspatstat installed\n\n\n\n\n\nDownload the following:\n\nChildcare Services (GeoJSON)\nMaster Plan 2014 Subzone Boundary Data\nCostalOutline from SLA\n\nUsing st_read(), import the following geospatial data into R:\n\nchildcare_sf&lt;- st_read(\"data/child-care-services-geojson.geojson\") %&gt;% st_transform( crs = 3414) \n\nReading layer `child-care-services-geojson' from data source \n  `C:\\endurrus\\IS415-GAA\\Hands-On_Ex\\Hands-On_Ex03\\data\\child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nmpsz_sf &lt;- st_read(dsn = \"data\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\endurrus\\IS415-GAA\\Hands-On_Ex\\Hands-On_Ex03\\data' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nsg_sf &lt;- st_read(dsn = \"data\", layer = \"CostalOutline\")\n\nReading layer `CostalOutline' from data source \n  `C:\\endurrus\\IS415-GAA\\Hands-On_Ex\\Hands-On_Ex03\\data' using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\n\nNext, we need to project the dataframes in the same projection system.\n\nmpsz_sf &lt;- st_transform(mpsz_sf, crs = 3414)\nsg_sf &lt;- st_transform(sg_sf, crs = 3414)\n# childcare_sf is already in EPSG3414\n\nPlot the datasets to observe the spatial patterns.\n\ntm_shape(sg_sf) + tm_polygons() + tm_shape(mpsz_sf) + tm_polygons() + tm_shape(childcare_sf) + tm_dots()\n\n\n\n\n\n\n\n\nCreate an alternative interactive pin map using the code below:\n\n#tmap_mode('view')\n#tm_shape(childcare_sf)+\n  #tm_dots()\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\n\nGeospatial Data Wrangling\nConvert sf dataframes to sp’s Spatial* class\nThe code below uses as_Spatial() from the sf package to convert the three geospatial data from a simple dataframe to sp’s Spatial* class.\n\nchildcare &lt;- as_Spatial(childcare_sf)\nmpsz &lt;- as_Spatial(mpsz_sf)\nsg &lt;- as_Spatial(sg_sf)\n\nCheck the conversion:\n\nchildcare\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 2\nnames       :    Nameescription \nmin values  :   kml_1, &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;018989&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;1, MARINA BOULEVARD, #B1 - 01, ONE MARINA BOULEVARD, SINGAPORE 018989&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;THE LITTLE SKOOL-HOUSE INTERNATIONAL PTE. LTD.&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;08F73931F4A691F4&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20200826094036&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt; \nmax values  : kml_999,                  &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;829646&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;200, PONGGOL SEVENTEENTH AVENUE, SINGAPORE 829646&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;Child Care Services&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;RAFFLES KIDZ @ PUNGGOL PTE LTD&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;379D017BF244B0FA&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20200826094036&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt; \n\n\n\nmpsz\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 323 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 15\nnames       : OBJECTID, SUBZONE_NO, SUBZONE_N, SUBZONE_C, CA_IND, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C,          INC_CRC, FMEL_UPD_D,     X_ADDR,     Y_ADDR,    SHAPE_Leng,    SHAPE_Area \nmin values  :        1,          1, ADMIRALTY,    AMSZ01,      N, ANG MO KIO,         AM, CENTRAL REGION,       CR, 00F5E30B5C9B7AD8,      16409,  5092.8949,  19579.069, 871.554887798, 39437.9352703 \nmax values  :      323,         17,    YUNNAN,    YSSZ09,      Y,     YISHUN,         YS,    WEST REGION,       WR, FFCCF172717C2EAF,      16409, 50424.7923, 49552.7904, 68083.9364708,  69748298.792 \n\n\n\nsg\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 4\nnames       : GDO_GID, MSLINK, MAPID,              COSTAL_NAM \nmin values  :       1,      1,     0,             ISLAND LINK \nmax values  :      60,     67,     0, SINGAPORE - MAIN ISLAND \n\n\nConvert Spatial* into generic sp format\n\nchildcare_sp &lt;- as(childcare, \"SpatialPoints\")\nsg_sp &lt;- as(sg, \"SpatialPolygons\")\n\nDisplaying the sp objects:\n\nchildcare_sp\n\nclass       : SpatialPoints \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nsg_sp\n\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\nConvert sp format into spatstat’s ppp format\n\n#win &lt;- as.owin(childcare_sp)\nchildcare_ppp1 &lt;- as(childcare_sp, \"ppp\")\nchildcare_ppp1\n\nPlanar point pattern: 1545 points\nwindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n\n#cant get this to work, look later\n\nalternatively use the below to convert from sf into ppp format\n\nchildcare_ppp &lt;- as.ppp(st_coordinates(childcare_sf), st_bbox(childcare_sf))\n\nWarning: data contain duplicated points\n\n\nLooking at the data plot and statistics summary of the ppp object, we can see that both methods result in identical results.\n\nplot(childcare_ppp)\n\n\n\n\n\n\n\n\n\nsummary(childcare_ppp)\n\nMarked planar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 11 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      0       0       0       0       0       0 \n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units\n\n\n\nplot(childcare_ppp1)\n\n\n\n\n\n\n\n\n\nsummary(childcare_ppp1)\n\nPlanar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 11 decimal places\n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units\n\n\nNotice that a warning about duplicates occurs. In spatial point patterns analysis, a significant issue is the presence of duplicates. The statistical methodology used for spatial points patterns processes is based largely on the assumption that processes are simple, that the points cannot be coincident. balls test\nThe code below can check the duplication in ppp:\n\nany(duplicated(childcare_ppp))\n\n[1] TRUE\n\n\nTo count the number of coincidence points, the multiplicity() function can be used:\n\nmultiplicity(childcare_ppp)\n\n   1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16 \n   1    1    1    3    1    1    1    1    2    1    1    1    1    1    1    1 \n  17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32 \n   1    1    1    1    1    1    1    1    1    1    9    1    1    1    1    1 \n  33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n  49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64 \n   1    1    1    1    1    1    2    1    1    3    1    1    1    1    1    1 \n  65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80 \n   1    1    1    1    1    2    1    1    1    1    1    2    1    1    1    1 \n  81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96 \n   1    1    1    3    1    1    1    1    1    1    1    1    1    1    1    1 \n  97   98   99  100  101  102  103  104  105  106  107  108  109  110  111  112 \n   1    1    1    1    1    1    1    1    2    1    1    1    1    1    1    1 \n 113  114  115  116  117  118  119  120  121  122  123  124  125  126  127  128 \n   1    1    1    1    1    1    2    1    1    1    3    1    1    1    2    1 \n 129  130  131  132  133  134  135  136  137  138  139  140  141  142  143  144 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    3    2 \n 145  146  147  148  149  150  151  152  153  154  155  156  157  158  159  160 \n   1    2    1    1    1    2    2    3    1    5    1    5    1    1    1    2 \n 161  162  163  164  165  166  167  168  169  170  171  172  173  174  175  176 \n   1    1    1    1    2    1    1    1    1    1    1    2    1    1    1    1 \n 177  178  179  180  181  182  183  184  185  186  187  188  189  190  191  192 \n   1    4    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 193  194  195  196  197  198  199  200  201  202  203  204  205  206  207  208 \n   1    1    1    1    1    2    2    1    1    1    1    2    1    4    1    1 \n 209  210  211  212  213  214  215  216  217  218  219  220  221  222  223  224 \n   2    1    1    1    1    1    1    1    1    1    1    1    2    1    1    1 \n 225  226  227  228  229  230  231  232  233  234  235  236  237  238  239  240 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 241  242  243  244  245  246  247  248  249  250  251  252  253  254  255  256 \n   1    1    1    1    2    1    1    1    1    1    1    1    1    1    1    1 \n 257  258  259  260  261  262  263  264  265  266  267  268  269  270  271  272 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    3 \n 273  274  275  276  277  278  279  280  281  282  283  284  285  286  287  288 \n   1    1    1    1    1    1    3    1    1    1    1    1    1    1    1    1 \n 289  290  291  292  293  294  295  296  297  298  299  300  301  302  303  304 \n   1    1    1    1    1    1    1    9    1    1    2    1    1    1    1    1 \n 305  306  307  308  309  310  311  312  313  314  315  316  317  318  319  320 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 321  322  323  324  325  326  327  328  329  330  331  332  333  334  335  336 \n   1    1    1    5    1    1    1    1    1    2    1    1    2    2    1    1 \n 337  338  339  340  341  342  343  344  345  346  347  348  349  350  351  352 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    2    2    1 \n 353  354  355  356  357  358  359  360  361  362  363  364  365  366  367  368 \n   1    1    1    1    9    1    1    1    1    1    1    1    1    1    1    1 \n 369  370  371  372  373  374  375  376  377  378  379  380  381  382  383  384 \n   1    3    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 385  386  387  388  389  390  391  392  393  394  395  396  397  398  399  400 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 401  402  403  404  405  406  407  408  409  410  411  412  413  414  415  416 \n   1    1    2    1    1    1    1    1    1    1    2    1    1    1    1    1 \n 417  418  419  420  421  422  423  424  425  426  427  428  429  430  431  432 \n   1    1    1    1    1    1    1    2    1    1    2    1    1    1    1    1 \n 433  434  435  436  437  438  439  440  441  442  443  444  445  446  447  448 \n   1    1    1    1    2    1    1    1    1    1    1    1    1    1    1    1 \n 449  450  451  452  453  454  455  456  457  458  459  460  461  462  463  464 \n   1    1    9    9    1    1    1    1    1    1    1    1    1    1    2    1 \n 465  466  467  468  469  470  471  472  473  474  475  476  477  478  479  480 \n   2    1    1    1    1    1    1    1    1    1    1    1    2    2    1    1 \n 481  482  483  484  485  486  487  488  489  490  491  492  493  494  495  496 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 497  498  499  500  501  502  503  504  505  506  507  508  509  510  511  512 \n   1    1    1    1    1    1    2    1    1    1    1    1    1    1    1    2 \n 513  514  515  516  517  518  519  520  521  522  523  524  525  526  527  528 \n   1    1    1    1    1    1    1    1    1    1    1    2    1    1    3    1 \n 529  530  531  532  533  534  535  536  537  538  539  540  541  542  543  544 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 545  546  547  548  549  550  551  552  553  554  555  556  557  558  559  560 \n   1    1    1    1    1    1    1    1    1    3    1    1    1    1    1    1 \n 561  562  563  564  565  566  567  568  569  570  571  572  573  574  575  576 \n   2    2    2    1    1    1    1    2    1    1    2    1    1    1    2    1 \n 577  578  579  580  581  582  583  584  585  586  587  588  589  590  591  592 \n   1    2    1    1    1    1    1    9    1    4    1    2    1    1    1    1 \n 593  594  595  596  597  598  599  600  601  602  603  604  605  606  607  608 \n   2    1    1    1    1    1    1    1    2    1    2    1    1    1    1    1 \n 609  610  611  612  613  614  615  616  617  618  619  620  621  622  623  624 \n   1    1    1    1    1    1    1    1    1    2    1    2    1    1    1    1 \n 625  626  627  628  629  630  631  632  633  634  635  636  637  638  639  640 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 641  642  643  644  645  646  647  648  649  650  651  652  653  654  655  656 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    4 \n 657  658  659  660  661  662  663  664  665  666  667  668  669  670  671  672 \n   1    1    1    1    1    1    1    3    1    1    1    1    1    1    1    1 \n 673  674  675  676  677  678  679  680  681  682  683  684  685  686  687  688 \n   1    1    1    1    1    4    1    1    1    1    1    4    1    1    1    1 \n 689  690  691  692  693  694  695  696  697  698  699  700  701  702  703  704 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 705  706  707  708  709  710  711  712  713  714  715  716  717  718  719  720 \n   1    1    2    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 721  722  723  724  725  726  727  728  729  730  731  732  733  734  735  736 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 737  738  739  740  741  742  743  744  745  746  747  748  749  750  751  752 \n   1    2    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 753  754  755  756  757  758  759  760  761  762  763  764  765  766  767  768 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    1    1 \n 769  770  771  772  773  774  775  776  777  778  779  780  781  782  783  784 \n   1    1    1    1    1    1    1    1    1    4    1    1    1    1    1    1 \n 785  786  787  788  789  790  791  792  793  794  795  796  797  798  799  800 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 801  802  803  804  805  806  807  808  809  810  811  812  813  814  815  816 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 817  818  819  820  821  822  823  824  825  826  827  828  829  830  831  832 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 833  834  835  836  837  838  839  840  841  842  843  844  845  846  847  848 \n   1    1    1    1    1    1    1    2    1    1    1    1    1    1    1    1 \n 849  850  851  852  853  854  855  856  857  858  859  860  861  862  863  864 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 865  866  867  868  869  870  871  872  873  874  875  876  877  878  879  880 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n 881  882  883  884  885  886  887  888  889  890  891  892  893  894  895  896 \n   3    1    1    1    2    1    1    1    3    1    1    3    1    1    1    1 \n 897  898  899  900  901  902  903  904  905  906  907  908  909  910  911  912 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 913  914  915  916  917  918  919  920  921  922  923  924  925  926  927  928 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 929  930  931  932  933  934  935  936  937  938  939  940  941  942  943  944 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 945  946  947  948  949  950  951  952  953  954  955  956  957  958  959  960 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n 961  962  963  964  965  966  967  968  969  970  971  972  973  974  975  976 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 977  978  979  980  981  982  983  984  985  986  987  988  989  990  991  992 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 993  994  995  996  997  998  999 1000 1001 1002 1003 1004 1005 1006 1007 1008 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 \n   1    1    1    1    1    1    1    1    1    2    2    1    1    1    1    1 \n1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    1    1 \n1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 \n   1    1    1    1    1    1    1    1    2    2    1    1    1    5    1    1 \n1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 \n   1    1    1    1    1    1    1    1    1    2    1    1    1    1    1    1 \n1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    1 \n1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 \n   1    9    1    2    2    1    1    1    2    1    1    1    1    1    1    1 \n1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 \n   1    1    1    1    2    1    1    1    3    1    1    1    1    1    1    1 \n1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 \n   9    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 \n   1    1    1    2    1    1    1    1    1    1    1    1    1    1    1    1 \n1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 \n   1    1    1    2    1    2    1    1    1    2    2    2    1    1    1    1 \n1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 \n   1    1    2    1    1    1    1    1    1    1    1    1    2    1    1    1 \n1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 \n   1    1    1    1    3    1    1    1    1    1    1    1    1    1    1    1 \n1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 \n   1    1    1    1    1    1    1    1    4    1    1    1    1    1    2    1 \n1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 \n   1    1    1    1    1    1    1    1    1    9    1    1    1    1    1    1 \n1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    2    1 \n1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 \n   1    2    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    1 \n1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 \n   1    1    1    1    1    1    2    1    1    1    1    1    1    1    1    1 \n1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 \n   1    1    1    1    1    1    1    1    1    1    5    1    1    1    1    1 \n1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 \n   1    1    1    1    1    2    1    1    1    1    2    1    1    1    1    3 \n1537 1538 1539 1540 1541 1542 1543 1544 1545 \n   1    1    1    1    1    1    2    1    1 \n\n\nTo know the number of locations that have more than one point event, run the code below:\n\nsum(multiplicity(childcare_ppp) &gt; 1)\n\n[1] 128\n\n\nThe code below plots out the locations of the duplicate point events:\n\n#tmap_mode('view')\n#tm_shape(childcare) + \n#  tm_dots(alpha = 0.3, size = 0.05)\n#tmap_mode('plot')\n\nTo tackle this problem, use jittering to slightly shift the duplicate points such that they no longer occur at the same point, to make them unique.\n\nchildcare_ppp &lt;- rjitter(childcare_ppp, retry = TRUE, nsimm = 1, drop = TRUE)\nany(duplicated(childcare_ppp))\n\n[1] FALSE\n\n\nWhen analysing spatial point patterns, owin can be used to define a geographic boundary to confine our analysis\n\nsg_owin &lt;- as.owin(sg_sf)\nplot(sg_owin)\n\n\n\n\n\n\n\n\nChecking the summary information:\n\nsummary(sg_owin)\n\nWindow: polygonal boundary\n50 separate polygons (1 hole)\n                 vertices         area relative.area\npolygon 1 (hole)       30     -7081.18     -9.76e-06\npolygon 2              55     82537.90      1.14e-04\npolygon 3              90    415092.00      5.72e-04\npolygon 4              49     16698.60      2.30e-05\npolygon 5              38     24249.20      3.34e-05\npolygon 6             976  23344700.00      3.22e-02\npolygon 7             721   1927950.00      2.66e-03\npolygon 8            1992   9992170.00      1.38e-02\npolygon 9             330   1118960.00      1.54e-03\npolygon 10            175    925904.00      1.28e-03\npolygon 11            115    928394.00      1.28e-03\npolygon 12             24      6352.39      8.76e-06\npolygon 13            190    202489.00      2.79e-04\npolygon 14             37     10170.50      1.40e-05\npolygon 15             25     16622.70      2.29e-05\npolygon 16             10      2145.07      2.96e-06\npolygon 17             66     16184.10      2.23e-05\npolygon 18           5195 636837000.00      8.78e-01\npolygon 19             76    312332.00      4.31e-04\npolygon 20            627  31891300.00      4.40e-02\npolygon 21             20     32842.00      4.53e-05\npolygon 22             42     55831.70      7.70e-05\npolygon 23             67   1313540.00      1.81e-03\npolygon 24            734   4690930.00      6.47e-03\npolygon 25             16      3194.60      4.40e-06\npolygon 26             15      4872.96      6.72e-06\npolygon 27             15      4464.20      6.15e-06\npolygon 28             14      5466.74      7.54e-06\npolygon 29             37      5261.94      7.25e-06\npolygon 30            111    662927.00      9.14e-04\npolygon 31             69     56313.40      7.76e-05\npolygon 32            143    145139.00      2.00e-04\npolygon 33            397   2488210.00      3.43e-03\npolygon 34             90    115991.00      1.60e-04\npolygon 35             98     62682.90      8.64e-05\npolygon 36            165    338736.00      4.67e-04\npolygon 37            130     94046.50      1.30e-04\npolygon 38             93    430642.00      5.94e-04\npolygon 39             16      2010.46      2.77e-06\npolygon 40            415   3253840.00      4.49e-03\npolygon 41             30     10838.20      1.49e-05\npolygon 42             53     34400.30      4.74e-05\npolygon 43             26      8347.58      1.15e-05\npolygon 44             74     58223.40      8.03e-05\npolygon 45            327   2169210.00      2.99e-03\npolygon 46            177    467446.00      6.44e-04\npolygon 47             46    699702.00      9.65e-04\npolygon 48              6     16841.00      2.32e-05\npolygon 49             13     70087.30      9.66e-05\npolygon 50              4      9459.63      1.30e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 725376000 square units\nFraction of frame area: 0.401\n\n\nThe code below extracts the childcare events in Singapore, and combines both the point and polygon features in one ppp object:\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\nsummary(childcareSG_ppp)\n\nMarked planar point pattern:  1545 points\nAverage intensity 2.129929e-06 points per square unit\n\nCoordinates are given to 11 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      0       0       0       0       0       0 \n\nWindow: polygonal boundary\n50 separate polygons (1 hole)\n                 vertices         area relative.area\npolygon 1 (hole)       30     -7081.18     -9.76e-06\npolygon 2              55     82537.90      1.14e-04\npolygon 3              90    415092.00      5.72e-04\npolygon 4              49     16698.60      2.30e-05\npolygon 5              38     24249.20      3.34e-05\npolygon 6             976  23344700.00      3.22e-02\npolygon 7             721   1927950.00      2.66e-03\npolygon 8            1992   9992170.00      1.38e-02\npolygon 9             330   1118960.00      1.54e-03\npolygon 10            175    925904.00      1.28e-03\npolygon 11            115    928394.00      1.28e-03\npolygon 12             24      6352.39      8.76e-06\npolygon 13            190    202489.00      2.79e-04\npolygon 14             37     10170.50      1.40e-05\npolygon 15             25     16622.70      2.29e-05\npolygon 16             10      2145.07      2.96e-06\npolygon 17             66     16184.10      2.23e-05\npolygon 18           5195 636837000.00      8.78e-01\npolygon 19             76    312332.00      4.31e-04\npolygon 20            627  31891300.00      4.40e-02\npolygon 21             20     32842.00      4.53e-05\npolygon 22             42     55831.70      7.70e-05\npolygon 23             67   1313540.00      1.81e-03\npolygon 24            734   4690930.00      6.47e-03\npolygon 25             16      3194.60      4.40e-06\npolygon 26             15      4872.96      6.72e-06\npolygon 27             15      4464.20      6.15e-06\npolygon 28             14      5466.74      7.54e-06\npolygon 29             37      5261.94      7.25e-06\npolygon 30            111    662927.00      9.14e-04\npolygon 31             69     56313.40      7.76e-05\npolygon 32            143    145139.00      2.00e-04\npolygon 33            397   2488210.00      3.43e-03\npolygon 34             90    115991.00      1.60e-04\npolygon 35             98     62682.90      8.64e-05\npolygon 36            165    338736.00      4.67e-04\npolygon 37            130     94046.50      1.30e-04\npolygon 38             93    430642.00      5.94e-04\npolygon 39             16      2010.46      2.77e-06\npolygon 40            415   3253840.00      4.49e-03\npolygon 41             30     10838.20      1.49e-05\npolygon 42             53     34400.30      4.74e-05\npolygon 43             26      8347.58      1.15e-05\npolygon 44             74     58223.40      8.03e-05\npolygon 45            327   2169210.00      2.99e-03\npolygon 46            177    467446.00      6.44e-04\npolygon 47             46    699702.00      9.65e-04\npolygon 48              6     16841.00      2.32e-05\npolygon 49             13     70087.30      9.66e-05\npolygon 50              4      9459.63      1.30e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 725376000 square units\nFraction of frame area: 0.401\n\n\n\nplot(childcareSG_ppp)\n\n\n\n\n\n\n\n\n\n\n\nThe density() function from spatstat computes a kernal density for a given set of point events. The diggle argument can be used to automatically select a bandwidth for computing the kernel density.\n\nkde_childcareSG_bw &lt;- density(childcareSG_ppp, sigma = bw.diggle, edge = TRUE, kernel = \"gaussian\")\nplot(kde_childcareSG_bw)\n\n\n\n\n\n\n\n\nThe density values of the plot above are too low, and make it hard to interpret.\n\nbw &lt;- bw.diggle(childcareSG_ppp)\nbw\n\n   sigma \n480.7708 \n\n\nRescale the KDE Layers to convert the unit of measurement from m to km.\n\nchildcareSG_ppp_km &lt;- rescale(childcareSG_ppp, 1000, \"km\")\nkde_childcareSG_bw &lt;- density(childcareSG_ppp_km, sigma = bw.diggle, edge = TRUE, kernel = \"gaussian\")\nplot(kde_childcareSG_bw)\n\n\n\n\n\n\n\n\nThe resultant plot is much more legible.\nMultiple bandwidth calculation methods are available from spatstat, some of which are covered below: Cronie and van Lieshout\n\nbw.CvL(childcareSG_ppp_km)\n\n   sigma \n4.221686 \n\n\n\nkde_childcareSG_bw_CvL &lt;- density(childcareSG_ppp_km, sigma =  bw.CvL, edge = TRUE, kernel = \"gaussian\")\n\nScott’s Rule\n\nbw.scott(childcareSG_ppp_km)\n\n sigma.x  sigma.y \n2.225026 1.450890 \n\n\n\nkde_childcareSG_bw_scott &lt;- density(childcareSG_ppp_km, sigma =  bw.scott, edge = TRUE, kernel = \"gaussian\")\n\nLikelihood Cross Validation\n\nbw.ppl(childcareSG_ppp_km)\n\n    sigma \n0.3283587 \n\n\n\nkde_childcareSG_bw_ppl &lt;- density(childcareSG_ppp_km, sigma =  bw.ppl, edge = TRUE, kernel = \"gaussian\")\n\nThe plot below compares the above 3 methods with diggle\n\npar(mfrow=c(2,2))\npar(mar = c(3,2,2,1))\nplot(kde_childcareSG_bw, main = \"bw.diggle\")\nplot(kde_childcareSG_bw_CvL, main = \"bw.CvL\")\nplot(kde_childcareSG_bw_scott, main = \"bw.scott\")\nplot(kde_childcareSG_bw_ppl, main = \"bw.ppl\")\n\n\n\n\n\n\n\n\nDifferent smoothing methods are also available.\n\npar(mfrow = c(2,2))\npar(mar = c(3,2,2,1))\nplot(density(childcareSG_ppp_km, sigma = bw.ppl, edge = TRUE, kernel = \"gaussian\"), main = \"Gaussian\")\nplot(density(childcareSG_ppp_km, sigma = bw.ppl, edge = TRUE, kernel = \"epanechnikov\"), main = \"Epanechnikov\")\n\nWarning in density.ppp(childcareSG_ppp_km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\nplot(density(childcareSG_ppp_km, sigma = bw.ppl, edge = TRUE, kernel = \"quartic\"), main = \"Quartic\")\n\nWarning in density.ppp(childcareSG_ppp_km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\nplot(density(childcareSG_ppp_km, sigma = bw.ppl, edge = TRUE, kernel = \"disc\"), main = \"Disc\")\n\nWarning in density.ppp(childcareSG_ppp_km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\n\n\n\n\n\n\n\n\nFixed Bandwidth In the code below, sigma is assigned a value of 0.6, whcih represents 0.6km.\n\nkde_childcareSG_600 &lt;- density(childcareSG_ppp_km, sigma = 0.6, edge = TRUE, kernel = \"gaussian\")\n\nA fixed bandwidth is sensitive to highly skewed distributions of spatial points, which can be alleviated by using an adaptive bandwidth.\n\nkde_childcareSG_adapt &lt;- adaptive.density(childcareSG_ppp_km, method = \"kernel\")\n\nComparing the two:\n\npar(mfrow = c(1,2))\npar(mar = c(3,2,2,1))\nplot(kde_childcareSG_600)\nplot(kde_childcareSG_adapt)\n\n\n\n\n\n\n\n\nThe conversion of a KDE output into a grid object can be done to make it compatible with mapping applications.\n\ngridded_kde_childcareSG_bw &lt;- as.SpatialGridDataFrame.im(kde_childcareSG_bw)\nspplot(gridded_kde_childcareSG_bw)\n\n\n\n\n\n\n\n\nThis gridded KDE object can be further converted into a raster layer.\n\nkde_childcareSG_bw_raster &lt;- raster(gridded_kde_childcareSG_bw)\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -9.648074e-15, 20.11521  (min, max)\n\n\nSet the CRS:\n\nprojection(kde_childcareSG_bw_raster) &lt;- CRS(\"+init=EPSG:3414\")\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +units=m +no_defs \nsource     : memory\nnames      : v \nvalues     : -9.648074e-15, 20.11521  (min, max)\n\n\nDisplay the KDE raster layer:\n\ntm_shape(kde_childcareSG_bw_raster) + \n  tm_raster(\"v\", palette=\"plasma\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\n\n\n\n\n\n\n\nTHe code below extracts the targeted planning areas:\n\npg &lt;- mpsz_sf %&gt;% filter(PLN_AREA_N == \"PUNGGOL\")\ntm &lt;- mpsz_sf %&gt;% filter(PLN_AREA_N == \"TAMPINES\")\nck &lt;- mpsz_sf %&gt;% filter(PLN_AREA_N == \"CHOA CHU KANG\")\njw &lt;- mpsz_sf %&gt;% filter(PLN_AREA_N == \"JURONG WEST\")\n\n\npar(mfrow=c(2,2))\npar(mar = c(3,2,2,1))\nplot(st_geometry(pg), main = \"Punggol\")\nplot(st_geometry(tm), main = \"Tampines\")\nplot(st_geometry(ck), main = \"Choa Chu Kang\")\nplot(st_geometry(jw), main = \"Jurong West\")\n\n\n\n\n\n\n\n\n\npar(mfrow=c(2,2))\npar(mar = c(3,2,2,1))\nplot(pg, main = \"Punggol\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\nplot(tm, main = \"Tampines\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\nplot(ck, main = \"Choa Chu Kang\")\n\nWarning: plotting the first 10 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\nplot(jw, main = \"Jurong West\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\nConvert these SpatialPolygon objects into owin objects:\n\npg_owin &lt;- as.owin(pg)\ntm_owin &lt;- as.owin(tm)\nck_owin &lt;- as.owin(ck)\njw_owin &lt;- as.owin(jw)\n\nExtract the childcare centre points within each of the study planning areas:\n\nchildcare_pg_ppp = childcare_ppp[pg_owin]\nchildcare_tm_ppp = childcare_ppp[tm_owin]\nchildcare_ck_ppp = childcare_ppp[ck_owin]\nchildcare_jw_ppp = childcare_ppp[jw_owin]\n\nRescale from m to km:\n\nchildcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, \"km\")\n\nPlot out the individual areas overlaid with their childcare centres:\n\npar(mfrow=c(2,2))\npar(mar = c(3,2,2,1))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\nplot(childcare_tm_ppp.km, main=\"Tampines\")\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main=\"Jurong West\")\n\n\n\n\n\n\n\n\nCompute the KDE, using diggle to derive the bandwidth:\n\npar(mfrow = c(2,2))\npar(mar = c(3,2,2,1))\nplot(density(childcare_pg_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tempines\")\nplot(density(childcare_ck_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Choa Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Jurong West\")\n\n\n\n\n\n\n\n\nCompute the KDE using a fixed bandwidth of 0.25km:\n\npar(mfrow=c(2,2))\npar(mar = c(3,2,2,1))\nplot(density(childcare_ck_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Chou Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")\nplot(density(childcare_pg_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tampines\")\n\n\n\n\n\n\n\n\n\n\n\nPerform the Clark-Evans test of aggregation:\n\nH0: Random distribution of childcare centres\nH1: Non-Random distribution of childcare centres\n\n\nclarkevans.test(childcareSG_ppp, correction = \"none\", clipregion = \"sg_owin\", alternative = c(\"clustered\"), nsim = 99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcareSG_ppp\nR = 0.56549, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n\nThe R value from the above result indicates clustering, and as p &lt; 0.05, H0 can be rejected.\nPerforming the same test on the target planning areas:\nTampines\n\nclarkevans.test(childcare_tm_ppp, correction = \"none\", clipregion = \"sg_owin\", alternative = c(\"clustered\"), nsim = 99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_tm_ppp\nR = 0.79285, p-value = 9.25e-05\nalternative hypothesis: clustered (R &lt; 1)\n\n\nThe R value from the above result indicates clustering, and as p &lt; 0.05, H0 can be rejected.\nChoa Chu Kang\n\nclarkevans.test(childcare_ck_ppp, correction = \"none\", clipregion = \"sg_owin\", alternative = c(\"clustered\"), nsim = 99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_ck_ppp\nR = 0.93286, p-value = 0.1579\nalternative hypothesis: clustered (R &lt; 1)\n\n\nAs p &gt; 0.05, H0 cannot be rejected.\nPunggol\n\nclarkevans.test(childcare_pg_ppp, correction = \"none\", clipregion = \"sg_owin\", alternative = c(\"clustered\"), nsim = 99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_pg_ppp\nR = 0.88794, p-value = 0.04703\nalternative hypothesis: clustered (R &lt; 1)\n\n\nAs p &lt; 0.05, H0 can be rejected.\nJurong West\n\nclarkevans.test(childcare_jw_ppp, correction = \"none\", clipregion = \"sg_owin\", alternative = c(\"clustered\"), nsim = 99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_jw_ppp\nR = 0.90649, p-value = 0.04665\nalternative hypothesis: clustered (R &lt; 1)\n\n\nAs p &lt; 0.05, H0 can be rejected.\n\n\n\nThe G function measures the distribution of the distances from an arbitrary even to its nearest event. G function on the Choa Chu Kang area:\n\nG_CK = Gest(childcare_ck_ppp, correction = \"border\")\nplot(G_CK, xlim=c(0,500))\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Choa Chu Kang\nH1: Non-Random distribution of childcare centres in Choa Chu Kang\n\nReject H0 if p &lt; 0.001.\n\nG_CK.csr &lt;- envelope(childcare_ck_ppp, Gest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(G_CK.csr)\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Tampines\nH1: Non-Random distribution of childcare centres in Tampines\n\nReject H0 if p &lt; 0.001.\n\nG_tm.csr &lt;- envelope(childcare_tm_ppp, Gest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(G_tm.csr)\n\n\n\n\n\n\n\n\nThe F function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape.\nF function on the Choa Chu Kang area:\n\nF_CK = Fest(childcare_ck_ppp)\nplot(F_CK)\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Choa Chu Kang\nH1: Non-Random distribution of childcare centres in Choa Chu Kang\n\nReject H0 if p &lt; 0.001.\n\nF_CK.csr &lt;- envelope(childcare_ck_ppp, Fest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(F_CK.csr)\n\n\n\n\n\n\n\n\nF function on the Tampines area:\n\nF_tm = Fest(childcare_tm_ppp, correction = \"best\")\nplot(F_tm)\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Tampines\nH1: Non-Random distribution of childcare centres in Tampines\n\nReject H0 if p &lt; 0.001.\n\nF_tm.csr &lt;- envelope(childcare_tm_ppp, Fest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(F_tm.csr)\n\n\n\n\n\n\n\n\nThe K function measures the number of events found up to a given distance of any particular event.\nK function on the Choa Chu Kang area:\n\nK_ck = Kest(childcare_ck_ppp, correction = \"Ripley\")\nplot(K_ck, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Choa Chu Kang\nH1: Non-Random distribution of childcare centres in Choa Chu Kang\n\nReject H0 if p &lt; 0.001.\n\nK_ck.csr &lt;- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(K_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")\n\n\n\n\n\n\n\n\nK function on the Tampines area:\n\nK_tm = Kest(childcare_tm_ppp, correction = \"Ripley\")\nplot(K_tm, . -r ~ r, \n     ylab= \"K(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Tampines\nH1: Non-Random distribution of childcare centres in Tampines\n\nReject H0 if p &lt; 0.001.\n\nK_tm.csr &lt;- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(K_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"K(d)-r\", xlim=c(0,500))\n\n\n\n\n\n\n\n\nThe L function is a transformation of the K function, designed to help in identifying clustering or regularity in spatial point patterns.\nL function on the Choa Chu Kang area:\n\nL_ck = Lest(childcare_ck_ppp, correction = \"Ripley\")\nplot(L_ck, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Choa Chu Kang\nH1: Non-Random distribution of childcare centres in Choa Chu Kang\n\nReject H0 if p &lt; 0.001.\n\nL_ck.csr &lt;- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(L_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n\n\n\n\n\nL function on the Tampines area:\n\nL_tm = Lest(childcare_tm_ppp, correction = \"Ripley\")\nplot(L_tm, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Tampines\nH1: Non-Random distribution of childcare centres in Tampines\n\nReject H0 if p &lt; 0.001.\n\nL_tm.csr &lt;- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(L_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"L(d)-r\", xlim=c(0,500))"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03.html#installlaunch-r-packages",
    "href": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03.html#installlaunch-r-packages",
    "title": "Hands-On_Ex03",
    "section": "",
    "text": "This exercise uses the R packages tmap, sf, tidyverse, raster, and spatstat.\n\ninstall.packages(\"maptools\", repos = \"https://packagemanager.posit.co/cran/2023-10-13\")\n\nInstalling package into 'C:/Users/Kai/AppData/Local/R/win-library/4.4'\n(as 'lib' is unspecified)\n\n\npackage 'maptools' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Kai\\AppData\\Local\\Temp\\RtmpcTyqsF\\downloaded_packages\n\n\n\npacman::p_load(tmap, sf, tidyverse, raster, spatstat, maptools, sp)\n\nInstalling package into 'C:/Users/Kai/AppData/Local/R/win-library/4.4'\n(as 'lib' is unspecified)\n\n\nalso installing the dependencies 'deldir', 'polyclip', 'spatstat.sparse', 'goftest', 'tensor', 'spatstat.data', 'spatstat.univar', 'spatstat.geom', 'spatstat.random', 'spatstat.explore', 'spatstat.model', 'spatstat.linnet', 'spatstat.utils'\n\n\nWarning: unable to access index for repository http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.4:\n  cannot open URL 'http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.4/PACKAGES'\n\n\npackage 'deldir' successfully unpacked and MD5 sums checked\npackage 'polyclip' successfully unpacked and MD5 sums checked\npackage 'spatstat.sparse' successfully unpacked and MD5 sums checked\npackage 'goftest' successfully unpacked and MD5 sums checked\npackage 'tensor' successfully unpacked and MD5 sums checked\npackage 'spatstat.data' successfully unpacked and MD5 sums checked\npackage 'spatstat.univar' successfully unpacked and MD5 sums checked\npackage 'spatstat.geom' successfully unpacked and MD5 sums checked\npackage 'spatstat.random' successfully unpacked and MD5 sums checked\npackage 'spatstat.explore' successfully unpacked and MD5 sums checked\npackage 'spatstat.model' successfully unpacked and MD5 sums checked\npackage 'spatstat.linnet' successfully unpacked and MD5 sums checked\npackage 'spatstat.utils' successfully unpacked and MD5 sums checked\npackage 'spatstat' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Kai\\AppData\\Local\\Temp\\RtmpcTyqsF\\downloaded_packages\n\n\n\nspatstat installed"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03.html#download-and-import-data",
    "href": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03.html#download-and-import-data",
    "title": "Hands-On_Ex03",
    "section": "",
    "text": "Download the following:\n\nChildcare Services (GeoJSON)\nMaster Plan 2014 Subzone Boundary Data\nCostalOutline from SLA\n\nUsing st_read(), import the following geospatial data into R:\n\nchildcare_sf&lt;- st_read(\"data/child-care-services-geojson.geojson\") %&gt;% st_transform( crs = 3414) \n\nReading layer `child-care-services-geojson' from data source \n  `C:\\endurrus\\IS415-GAA\\Hands-On_Ex\\Hands-On_Ex03\\data\\child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nmpsz_sf &lt;- st_read(dsn = \"data\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\endurrus\\IS415-GAA\\Hands-On_Ex\\Hands-On_Ex03\\data' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nsg_sf &lt;- st_read(dsn = \"data\", layer = \"CostalOutline\")\n\nReading layer `CostalOutline' from data source \n  `C:\\endurrus\\IS415-GAA\\Hands-On_Ex\\Hands-On_Ex03\\data' using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\n\nNext, we need to project the dataframes in the same projection system.\n\nmpsz_sf &lt;- st_transform(mpsz_sf, crs = 3414)\nsg_sf &lt;- st_transform(sg_sf, crs = 3414)\n# childcare_sf is already in EPSG3414\n\nPlot the datasets to observe the spatial patterns.\n\ntm_shape(sg_sf) + tm_polygons() + tm_shape(mpsz_sf) + tm_polygons() + tm_shape(childcare_sf) + tm_dots()\n\n\n\n\n\n\n\n\nCreate an alternative interactive pin map using the code below:\n\n#tmap_mode('view')\n#tm_shape(childcare_sf)+\n  #tm_dots()\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\n\nGeospatial Data Wrangling\nConvert sf dataframes to sp’s Spatial* class\nThe code below uses as_Spatial() from the sf package to convert the three geospatial data from a simple dataframe to sp’s Spatial* class.\n\nchildcare &lt;- as_Spatial(childcare_sf)\nmpsz &lt;- as_Spatial(mpsz_sf)\nsg &lt;- as_Spatial(sg_sf)\n\nCheck the conversion:\n\nchildcare\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 2\nnames       :    Nameescription \nmin values  :   kml_1, &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;018989&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;1, MARINA BOULEVARD, #B1 - 01, ONE MARINA BOULEVARD, SINGAPORE 018989&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;THE LITTLE SKOOL-HOUSE INTERNATIONAL PTE. LTD.&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;08F73931F4A691F4&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20200826094036&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt; \nmax values  : kml_999,                  &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;829646&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;200, PONGGOL SEVENTEENTH AVENUE, SINGAPORE 829646&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;Child Care Services&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;RAFFLES KIDZ @ PUNGGOL PTE LTD&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;379D017BF244B0FA&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20200826094036&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt; \n\n\n\nmpsz\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 323 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 15\nnames       : OBJECTID, SUBZONE_NO, SUBZONE_N, SUBZONE_C, CA_IND, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C,          INC_CRC, FMEL_UPD_D,     X_ADDR,     Y_ADDR,    SHAPE_Leng,    SHAPE_Area \nmin values  :        1,          1, ADMIRALTY,    AMSZ01,      N, ANG MO KIO,         AM, CENTRAL REGION,       CR, 00F5E30B5C9B7AD8,      16409,  5092.8949,  19579.069, 871.554887798, 39437.9352703 \nmax values  :      323,         17,    YUNNAN,    YSSZ09,      Y,     YISHUN,         YS,    WEST REGION,       WR, FFCCF172717C2EAF,      16409, 50424.7923, 49552.7904, 68083.9364708,  69748298.792 \n\n\n\nsg\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 4\nnames       : GDO_GID, MSLINK, MAPID,              COSTAL_NAM \nmin values  :       1,      1,     0,             ISLAND LINK \nmax values  :      60,     67,     0, SINGAPORE - MAIN ISLAND \n\n\nConvert Spatial* into generic sp format\n\nchildcare_sp &lt;- as(childcare, \"SpatialPoints\")\nsg_sp &lt;- as(sg, \"SpatialPolygons\")\n\nDisplaying the sp objects:\n\nchildcare_sp\n\nclass       : SpatialPoints \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nsg_sp\n\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\nConvert sp format into spatstat’s ppp format\n\n#win &lt;- as.owin(childcare_sp)\nchildcare_ppp1 &lt;- as(childcare_sp, \"ppp\")\nchildcare_ppp1\n\nPlanar point pattern: 1545 points\nwindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n\n#cant get this to work, look later\n\nalternatively use the below to convert from sf into ppp format\n\nchildcare_ppp &lt;- as.ppp(st_coordinates(childcare_sf), st_bbox(childcare_sf))\n\nWarning: data contain duplicated points\n\n\nLooking at the data plot and statistics summary of the ppp object, we can see that both methods result in identical results.\n\nplot(childcare_ppp)\n\n\n\n\n\n\n\n\n\nsummary(childcare_ppp)\n\nMarked planar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 11 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      0       0       0       0       0       0 \n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units\n\n\n\nplot(childcare_ppp1)\n\n\n\n\n\n\n\n\n\nsummary(childcare_ppp1)\n\nPlanar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 11 decimal places\n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units\n\n\nNotice that a warning about duplicates occurs. In spatial point patterns analysis, a significant issue is the presence of duplicates. The statistical methodology used for spatial points patterns processes is based largely on the assumption that processes are simple, that the points cannot be coincident. balls test\nThe code below can check the duplication in ppp:\n\nany(duplicated(childcare_ppp))\n\n[1] TRUE\n\n\nTo count the number of coincidence points, the multiplicity() function can be used:\n\nmultiplicity(childcare_ppp)\n\n   1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16 \n   1    1    1    3    1    1    1    1    2    1    1    1    1    1    1    1 \n  17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32 \n   1    1    1    1    1    1    1    1    1    1    9    1    1    1    1    1 \n  33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n  49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64 \n   1    1    1    1    1    1    2    1    1    3    1    1    1    1    1    1 \n  65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80 \n   1    1    1    1    1    2    1    1    1    1    1    2    1    1    1    1 \n  81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96 \n   1    1    1    3    1    1    1    1    1    1    1    1    1    1    1    1 \n  97   98   99  100  101  102  103  104  105  106  107  108  109  110  111  112 \n   1    1    1    1    1    1    1    1    2    1    1    1    1    1    1    1 \n 113  114  115  116  117  118  119  120  121  122  123  124  125  126  127  128 \n   1    1    1    1    1    1    2    1    1    1    3    1    1    1    2    1 \n 129  130  131  132  133  134  135  136  137  138  139  140  141  142  143  144 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    3    2 \n 145  146  147  148  149  150  151  152  153  154  155  156  157  158  159  160 \n   1    2    1    1    1    2    2    3    1    5    1    5    1    1    1    2 \n 161  162  163  164  165  166  167  168  169  170  171  172  173  174  175  176 \n   1    1    1    1    2    1    1    1    1    1    1    2    1    1    1    1 \n 177  178  179  180  181  182  183  184  185  186  187  188  189  190  191  192 \n   1    4    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 193  194  195  196  197  198  199  200  201  202  203  204  205  206  207  208 \n   1    1    1    1    1    2    2    1    1    1    1    2    1    4    1    1 \n 209  210  211  212  213  214  215  216  217  218  219  220  221  222  223  224 \n   2    1    1    1    1    1    1    1    1    1    1    1    2    1    1    1 \n 225  226  227  228  229  230  231  232  233  234  235  236  237  238  239  240 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 241  242  243  244  245  246  247  248  249  250  251  252  253  254  255  256 \n   1    1    1    1    2    1    1    1    1    1    1    1    1    1    1    1 \n 257  258  259  260  261  262  263  264  265  266  267  268  269  270  271  272 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    3 \n 273  274  275  276  277  278  279  280  281  282  283  284  285  286  287  288 \n   1    1    1    1    1    1    3    1    1    1    1    1    1    1    1    1 \n 289  290  291  292  293  294  295  296  297  298  299  300  301  302  303  304 \n   1    1    1    1    1    1    1    9    1    1    2    1    1    1    1    1 \n 305  306  307  308  309  310  311  312  313  314  315  316  317  318  319  320 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 321  322  323  324  325  326  327  328  329  330  331  332  333  334  335  336 \n   1    1    1    5    1    1    1    1    1    2    1    1    2    2    1    1 \n 337  338  339  340  341  342  343  344  345  346  347  348  349  350  351  352 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    2    2    1 \n 353  354  355  356  357  358  359  360  361  362  363  364  365  366  367  368 \n   1    1    1    1    9    1    1    1    1    1    1    1    1    1    1    1 \n 369  370  371  372  373  374  375  376  377  378  379  380  381  382  383  384 \n   1    3    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 385  386  387  388  389  390  391  392  393  394  395  396  397  398  399  400 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 401  402  403  404  405  406  407  408  409  410  411  412  413  414  415  416 \n   1    1    2    1    1    1    1    1    1    1    2    1    1    1    1    1 \n 417  418  419  420  421  422  423  424  425  426  427  428  429  430  431  432 \n   1    1    1    1    1    1    1    2    1    1    2    1    1    1    1    1 \n 433  434  435  436  437  438  439  440  441  442  443  444  445  446  447  448 \n   1    1    1    1    2    1    1    1    1    1    1    1    1    1    1    1 \n 449  450  451  452  453  454  455  456  457  458  459  460  461  462  463  464 \n   1    1    9    9    1    1    1    1    1    1    1    1    1    1    2    1 \n 465  466  467  468  469  470  471  472  473  474  475  476  477  478  479  480 \n   2    1    1    1    1    1    1    1    1    1    1    1    2    2    1    1 \n 481  482  483  484  485  486  487  488  489  490  491  492  493  494  495  496 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 497  498  499  500  501  502  503  504  505  506  507  508  509  510  511  512 \n   1    1    1    1    1    1    2    1    1    1    1    1    1    1    1    2 \n 513  514  515  516  517  518  519  520  521  522  523  524  525  526  527  528 \n   1    1    1    1    1    1    1    1    1    1    1    2    1    1    3    1 \n 529  530  531  532  533  534  535  536  537  538  539  540  541  542  543  544 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 545  546  547  548  549  550  551  552  553  554  555  556  557  558  559  560 \n   1    1    1    1    1    1    1    1    1    3    1    1    1    1    1    1 \n 561  562  563  564  565  566  567  568  569  570  571  572  573  574  575  576 \n   2    2    2    1    1    1    1    2    1    1    2    1    1    1    2    1 \n 577  578  579  580  581  582  583  584  585  586  587  588  589  590  591  592 \n   1    2    1    1    1    1    1    9    1    4    1    2    1    1    1    1 \n 593  594  595  596  597  598  599  600  601  602  603  604  605  606  607  608 \n   2    1    1    1    1    1    1    1    2    1    2    1    1    1    1    1 \n 609  610  611  612  613  614  615  616  617  618  619  620  621  622  623  624 \n   1    1    1    1    1    1    1    1    1    2    1    2    1    1    1    1 \n 625  626  627  628  629  630  631  632  633  634  635  636  637  638  639  640 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 641  642  643  644  645  646  647  648  649  650  651  652  653  654  655  656 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    4 \n 657  658  659  660  661  662  663  664  665  666  667  668  669  670  671  672 \n   1    1    1    1    1    1    1    3    1    1    1    1    1    1    1    1 \n 673  674  675  676  677  678  679  680  681  682  683  684  685  686  687  688 \n   1    1    1    1    1    4    1    1    1    1    1    4    1    1    1    1 \n 689  690  691  692  693  694  695  696  697  698  699  700  701  702  703  704 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 705  706  707  708  709  710  711  712  713  714  715  716  717  718  719  720 \n   1    1    2    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 721  722  723  724  725  726  727  728  729  730  731  732  733  734  735  736 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 737  738  739  740  741  742  743  744  745  746  747  748  749  750  751  752 \n   1    2    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 753  754  755  756  757  758  759  760  761  762  763  764  765  766  767  768 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    1    1 \n 769  770  771  772  773  774  775  776  777  778  779  780  781  782  783  784 \n   1    1    1    1    1    1    1    1    1    4    1    1    1    1    1    1 \n 785  786  787  788  789  790  791  792  793  794  795  796  797  798  799  800 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 801  802  803  804  805  806  807  808  809  810  811  812  813  814  815  816 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 817  818  819  820  821  822  823  824  825  826  827  828  829  830  831  832 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 833  834  835  836  837  838  839  840  841  842  843  844  845  846  847  848 \n   1    1    1    1    1    1    1    2    1    1    1    1    1    1    1    1 \n 849  850  851  852  853  854  855  856  857  858  859  860  861  862  863  864 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 865  866  867  868  869  870  871  872  873  874  875  876  877  878  879  880 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n 881  882  883  884  885  886  887  888  889  890  891  892  893  894  895  896 \n   3    1    1    1    2    1    1    1    3    1    1    3    1    1    1    1 \n 897  898  899  900  901  902  903  904  905  906  907  908  909  910  911  912 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 913  914  915  916  917  918  919  920  921  922  923  924  925  926  927  928 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 929  930  931  932  933  934  935  936  937  938  939  940  941  942  943  944 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 945  946  947  948  949  950  951  952  953  954  955  956  957  958  959  960 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n 961  962  963  964  965  966  967  968  969  970  971  972  973  974  975  976 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 977  978  979  980  981  982  983  984  985  986  987  988  989  990  991  992 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 993  994  995  996  997  998  999 1000 1001 1002 1003 1004 1005 1006 1007 1008 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 \n   1    1    1    1    1    1    1    1    1    2    2    1    1    1    1    1 \n1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    1    1 \n1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 \n   1    1    1    1    1    1    1    1    2    2    1    1    1    5    1    1 \n1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 \n   1    1    1    1    1    1    1    1    1    2    1    1    1    1    1    1 \n1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    1 \n1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 \n   1    9    1    2    2    1    1    1    2    1    1    1    1    1    1    1 \n1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 \n   1    1    1    1    2    1    1    1    3    1    1    1    1    1    1    1 \n1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 \n   9    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 \n   1    1    1    2    1    1    1    1    1    1    1    1    1    1    1    1 \n1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 \n   1    1    1    2    1    2    1    1    1    2    2    2    1    1    1    1 \n1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 \n   1    1    2    1    1    1    1    1    1    1    1    1    2    1    1    1 \n1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 \n   1    1    1    1    3    1    1    1    1    1    1    1    1    1    1    1 \n1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 \n   1    1    1    1    1    1    1    1    4    1    1    1    1    1    2    1 \n1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 \n   1    1    1    1    1    1    1    1    1    9    1    1    1    1    1    1 \n1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    2    1 \n1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 \n   1    2    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    1 \n1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 \n   1    1    1    1    1    1    2    1    1    1    1    1    1    1    1    1 \n1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 \n   1    1    1    1    1    1    1    1    1    1    5    1    1    1    1    1 \n1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 \n   1    1    1    1    1    2    1    1    1    1    2    1    1    1    1    3 \n1537 1538 1539 1540 1541 1542 1543 1544 1545 \n   1    1    1    1    1    1    2    1    1 \n\n\nTo know the number of locations that have more than one point event, run the code below:\n\nsum(multiplicity(childcare_ppp) &gt; 1)\n\n[1] 128\n\n\nThe code below plots out the locations of the duplicate point events:\n\n#tmap_mode('view')\n#tm_shape(childcare) + \n#  tm_dots(alpha = 0.3, size = 0.05)\n#tmap_mode('plot')\n\nTo tackle this problem, use jittering to slightly shift the duplicate points such that they no longer occur at the same point, to make them unique.\n\nchildcare_ppp &lt;- rjitter(childcare_ppp, retry = TRUE, nsimm = 1, drop = TRUE)\nany(duplicated(childcare_ppp))\n\n[1] FALSE\n\n\nWhen analysing spatial point patterns, owin can be used to define a geographic boundary to confine our analysis\n\nsg_owin &lt;- as.owin(sg_sf)\nplot(sg_owin)\n\n\n\n\n\n\n\n\nChecking the summary information:\n\nsummary(sg_owin)\n\nWindow: polygonal boundary\n50 separate polygons (1 hole)\n                 vertices         area relative.area\npolygon 1 (hole)       30     -7081.18     -9.76e-06\npolygon 2              55     82537.90      1.14e-04\npolygon 3              90    415092.00      5.72e-04\npolygon 4              49     16698.60      2.30e-05\npolygon 5              38     24249.20      3.34e-05\npolygon 6             976  23344700.00      3.22e-02\npolygon 7             721   1927950.00      2.66e-03\npolygon 8            1992   9992170.00      1.38e-02\npolygon 9             330   1118960.00      1.54e-03\npolygon 10            175    925904.00      1.28e-03\npolygon 11            115    928394.00      1.28e-03\npolygon 12             24      6352.39      8.76e-06\npolygon 13            190    202489.00      2.79e-04\npolygon 14             37     10170.50      1.40e-05\npolygon 15             25     16622.70      2.29e-05\npolygon 16             10      2145.07      2.96e-06\npolygon 17             66     16184.10      2.23e-05\npolygon 18           5195 636837000.00      8.78e-01\npolygon 19             76    312332.00      4.31e-04\npolygon 20            627  31891300.00      4.40e-02\npolygon 21             20     32842.00      4.53e-05\npolygon 22             42     55831.70      7.70e-05\npolygon 23             67   1313540.00      1.81e-03\npolygon 24            734   4690930.00      6.47e-03\npolygon 25             16      3194.60      4.40e-06\npolygon 26             15      4872.96      6.72e-06\npolygon 27             15      4464.20      6.15e-06\npolygon 28             14      5466.74      7.54e-06\npolygon 29             37      5261.94      7.25e-06\npolygon 30            111    662927.00      9.14e-04\npolygon 31             69     56313.40      7.76e-05\npolygon 32            143    145139.00      2.00e-04\npolygon 33            397   2488210.00      3.43e-03\npolygon 34             90    115991.00      1.60e-04\npolygon 35             98     62682.90      8.64e-05\npolygon 36            165    338736.00      4.67e-04\npolygon 37            130     94046.50      1.30e-04\npolygon 38             93    430642.00      5.94e-04\npolygon 39             16      2010.46      2.77e-06\npolygon 40            415   3253840.00      4.49e-03\npolygon 41             30     10838.20      1.49e-05\npolygon 42             53     34400.30      4.74e-05\npolygon 43             26      8347.58      1.15e-05\npolygon 44             74     58223.40      8.03e-05\npolygon 45            327   2169210.00      2.99e-03\npolygon 46            177    467446.00      6.44e-04\npolygon 47             46    699702.00      9.65e-04\npolygon 48              6     16841.00      2.32e-05\npolygon 49             13     70087.30      9.66e-05\npolygon 50              4      9459.63      1.30e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 725376000 square units\nFraction of frame area: 0.401\n\n\nThe code below extracts the childcare events in Singapore, and combines both the point and polygon features in one ppp object:\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\nsummary(childcareSG_ppp)\n\nMarked planar point pattern:  1545 points\nAverage intensity 2.129929e-06 points per square unit\n\nCoordinates are given to 11 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      0       0       0       0       0       0 \n\nWindow: polygonal boundary\n50 separate polygons (1 hole)\n                 vertices         area relative.area\npolygon 1 (hole)       30     -7081.18     -9.76e-06\npolygon 2              55     82537.90      1.14e-04\npolygon 3              90    415092.00      5.72e-04\npolygon 4              49     16698.60      2.30e-05\npolygon 5              38     24249.20      3.34e-05\npolygon 6             976  23344700.00      3.22e-02\npolygon 7             721   1927950.00      2.66e-03\npolygon 8            1992   9992170.00      1.38e-02\npolygon 9             330   1118960.00      1.54e-03\npolygon 10            175    925904.00      1.28e-03\npolygon 11            115    928394.00      1.28e-03\npolygon 12             24      6352.39      8.76e-06\npolygon 13            190    202489.00      2.79e-04\npolygon 14             37     10170.50      1.40e-05\npolygon 15             25     16622.70      2.29e-05\npolygon 16             10      2145.07      2.96e-06\npolygon 17             66     16184.10      2.23e-05\npolygon 18           5195 636837000.00      8.78e-01\npolygon 19             76    312332.00      4.31e-04\npolygon 20            627  31891300.00      4.40e-02\npolygon 21             20     32842.00      4.53e-05\npolygon 22             42     55831.70      7.70e-05\npolygon 23             67   1313540.00      1.81e-03\npolygon 24            734   4690930.00      6.47e-03\npolygon 25             16      3194.60      4.40e-06\npolygon 26             15      4872.96      6.72e-06\npolygon 27             15      4464.20      6.15e-06\npolygon 28             14      5466.74      7.54e-06\npolygon 29             37      5261.94      7.25e-06\npolygon 30            111    662927.00      9.14e-04\npolygon 31             69     56313.40      7.76e-05\npolygon 32            143    145139.00      2.00e-04\npolygon 33            397   2488210.00      3.43e-03\npolygon 34             90    115991.00      1.60e-04\npolygon 35             98     62682.90      8.64e-05\npolygon 36            165    338736.00      4.67e-04\npolygon 37            130     94046.50      1.30e-04\npolygon 38             93    430642.00      5.94e-04\npolygon 39             16      2010.46      2.77e-06\npolygon 40            415   3253840.00      4.49e-03\npolygon 41             30     10838.20      1.49e-05\npolygon 42             53     34400.30      4.74e-05\npolygon 43             26      8347.58      1.15e-05\npolygon 44             74     58223.40      8.03e-05\npolygon 45            327   2169210.00      2.99e-03\npolygon 46            177    467446.00      6.44e-04\npolygon 47             46    699702.00      9.65e-04\npolygon 48              6     16841.00      2.32e-05\npolygon 49             13     70087.30      9.66e-05\npolygon 50              4      9459.63      1.30e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 725376000 square units\nFraction of frame area: 0.401\n\n\n\nplot(childcareSG_ppp)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03.html#st-order-spatial-point-pattern-analysis",
    "href": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03.html#st-order-spatial-point-pattern-analysis",
    "title": "Hands-On_Ex03",
    "section": "",
    "text": "The density() function from spatstat computes a kernal density for a given set of point events. The diggle argument can be used to automatically select a bandwidth for computing the kernel density.\n\nkde_childcareSG_bw &lt;- density(childcareSG_ppp, sigma = bw.diggle, edge = TRUE, kernel = \"gaussian\")\nplot(kde_childcareSG_bw)\n\n\n\n\n\n\n\n\nThe density values of the plot above are too low, and make it hard to interpret.\n\nbw &lt;- bw.diggle(childcareSG_ppp)\nbw\n\n   sigma \n480.7708 \n\n\nRescale the KDE Layers to convert the unit of measurement from m to km.\n\nchildcareSG_ppp_km &lt;- rescale(childcareSG_ppp, 1000, \"km\")\nkde_childcareSG_bw &lt;- density(childcareSG_ppp_km, sigma = bw.diggle, edge = TRUE, kernel = \"gaussian\")\nplot(kde_childcareSG_bw)\n\n\n\n\n\n\n\n\nThe resultant plot is much more legible.\nMultiple bandwidth calculation methods are available from spatstat, some of which are covered below: Cronie and van Lieshout\n\nbw.CvL(childcareSG_ppp_km)\n\n   sigma \n4.221686 \n\n\n\nkde_childcareSG_bw_CvL &lt;- density(childcareSG_ppp_km, sigma =  bw.CvL, edge = TRUE, kernel = \"gaussian\")\n\nScott’s Rule\n\nbw.scott(childcareSG_ppp_km)\n\n sigma.x  sigma.y \n2.225026 1.450890 \n\n\n\nkde_childcareSG_bw_scott &lt;- density(childcareSG_ppp_km, sigma =  bw.scott, edge = TRUE, kernel = \"gaussian\")\n\nLikelihood Cross Validation\n\nbw.ppl(childcareSG_ppp_km)\n\n    sigma \n0.3283587 \n\n\n\nkde_childcareSG_bw_ppl &lt;- density(childcareSG_ppp_km, sigma =  bw.ppl, edge = TRUE, kernel = \"gaussian\")\n\nThe plot below compares the above 3 methods with diggle\n\npar(mfrow=c(2,2))\npar(mar = c(3,2,2,1))\nplot(kde_childcareSG_bw, main = \"bw.diggle\")\nplot(kde_childcareSG_bw_CvL, main = \"bw.CvL\")\nplot(kde_childcareSG_bw_scott, main = \"bw.scott\")\nplot(kde_childcareSG_bw_ppl, main = \"bw.ppl\")\n\n\n\n\n\n\n\n\nDifferent smoothing methods are also available.\n\npar(mfrow = c(2,2))\npar(mar = c(3,2,2,1))\nplot(density(childcareSG_ppp_km, sigma = bw.ppl, edge = TRUE, kernel = \"gaussian\"), main = \"Gaussian\")\nplot(density(childcareSG_ppp_km, sigma = bw.ppl, edge = TRUE, kernel = \"epanechnikov\"), main = \"Epanechnikov\")\n\nWarning in density.ppp(childcareSG_ppp_km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\nplot(density(childcareSG_ppp_km, sigma = bw.ppl, edge = TRUE, kernel = \"quartic\"), main = \"Quartic\")\n\nWarning in density.ppp(childcareSG_ppp_km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\nplot(density(childcareSG_ppp_km, sigma = bw.ppl, edge = TRUE, kernel = \"disc\"), main = \"Disc\")\n\nWarning in density.ppp(childcareSG_ppp_km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\n\n\n\n\n\n\n\n\nFixed Bandwidth In the code below, sigma is assigned a value of 0.6, whcih represents 0.6km.\n\nkde_childcareSG_600 &lt;- density(childcareSG_ppp_km, sigma = 0.6, edge = TRUE, kernel = \"gaussian\")\n\nA fixed bandwidth is sensitive to highly skewed distributions of spatial points, which can be alleviated by using an adaptive bandwidth.\n\nkde_childcareSG_adapt &lt;- adaptive.density(childcareSG_ppp_km, method = \"kernel\")\n\nComparing the two:\n\npar(mfrow = c(1,2))\npar(mar = c(3,2,2,1))\nplot(kde_childcareSG_600)\nplot(kde_childcareSG_adapt)\n\n\n\n\n\n\n\n\nThe conversion of a KDE output into a grid object can be done to make it compatible with mapping applications.\n\ngridded_kde_childcareSG_bw &lt;- as.SpatialGridDataFrame.im(kde_childcareSG_bw)\nspplot(gridded_kde_childcareSG_bw)\n\n\n\n\n\n\n\n\nThis gridded KDE object can be further converted into a raster layer.\n\nkde_childcareSG_bw_raster &lt;- raster(gridded_kde_childcareSG_bw)\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -9.648074e-15, 20.11521  (min, max)\n\n\nSet the CRS:\n\nprojection(kde_childcareSG_bw_raster) &lt;- CRS(\"+init=EPSG:3414\")\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +units=m +no_defs \nsource     : memory\nnames      : v \nvalues     : -9.648074e-15, 20.11521  (min, max)\n\n\nDisplay the KDE raster layer:\n\ntm_shape(kde_childcareSG_bw_raster) + \n  tm_raster(\"v\", palette=\"plasma\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\n\n\n\n\n\n\n\nTHe code below extracts the targeted planning areas:\n\npg &lt;- mpsz_sf %&gt;% filter(PLN_AREA_N == \"PUNGGOL\")\ntm &lt;- mpsz_sf %&gt;% filter(PLN_AREA_N == \"TAMPINES\")\nck &lt;- mpsz_sf %&gt;% filter(PLN_AREA_N == \"CHOA CHU KANG\")\njw &lt;- mpsz_sf %&gt;% filter(PLN_AREA_N == \"JURONG WEST\")\n\n\npar(mfrow=c(2,2))\npar(mar = c(3,2,2,1))\nplot(st_geometry(pg), main = \"Punggol\")\nplot(st_geometry(tm), main = \"Tampines\")\nplot(st_geometry(ck), main = \"Choa Chu Kang\")\nplot(st_geometry(jw), main = \"Jurong West\")\n\n\n\n\n\n\n\n\n\npar(mfrow=c(2,2))\npar(mar = c(3,2,2,1))\nplot(pg, main = \"Punggol\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\nplot(tm, main = \"Tampines\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\nplot(ck, main = \"Choa Chu Kang\")\n\nWarning: plotting the first 10 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\nplot(jw, main = \"Jurong West\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\nConvert these SpatialPolygon objects into owin objects:\n\npg_owin &lt;- as.owin(pg)\ntm_owin &lt;- as.owin(tm)\nck_owin &lt;- as.owin(ck)\njw_owin &lt;- as.owin(jw)\n\nExtract the childcare centre points within each of the study planning areas:\n\nchildcare_pg_ppp = childcare_ppp[pg_owin]\nchildcare_tm_ppp = childcare_ppp[tm_owin]\nchildcare_ck_ppp = childcare_ppp[ck_owin]\nchildcare_jw_ppp = childcare_ppp[jw_owin]\n\nRescale from m to km:\n\nchildcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, \"km\")\n\nPlot out the individual areas overlaid with their childcare centres:\n\npar(mfrow=c(2,2))\npar(mar = c(3,2,2,1))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\nplot(childcare_tm_ppp.km, main=\"Tampines\")\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main=\"Jurong West\")\n\n\n\n\n\n\n\n\nCompute the KDE, using diggle to derive the bandwidth:\n\npar(mfrow = c(2,2))\npar(mar = c(3,2,2,1))\nplot(density(childcare_pg_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tempines\")\nplot(density(childcare_ck_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Choa Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Jurong West\")\n\n\n\n\n\n\n\n\nCompute the KDE using a fixed bandwidth of 0.25km:\n\npar(mfrow=c(2,2))\npar(mar = c(3,2,2,1))\nplot(density(childcare_ck_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Chou Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")\nplot(density(childcare_pg_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tampines\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03.html#nearest-neighbour-analysis",
    "href": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03.html#nearest-neighbour-analysis",
    "title": "Hands-On_Ex03",
    "section": "",
    "text": "Perform the Clark-Evans test of aggregation:\n\nH0: Random distribution of childcare centres\nH1: Non-Random distribution of childcare centres\n\n\nclarkevans.test(childcareSG_ppp, correction = \"none\", clipregion = \"sg_owin\", alternative = c(\"clustered\"), nsim = 99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcareSG_ppp\nR = 0.56549, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n\nThe R value from the above result indicates clustering, and as p &lt; 0.05, H0 can be rejected.\nPerforming the same test on the target planning areas:\nTampines\n\nclarkevans.test(childcare_tm_ppp, correction = \"none\", clipregion = \"sg_owin\", alternative = c(\"clustered\"), nsim = 99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_tm_ppp\nR = 0.79285, p-value = 9.25e-05\nalternative hypothesis: clustered (R &lt; 1)\n\n\nThe R value from the above result indicates clustering, and as p &lt; 0.05, H0 can be rejected.\nChoa Chu Kang\n\nclarkevans.test(childcare_ck_ppp, correction = \"none\", clipregion = \"sg_owin\", alternative = c(\"clustered\"), nsim = 99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_ck_ppp\nR = 0.93286, p-value = 0.1579\nalternative hypothesis: clustered (R &lt; 1)\n\n\nAs p &gt; 0.05, H0 cannot be rejected.\nPunggol\n\nclarkevans.test(childcare_pg_ppp, correction = \"none\", clipregion = \"sg_owin\", alternative = c(\"clustered\"), nsim = 99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_pg_ppp\nR = 0.88794, p-value = 0.04703\nalternative hypothesis: clustered (R &lt; 1)\n\n\nAs p &lt; 0.05, H0 can be rejected.\nJurong West\n\nclarkevans.test(childcare_jw_ppp, correction = \"none\", clipregion = \"sg_owin\", alternative = c(\"clustered\"), nsim = 99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_jw_ppp\nR = 0.90649, p-value = 0.04665\nalternative hypothesis: clustered (R &lt; 1)\n\n\nAs p &lt; 0.05, H0 can be rejected."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03.html#nd-order-spatial-point-pattern-analysis",
    "href": "Hands-On_Ex/Hands-On_Ex03/Hands-On_Ex03.html#nd-order-spatial-point-pattern-analysis",
    "title": "Hands-On_Ex03",
    "section": "",
    "text": "The G function measures the distribution of the distances from an arbitrary even to its nearest event. G function on the Choa Chu Kang area:\n\nG_CK = Gest(childcare_ck_ppp, correction = \"border\")\nplot(G_CK, xlim=c(0,500))\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Choa Chu Kang\nH1: Non-Random distribution of childcare centres in Choa Chu Kang\n\nReject H0 if p &lt; 0.001.\n\nG_CK.csr &lt;- envelope(childcare_ck_ppp, Gest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(G_CK.csr)\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Tampines\nH1: Non-Random distribution of childcare centres in Tampines\n\nReject H0 if p &lt; 0.001.\n\nG_tm.csr &lt;- envelope(childcare_tm_ppp, Gest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(G_tm.csr)\n\n\n\n\n\n\n\n\nThe F function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape.\nF function on the Choa Chu Kang area:\n\nF_CK = Fest(childcare_ck_ppp)\nplot(F_CK)\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Choa Chu Kang\nH1: Non-Random distribution of childcare centres in Choa Chu Kang\n\nReject H0 if p &lt; 0.001.\n\nF_CK.csr &lt;- envelope(childcare_ck_ppp, Fest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(F_CK.csr)\n\n\n\n\n\n\n\n\nF function on the Tampines area:\n\nF_tm = Fest(childcare_tm_ppp, correction = \"best\")\nplot(F_tm)\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Tampines\nH1: Non-Random distribution of childcare centres in Tampines\n\nReject H0 if p &lt; 0.001.\n\nF_tm.csr &lt;- envelope(childcare_tm_ppp, Fest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\n\n\nplot(F_tm.csr)\n\n\n\n\n\n\n\n\nThe K function measures the number of events found up to a given distance of any particular event.\nK function on the Choa Chu Kang area:\n\nK_ck = Kest(childcare_ck_ppp, correction = \"Ripley\")\nplot(K_ck, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Choa Chu Kang\nH1: Non-Random distribution of childcare centres in Choa Chu Kang\n\nReject H0 if p &lt; 0.001.\n\nK_ck.csr &lt;- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(K_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")\n\n\n\n\n\n\n\n\nK function on the Tampines area:\n\nK_tm = Kest(childcare_tm_ppp, correction = \"Ripley\")\nplot(K_tm, . -r ~ r, \n     ylab= \"K(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Tampines\nH1: Non-Random distribution of childcare centres in Tampines\n\nReject H0 if p &lt; 0.001.\n\nK_tm.csr &lt;- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(K_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"K(d)-r\", xlim=c(0,500))\n\n\n\n\n\n\n\n\nThe L function is a transformation of the K function, designed to help in identifying clustering or regularity in spatial point patterns.\nL function on the Choa Chu Kang area:\n\nL_ck = Lest(childcare_ck_ppp, correction = \"Ripley\")\nplot(L_ck, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Choa Chu Kang\nH1: Non-Random distribution of childcare centres in Choa Chu Kang\n\nReject H0 if p &lt; 0.001.\n\nL_ck.csr &lt;- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(L_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n\n\n\n\n\nL function on the Tampines area:\n\nL_tm = Lest(childcare_tm_ppp, correction = \"Ripley\")\nplot(L_tm, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\n\n\n\nPerform a complete Spatial Randomness Test with the following hypotheses:\n\nH0: Random distribution of childcare centres in Tampines\nH1: Non-Random distribution of childcare centres in Tampines\n\nReject H0 if p &lt; 0.001.\n\nL_tm.csr &lt;- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\n\n\nplot(L_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"L(d)-r\", xlim=c(0,500))"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html",
    "href": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html",
    "title": "In-Class_Ex03",
    "section": "",
    "text": "# eval: false\ninstall.packages(\"maptools\", repos = \"https://packagemanager.posit.co/cran/2023-10-13\")\n\nInstalling package into 'C:/Users/Kai/AppData/Local/R/win-library/4.4'\n(as 'lib' is unspecified)\n\n\npackage 'maptools' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Kai\\AppData\\Local\\Temp\\RtmpKcziTO\\downloaded_packages\n\n\n\npacman::p_load(sf, raster, spatstat, tmap, tidyverse, sp, dplyr)\n\n\nacled_sf &lt;- st_read(\"data/ACLED_Myanmar.csv\") %&gt;%\n  st_as_sf(coords = c(\n    \"longitude\", \"latitude\"),\n    crs=4326) %&gt;%\n  st_transform(crs = 32647) %&gt;%\n  mutate(event_date = dmy(event_date))\n\nReading layer `ACLED_Myanmar' from data source \n  `C:\\endurrus\\IS415-GAA\\In-Class_Ex\\In-Class_Ex03\\data\\ACLED_Myanmar.csv' \n  using driver `CSV'\n\n\nWarning: no simple feature geometries present: returning a data.frame or tbl_df\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nacled_sf %&gt;%\n  filter(year == 2023 | \n           event_type == \"Political violence\") %&gt;%\n  tm_shape()+\n  tm_dots()"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#installlaunch-r",
    "href": "In-Class_Ex/In-Class_Ex03/In-Class_Ex03.html#installlaunch-r",
    "title": "In-Class_Ex03",
    "section": "",
    "text": "# eval: false\ninstall.packages(\"maptools\", repos = \"https://packagemanager.posit.co/cran/2023-10-13\")\n\nInstalling package into 'C:/Users/Kai/AppData/Local/R/win-library/4.4'\n(as 'lib' is unspecified)\n\n\npackage 'maptools' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Kai\\AppData\\Local\\Temp\\RtmpKcziTO\\downloaded_packages\n\n\n\npacman::p_load(sf, raster, spatstat, tmap, tidyverse, sp, dplyr)\n\n\nacled_sf &lt;- st_read(\"data/ACLED_Myanmar.csv\") %&gt;%\n  st_as_sf(coords = c(\n    \"longitude\", \"latitude\"),\n    crs=4326) %&gt;%\n  st_transform(crs = 32647) %&gt;%\n  mutate(event_date = dmy(event_date))\n\nReading layer `ACLED_Myanmar' from data source \n  `C:\\endurrus\\IS415-GAA\\In-Class_Ex\\In-Class_Ex03\\data\\ACLED_Myanmar.csv' \n  using driver `CSV'\n\n\nWarning: no simple feature geometries present: returning a data.frame or tbl_df\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nacled_sf %&gt;%\n  filter(year == 2023 | \n           event_type == \"Political violence\") %&gt;%\n  tm_shape()+\n  tm_dots()"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex02/data/MPSZ-2019.html",
    "href": "In-Class_Ex/In-Class_Ex02/data/MPSZ-2019.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex02/In-Class_Ex02.html",
    "href": "In-Class_Ex/In-Class_Ex02/In-Class_Ex02.html",
    "title": "In-Class_Ex02",
    "section": "",
    "text": "pacman::p_load(sf, tidyverse, tmap)\n\n\nmpsz14_shp &lt;- st_read(dsn = \"data/\", layer = \"MP14_SUBZONE_WEB_PL\")\n\n\nmpsz14_kml &lt;- st_write(mpsz14_shp, \"data/MP14_SUBZONE_WEB_PL.kml\", delete_dsn = TRUE)\n\n\nmpsz19_shp &lt;- st_read(dsn = \"data/\", layer = \"MPSZ-2019\")\n\nReading layer `MPSZ-2019' from data source \n  `C:\\endurrus\\IS415-GAA\\In-Class_Ex\\In-Class_Ex02\\data' using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\nmpsz19_kml &lt;- st_read(\"data/MasterPlan2019SubzoneBoundaryNoSeaKML.kml\")\n\nReading layer `URA_MP19_SUBZONE_NO_SEA_PL' from data source \n  `C:\\endurrus\\IS415-GAA\\In-Class_Ex\\In-Class_Ex02\\data\\MasterPlan2019SubzoneBoundaryNoSeaKML.kml' \n  using driver `KML'\nSimple feature collection with 332 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nmpsz19_shp &lt;- st_read(dsn = \"data/\", layer = \"MPSZ-2019\") %&gt;% st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `C:\\endurrus\\IS415-GAA\\In-Class_Ex\\In-Class_Ex02\\data' using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\npreschool &lt;- st_read(\"data/PreSchoolsLocation.kml\") %&gt;% st_transform(crs = 3414)\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\endurrus\\IS415-GAA\\In-Class_Ex\\In-Class_Ex02\\data\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\ncheck the coordinate system\n\nst_crs(mpsz19_shp)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\npopdata &lt;- read.csv(\"data/respopagesextod2023.csv\")\n\n\npopdata2023 &lt;- popdata %&gt;% \n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;% \n  ungroup() %&gt;%\n  pivot_wider(names_from = AG, values_from = POP)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\ncolnames(popdata2023)\n\n [1] \"PA\"          \"SZ\"          \"0_to_4\"      \"10_to_14\"    \"15_to_19\"   \n [6] \"20_to_24\"    \"25_to_29\"    \"30_to_34\"    \"35_to_39\"    \"40_to_44\"   \n[11] \"45_to_49\"    \"50_to_54\"    \"55_to_59\"    \"5_to_9\"      \"60_to_64\"   \n[16] \"65_to_69\"    \"70_to_74\"    \"75_to_79\"    \"80_to_84\"    \"85_to_89\"   \n[21] \"90_and_Over\"\n\n\n\npopdata2023 &lt;- popdata2023 %&gt;%\n  mutate_at(.vars = vars(PA, SZ),\n            .funs = list(toupper))\n\n\npop2023_mpsz &lt;- left_join(popdata2023, mpsz19_shp, by = c(\"SZ\" = \"SUBZONE_N\"))\n\n\nmpsz_pop2023 &lt;- left_join(mpsz19_shp, popdata2023, by = c(\"SUBZONE_N\" = \"SZ\"))"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04.html",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04.html",
    "title": "In-Class_Ex04",
    "section": "",
    "text": "#SpatioTemporalPointPatternAnalysis\nA spatio-temporal point process is a random collection of points, where each point represents the time and location of an event."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04.html#installlaunch-r",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04.html#installlaunch-r",
    "title": "In-Class_Ex04",
    "section": "Install/Launch R",
    "text": "Install/Launch R\nforest fire or something\n\npacman::p_load(sf, raster, spatstat, sparr, tmap, tidyverse)\n\nInstalling package into 'C:/Users/Kai/AppData/Local/R/win-library/4.4'\n(as 'lib' is unspecified)\n\n\nalso installing the dependencies 'iterators', 'doParallel', 'foreach', 'misc3d'\n\n\nWarning: unable to access index for repository http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.4:\n  cannot open URL 'http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.4/PACKAGES'\n\n\npackage 'iterators' successfully unpacked and MD5 sums checked\npackage 'doParallel' successfully unpacked and MD5 sums checked\npackage 'foreach' successfully unpacked and MD5 sums checked\npackage 'misc3d' successfully unpacked and MD5 sums checked\npackage 'sparr' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Kai\\AppData\\Local\\Temp\\Rtmpk3zQea\\downloaded_packages\n\n\n\nsparr installed\n\n\n\nkbb &lt;- st_read(dsn = \"data/rawdata\", layer = \"Kepulauan_Bangka_Belitung\")\n\nReading layer `Kepulauan_Bangka_Belitung' from data source \n  `C:\\endurrus\\IS415-GAA\\In-Class_Ex\\In-Class_Ex04\\data\\rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 298 features and 27 fields\nGeometry type: POLYGON\nDimension:     XYZ\nBounding box:  xmin: 105.1085 ymin: -3.116593 xmax: 106.8488 ymax: -1.501603\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nkbb_sf &lt;- st_read(dsn = \"data/rawdata\", layer = \"Kepulauan_Bangka_Belitung\") %&gt;%\n  st_union() %&gt;%\n  st_zm(drop = TRUE, what = \"ZM\") %&gt;%\n  st_transform(crs = 32748)\n\nReading layer `Kepulauan_Bangka_Belitung' from data source \n  `C:\\endurrus\\IS415-GAA\\In-Class_Ex\\In-Class_Ex04\\data\\rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 298 features and 27 fields\nGeometry type: POLYGON\nDimension:     XYZ\nBounding box:  xmin: 105.1085 ymin: -3.116593 xmax: 106.8488 ymax: -1.501603\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nst_as_s2(): dropping Z and/or M coordinate\n\n\nconvert to kbb owin\n\nkbb_owin &lt;- as.owin(kbb_sf)\nkbb_owin\n\nwindow: polygonal boundary\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n\n\ncheck owin\n\nclass(kbb_owin)\n\n[1] \"owin\"\n\n\n\nfire_sf &lt;- read.csv(\"data/rawdata/forestfires.csv\") %&gt;%\n  st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = 4326) %&gt;%\n  st_transform(crs = 32748)\n\n\nfire_sf &lt;- fire_sf %&gt;%\n  mutate(DayOfYear = yday(acq_date)) %&gt;%\n  mutate(Month_num = month(acq_date)) %&gt;%\n  mutate(Month_fac = month(acq_date, label = TRUE, abbr = FALSE))\n\nfire on map someones cooking\n\ntm_shape(kbb_sf) + tm_polygons() + tm_shape(fire_sf) + tm_dots()\n\n\n\n\n\n\n\n\nby month\n\ntm_shape(kbb_sf) + tm_polygons() + tm_shape(fire_sf) + tm_dots(size = 0.1) + tm_facets(by = \"Month_fac\", free.coords = FALSE, drop.units = TRUE) \n\n\n\n\n\n\n\n\nfire by month\n\nfire_month &lt;- fire_sf %&gt;%\n  select(Month_num)\n\nmake ppp\n\nfire_month_ppp &lt;- as.ppp(fire_month)\nfire_month_ppp\n\nMarked planar point pattern: 741 points\nmarks are numeric, of storage type  'double'\nwindow: rectangle = [521564.1, 695791] x [9658137, 9828767] units\n\n\ncheck ppp\n\nsummary(fire_month_ppp)\n\nMarked planar point pattern:  741 points\nAverage intensity 2.49258e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   8.000   9.000   8.579  10.000  12.000 \n\nWindow: rectangle = [521564.1, 695791] x [9658137, 9828767] units\n                    (174200 x 170600 units)\nWindow area = 29728200000 square units\n\n\n\nany(duplicated(fire_month_ppp))\n\n[1] FALSE\n\n\ncombine w owin\n\nfire_month_owin &lt;- fire_month_ppp[kbb_owin]\nsummary(fire_month_owin)\n\nMarked planar point pattern:  741 points\nAverage intensity 6.424519e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   8.000   9.000   8.579  10.000  12.000 \n\nWindow: polygonal boundary\n2 separate polygons (no holes)\n           vertices        area relative.area\npolygon 1     47493 11533600000      1.00e+00\npolygon 2       256      306427      2.66e-05\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n                     (193500 x 178600 units)\nWindow area = 11533900000 square units\nFraction of frame area: 0.334\n\n\n\nst_kde &lt;- spattemp.density(fire_month_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(st_kde)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 15102.47 (spatial)\n  lambda = 0.0304 (temporal)\n\nNo. of observations\n  741 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [512066.8, 705559.4] x [9655398, 9834006]\n\nTemporal bound\n  [1, 12]\n\nEvaluation\n  128 x 128 x 12 trivariate lattice\n  Density range: [1.233458e-27, 8.202976e-10]\n\n\n\ntims &lt;- c(7,8,9,10,11,12)\npar(mfcol = c(2,3))\nfor(i in tims){\n  plot(st_kde, i,\n       override.par = FALSE,\n       fix.range = TRUE,\n       main = paste(\"KDE at month\", i))\n}\n\n\n\n\n\n\n\n\n\n#kde_yday &lt;- spattemp.density(fire_yday_owin)\n#summary(kde_yday)\n\n\n#plot(kde_yday)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/data/rawdata/Kepulauan_Bangka_Belitung.html",
    "href": "In-Class_Ex/In-Class_Ex04/data/rawdata/Kepulauan_Bangka_Belitung.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     \n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05.html",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05.html",
    "title": "Hands-On_Ex05",
    "section": "",
    "text": "This exercise uses the R packages sf, spdep, tmap, tidyverse.\n\npacman::p_load(sf, spdep, tmap, tidyverse, knitr)\n\n\n\n\n\nhunan  &lt;- st_read(dsn = \"data/geospatial\", layer =  \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\endurrus\\IS415-GAA\\Hands-On_Ex\\Hands-On_Ex05\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nJoin the dataframes together:\n\nhunan &lt;- left_join(hunan,hunan2012)%&gt;%\n  select(1:4, 7, 15)\n\nJoining with `by = join_by(County)`\n\n\nVisualise regional development indicator:\n\nbasemap &lt;- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5)\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\nCreate Queen contiguity weight matrices: (all directions)\n\nwm_q &lt;- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe data above reveals 88 area units in Hunan. THe most connected area unit has 11 neighbors, whilst there are 2 area units with only a single neighbour.\nUse wm_q to list all neighboring polygons of a specific polygon:\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\nThe code shows that polygon 1 has 5 neighbors; 2, 3, 4, 57, 85. Retrieve the county name and its neighbors:\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\n\nhunan$NAME_3[c(2,3,4,57,85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nGet the GDPPC of these counties:\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nDisplay the complete weight matrix:\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"snap\")= num 9e-08\n - attr(*, \"sym\")= logi TRUE\n - attr(*, \"ncomp\")=List of 2\n  ..$ nc     : int 1\n  ..$ comp.id: int [1:88] 1 1 1 1 1 1 1 1 1 1 ...\n\n\nCompute the Rook contiguity weight matrix: (NSEW)\n\nwm_r &lt;- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\nThis method shows that within the 88 counties, the most connected area unit has 10 neighbors, whilst there are 2 area units with only a single neighbour.\nVisualise contiguity weights:\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nInput the coordinates into the same object:\n\ncoords &lt;- cbind(longitude, latitude)\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\nPlot a comparison between Queen and Rook based Neighbours Map:\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"Queen Contiguity\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\nplot(hunan$geometry, border=\"lightgrey\", main=\"Rook Contiguity\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n\n\n\n\n\ndnearneigh() identifies the neighbors of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument. If the unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in km will be calculated assuming the WGS84 reference ellipsoid.\nDetermine the upper limit for distance by:\n\nGetting a matrix of the indices of points from the set of the k-nearest neighbors,\nConvert the matrix into a neighbors list of nb class,\nUse nbdists to get the length of neighbor relationship edges. If projected, return coordinate pairs, else km,\nRemove the list structure using unlist\n\n\nk1 &lt;- knn2nb(knearneigh(coords))\n\nWarning in knn2nb(knearneigh(coords)): neighbour object has 25 sub-graphs\n\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nCompute fixed distance weight matrix\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\n\nn_comp &lt;- n.comp.nb(wm_d62)\nn_comp$nc\n\n[1] 1\n\n\n\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\nPlot fixed distance weight matrix:\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\n\n\n\n\nThe red lines show the links of 1st nearest neighbors and the black lines show the links of neighbors within the cut-off distance of 62km.\nSplitting the plots for clarity:\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"1st nearest neighbours\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\nplot(hunan$geometry, border=\"lightgrey\", main=\"Distance link\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)\n\n\n\n\n\n\n\n\nOne characteristic of fixed distance weight matrix is that settlement density and neighbor count are positively correlated. Having many neighbors smoothes the neighbor relationship across more neighbors.\nIt is possible to control the number of neighbors directly using k-nearest neighbors, either by accepting asymmetric neighbors or imposing symmetry as shown below:\n\nknn6 &lt;- knn2nb(knearneigh(coords, k = 6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"ncomp\")=List of 2\n  ..$ nc     : int 1\n  ..$ comp.id: int [1:88] 1 1 1 1 1 1 1 1 1 1 ...\n\n\nPlot the weight matrix\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n\n\n\n\n\nIDW is a type of deterministic interpolation method used to estimate values at unsampled locations based on the values of nearby sampled points.\nDerive the spatial weight matrix based on IDW:\n\ndist &lt;- nbdists(wm_q, coords, longlat = TRUE)\nids &lt;- lapply(dist, function(x) 1/(x))\nids\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034\n\n\nRow-standardised weight matrix\nAssign equal weights with W, and assign weights as 1/x, where x is the num of neighbors.\n\nrswm_q &lt;- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nzero.policy=TRUE option allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy of FALSE would return an error.\nCheck the weights of the first polygon’s 8 neighbors:\n\nrswm_q$weights[10]\n\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n\nDerive the row standardised distance weight matrix:\n\nrswm_ids &lt;- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\nShow weights:\n\nrswm_ids$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338 \n\n\n\n\n\nSpatially lagged values\nCompute the average neighbor GDPPC value for each polygon:\n\nGDPPC.lag &lt;- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nAppend the values onto the hunan dataframe\n\nlag.list &lt;- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag.list)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag GDPPC\")\nhunan &lt;- left_join(hunan,lag.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nThe following table shows the average neighboring income values (stored in the Inc.lag object) for each county.\n\nhead(hunan)\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25\n4 Changde 21102      Li      County      Li 24473  27737.50\n5 Changde 21103   Linli      County   Linli 25554  27270.25\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nPlot both the GDPPC and spatial lag GDPPC for comparison:\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_gdppc &lt;- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nSpatial lag can be calculated as a sum of neighboring values by assigning binary weights. Assign a value of 1 per neighbor:\n\nb_weights &lt;- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 &lt;- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nCompute lag variable from weight and GDPPC:\n\nlag_sum &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag_sum)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag_sum GDPPC\")\n\n\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nAppend lag_sum onto hunan dataframe:\n\nhunan &lt;- left_join(hunan, lag.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nPlot GDPPC and Spatial Lag Sum GDPPC for comparison:\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc &lt;- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nThe spatial window average uses row-standardized weights and includes the diagonal element.\n\nwm_qs &lt;- include.self(wm_q)\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nShow neighbor list of area 1:\n\nwm_qs[[1]]\n\n[1]  1  2  3  4 57 85\n\n\n[1] now has 6 neighbors from 5.\nObtain the weights:\n\nwm_qs &lt;- nb2listw(wm_qs)\nwm_qs\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\n\nCreate lag variable from weight structure and GDPPC variable:\n\nlag_w_avg_gpdpc &lt;- lag.listw(wm_qs, \n                             hunan$GDPPC)\nlag_w_avg_gpdpc\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\nConvert lag variable listw to dataframe:\n\nlag.list.wm_qs &lt;- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))\nlag_wm_qs.res &lt;- as.data.frame(lag.list.wm_qs)\ncolnames(lag_wm_qs.res) &lt;- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\nAppend values onto hunan dataframe:\n\nhunan &lt;- left_join(hunan, lag_wm_qs.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nCompare lag GDPPC and spatial window average values:\n\nhunan %&gt;%\n  select(\"County\", \n         \"lag GDPPC\", \n         \"lag_window_avg GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag GDPPC\nlag_window_avg GDPPC\ngeometry\n\n\n\n\nAnxiang\n24847.20\n24650.50\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n22724.80\n22434.17\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n24143.25\n26233.00\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n27737.50\n27084.60\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n27270.25\n26927.00\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n21248.80\n22230.17\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n43747.00\n47621.20\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n33582.71\n37160.12\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n45651.17\n49224.71\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n32027.62\n29886.89\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n32671.00\n26627.50\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n20810.00\n22690.17\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n25711.50\n25366.40\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n30672.33\n25825.75\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n33457.75\n30329.00\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n31689.20\n32682.83\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n20269.00\n25948.62\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n23901.60\n23987.67\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n25126.17\n25463.14\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n21903.43\n21904.38\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n22718.60\n23127.50\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n25918.80\n25949.83\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n20307.00\n20018.75\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n20023.80\n19524.17\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n16576.80\n18955.00\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n18667.00\n17800.40\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n14394.67\n15883.00\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n19848.80\n18831.33\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n15516.33\n14832.50\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518.00\n17965.00\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n17572.00\n17159.89\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n15200.12\n16199.44\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n18413.80\n18764.50\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n14419.33\n26878.75\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n24094.50\n23188.86\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n22019.83\n20788.14\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n12923.50\n12365.20\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n14756.00\n15985.00\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n13869.80\n13764.83\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n12296.67\n11907.43\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n15775.17\n17128.14\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n14382.86\n14593.62\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n11566.33\n11644.29\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n13199.50\n12706.00\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n23412.00\n21712.29\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n39541.00\n43548.25\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n36186.60\n35049.00\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n16559.60\n16226.83\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n20772.50\n19294.40\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n19471.20\n18156.00\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n19827.33\n19954.75\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n15466.80\n18145.17\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n12925.67\n12132.75\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n18577.17\n18419.29\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n14943.00\n14050.83\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n24913.00\n23619.75\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n25093.00\n24552.71\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n24428.80\n24733.67\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n17003.00\n16762.60\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n21143.75\n20932.60\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n20435.00\n19467.75\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n17131.33\n18334.00\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n24569.75\n22541.00\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n23835.50\n26028.00\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360.00\n29128.50\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n47383.40\n46569.00\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n55157.75\n47576.60\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n37058.00\n36545.50\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n21546.67\n20838.50\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n23348.67\n22531.00\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n42323.67\n42115.50\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n28938.60\n27619.00\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n25880.80\n27611.33\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n47345.67\n44523.29\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n18711.33\n18127.43\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n29087.29\n28746.38\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n20748.29\n20734.50\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n35933.71\n33880.62\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n15439.71\n14716.38\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n29787.50\n28516.22\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n18145.00\n18086.14\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n21617.00\n21244.50\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n29203.89\n29568.80\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n41363.67\n48119.71\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n22259.09\n22310.75\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n44939.56\n43151.60\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n16902.00\n17133.40\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n16930.00\n17009.33\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nPlot the lag_gdppc and w_avg_gdppc maps for comparison:\n\nw_avg_gdppc &lt;- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nThe spatial window sum is the counter part of the window average, but without using row-standardized weights.\n\nwm_qs &lt;- include.self(wm_q)\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nAssing binary weights to the neighbor structure that includes the diagonal element:\n\nb_weights &lt;- lapply(wm_qs, function(x) 0*x + 1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1 1\n\n\nAssign weight values:\n\nb_weights2 &lt;- nb2listw(wm_qs, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 536 1072 14160\n\n\nCompute lag variable:\n\nw_sum_gdppc &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 147903 134605 131165 135423 134635 133381 238106 297281 344573 268982\n[11] 106510 136141 126832 103303 151645 196097 207589 143926 178242 175235\n[21] 138765 155699 160150 117145 113730  89002  63532 112988  59330  35930\n[31] 154439 145795 112587 107515 162322 145517  61826  79925  82589  83352\n[41] 119897 116749  81510  63530 151986 174193 210294  97361  96472 108936\n[51]  79819 108871  48531 128935  84305 188958 171869 148402  83813 104663\n[61] 155742  73336 112705  78084  58257 279414 237883 219273  83354  90124\n[71] 168462 165714 165668 311663 126892 229971 165876 271045 117731 256646\n[81] 126603 127467 295688 336838 267729 431516  85667  51028\n\n\nConvert lag listw to dataframe\n\nw_sum_gdppc.res &lt;- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) &lt;- c(\"NAME_3\", \"w_sum GDPPC\")\n\nAppend w_sum GDPPC to hunan dataframe:\n\nhunan &lt;- left_join(hunan, w_sum_gdppc.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nCompare lag_sum GDPPC and w_sum GDPPC values:\n\nhunan %&gt;%\n  select(\"County\", \"lag_sum GDPPC\", \"w_sum GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag_sum GDPPC\nw_sum GDPPC\ngeometry\n\n\n\n\nAnxiang\n124236\n147903\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n113624\n134605\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n96573\n131165\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n110950\n135423\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n109081\n134635\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n106244\n133381\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n174988\n238106\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n235079\n297281\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n273907\n344573\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n256221\n268982\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n98013\n106510\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n104050\n136141\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n102846\n126832\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n92017\n103303\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n133831\n151645\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n158446\n196097\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n141883\n207589\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n119508\n143926\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n150757\n178242\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n153324\n175235\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n113593\n138765\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n129594\n155699\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n142149\n160150\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n100119\n117145\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n82884\n113730\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n74668\n89002\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n43184\n63532\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n99244\n112988\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n46549\n59330\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518\n35930\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n140576\n154439\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n121601\n145795\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n92069\n112587\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n43258\n107515\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n144567\n162322\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n132119\n145517\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n51694\n61826\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n59024\n79925\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n69349\n82589\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n73780\n83352\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n94651\n119897\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n100680\n116749\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n69398\n81510\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n52798\n63530\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n140472\n151986\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n118623\n174193\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n180933\n210294\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n82798\n97361\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n83090\n96472\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n97356\n108936\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n59482\n79819\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n77334\n108871\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n38777\n48531\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n111463\n128935\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n74715\n84305\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n174391\n188958\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n150558\n171869\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n122144\n148402\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n68012\n83813\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n84575\n104663\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n143045\n155742\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n51394\n73336\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n98279\n112705\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n47671\n78084\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360\n58257\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n236917\n279414\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n220631\n237883\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n185290\n219273\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n64640\n83354\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n70046\n90124\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n126971\n168462\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n144693\n165714\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n129404\n165668\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n284074\n311663\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n112268\n126892\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n203611\n229971\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n145238\n165876\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n251536\n271045\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n108078\n117731\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n238300\n256646\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n108870\n126603\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n108085\n127467\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n262835\n295688\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n248182\n336838\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n244850\n267729\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n404456\n431516\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n67608\n85667\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n33860\n51028\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nPlot the lag_sum gdppc and w_sum_gdppc maps for comparison:\n\nw_sum_gdppc &lt;- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05.html#installlaunch-r-packages",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05.html#installlaunch-r-packages",
    "title": "Hands-On_Ex05",
    "section": "",
    "text": "This exercise uses the R packages sf, spdep, tmap, tidyverse.\n\npacman::p_load(sf, spdep, tmap, tidyverse, knitr)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05.html#import-data",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05.html#import-data",
    "title": "Hands-On_Ex05",
    "section": "",
    "text": "hunan  &lt;- st_read(dsn = \"data/geospatial\", layer =  \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\endurrus\\IS415-GAA\\Hands-On_Ex\\Hands-On_Ex05\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nJoin the dataframes together:\n\nhunan &lt;- left_join(hunan,hunan2012)%&gt;%\n  select(1:4, 7, 15)\n\nJoining with `by = join_by(County)`\n\n\nVisualise regional development indicator:\n\nbasemap &lt;- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5)\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05.html#contiguity-spatial-weights",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05.html#contiguity-spatial-weights",
    "title": "Hands-On_Ex05",
    "section": "",
    "text": "Create Queen contiguity weight matrices: (all directions)\n\nwm_q &lt;- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe data above reveals 88 area units in Hunan. THe most connected area unit has 11 neighbors, whilst there are 2 area units with only a single neighbour.\nUse wm_q to list all neighboring polygons of a specific polygon:\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\nThe code shows that polygon 1 has 5 neighbors; 2, 3, 4, 57, 85. Retrieve the county name and its neighbors:\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\n\nhunan$NAME_3[c(2,3,4,57,85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nGet the GDPPC of these counties:\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nDisplay the complete weight matrix:\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"snap\")= num 9e-08\n - attr(*, \"sym\")= logi TRUE\n - attr(*, \"ncomp\")=List of 2\n  ..$ nc     : int 1\n  ..$ comp.id: int [1:88] 1 1 1 1 1 1 1 1 1 1 ...\n\n\nCompute the Rook contiguity weight matrix: (NSEW)\n\nwm_r &lt;- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\nThis method shows that within the 88 counties, the most connected area unit has 10 neighbors, whilst there are 2 area units with only a single neighbour.\nVisualise contiguity weights:\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nInput the coordinates into the same object:\n\ncoords &lt;- cbind(longitude, latitude)\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\nPlot a comparison between Queen and Rook based Neighbours Map:\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"Queen Contiguity\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\nplot(hunan$geometry, border=\"lightgrey\", main=\"Rook Contiguity\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05.html#computing-distance-based-neighbors",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05.html#computing-distance-based-neighbors",
    "title": "Hands-On_Ex05",
    "section": "",
    "text": "dnearneigh() identifies the neighbors of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument. If the unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in km will be calculated assuming the WGS84 reference ellipsoid.\nDetermine the upper limit for distance by:\n\nGetting a matrix of the indices of points from the set of the k-nearest neighbors,\nConvert the matrix into a neighbors list of nb class,\nUse nbdists to get the length of neighbor relationship edges. If projected, return coordinate pairs, else km,\nRemove the list structure using unlist\n\n\nk1 &lt;- knn2nb(knearneigh(coords))\n\nWarning in knn2nb(knearneigh(coords)): neighbour object has 25 sub-graphs\n\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nCompute fixed distance weight matrix\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\n\nn_comp &lt;- n.comp.nb(wm_d62)\nn_comp$nc\n\n[1] 1\n\n\n\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\nPlot fixed distance weight matrix:\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\n\n\n\n\nThe red lines show the links of 1st nearest neighbors and the black lines show the links of neighbors within the cut-off distance of 62km.\nSplitting the plots for clarity:\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"1st nearest neighbours\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\nplot(hunan$geometry, border=\"lightgrey\", main=\"Distance link\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)\n\n\n\n\n\n\n\n\nOne characteristic of fixed distance weight matrix is that settlement density and neighbor count are positively correlated. Having many neighbors smoothes the neighbor relationship across more neighbors.\nIt is possible to control the number of neighbors directly using k-nearest neighbors, either by accepting asymmetric neighbors or imposing symmetry as shown below:\n\nknn6 &lt;- knn2nb(knearneigh(coords, k = 6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"ncomp\")=List of 2\n  ..$ nc     : int 1\n  ..$ comp.id: int [1:88] 1 1 1 1 1 1 1 1 1 1 ...\n\n\nPlot the weight matrix\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05.html#weights-based-on-inverse-distance-weighting.",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05.html#weights-based-on-inverse-distance-weighting.",
    "title": "Hands-On_Ex05",
    "section": "",
    "text": "IDW is a type of deterministic interpolation method used to estimate values at unsampled locations based on the values of nearby sampled points.\nDerive the spatial weight matrix based on IDW:\n\ndist &lt;- nbdists(wm_q, coords, longlat = TRUE)\nids &lt;- lapply(dist, function(x) 1/(x))\nids\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034\n\n\nRow-standardised weight matrix\nAssign equal weights with W, and assign weights as 1/x, where x is the num of neighbors.\n\nrswm_q &lt;- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nzero.policy=TRUE option allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy of FALSE would return an error.\nCheck the weights of the first polygon’s 8 neighbors:\n\nrswm_q$weights[10]\n\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n\nDerive the row standardised distance weight matrix:\n\nrswm_ids &lt;- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\nShow weights:\n\nrswm_ids$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05.html#spatial-weight-matrix-applications",
    "href": "Hands-On_Ex/Hands-On_Ex05/Hands-On_Ex05.html#spatial-weight-matrix-applications",
    "title": "Hands-On_Ex05",
    "section": "",
    "text": "Spatially lagged values\nCompute the average neighbor GDPPC value for each polygon:\n\nGDPPC.lag &lt;- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nAppend the values onto the hunan dataframe\n\nlag.list &lt;- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag.list)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag GDPPC\")\nhunan &lt;- left_join(hunan,lag.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nThe following table shows the average neighboring income values (stored in the Inc.lag object) for each county.\n\nhead(hunan)\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25\n4 Changde 21102      Li      County      Li 24473  27737.50\n5 Changde 21103   Linli      County   Linli 25554  27270.25\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nPlot both the GDPPC and spatial lag GDPPC for comparison:\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_gdppc &lt;- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nSpatial lag can be calculated as a sum of neighboring values by assigning binary weights. Assign a value of 1 per neighbor:\n\nb_weights &lt;- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 &lt;- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nCompute lag variable from weight and GDPPC:\n\nlag_sum &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag_sum)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag_sum GDPPC\")\n\n\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nAppend lag_sum onto hunan dataframe:\n\nhunan &lt;- left_join(hunan, lag.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nPlot GDPPC and Spatial Lag Sum GDPPC for comparison:\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc &lt;- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nThe spatial window average uses row-standardized weights and includes the diagonal element.\n\nwm_qs &lt;- include.self(wm_q)\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nShow neighbor list of area 1:\n\nwm_qs[[1]]\n\n[1]  1  2  3  4 57 85\n\n\n[1] now has 6 neighbors from 5.\nObtain the weights:\n\nwm_qs &lt;- nb2listw(wm_qs)\nwm_qs\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\n\nCreate lag variable from weight structure and GDPPC variable:\n\nlag_w_avg_gpdpc &lt;- lag.listw(wm_qs, \n                             hunan$GDPPC)\nlag_w_avg_gpdpc\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\nConvert lag variable listw to dataframe:\n\nlag.list.wm_qs &lt;- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))\nlag_wm_qs.res &lt;- as.data.frame(lag.list.wm_qs)\ncolnames(lag_wm_qs.res) &lt;- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\nAppend values onto hunan dataframe:\n\nhunan &lt;- left_join(hunan, lag_wm_qs.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nCompare lag GDPPC and spatial window average values:\n\nhunan %&gt;%\n  select(\"County\", \n         \"lag GDPPC\", \n         \"lag_window_avg GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag GDPPC\nlag_window_avg GDPPC\ngeometry\n\n\n\n\nAnxiang\n24847.20\n24650.50\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n22724.80\n22434.17\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n24143.25\n26233.00\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n27737.50\n27084.60\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n27270.25\n26927.00\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n21248.80\n22230.17\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n43747.00\n47621.20\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n33582.71\n37160.12\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n45651.17\n49224.71\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n32027.62\n29886.89\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n32671.00\n26627.50\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n20810.00\n22690.17\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n25711.50\n25366.40\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n30672.33\n25825.75\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n33457.75\n30329.00\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n31689.20\n32682.83\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n20269.00\n25948.62\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n23901.60\n23987.67\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n25126.17\n25463.14\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n21903.43\n21904.38\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n22718.60\n23127.50\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n25918.80\n25949.83\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n20307.00\n20018.75\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n20023.80\n19524.17\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n16576.80\n18955.00\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n18667.00\n17800.40\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n14394.67\n15883.00\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n19848.80\n18831.33\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n15516.33\n14832.50\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518.00\n17965.00\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n17572.00\n17159.89\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n15200.12\n16199.44\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n18413.80\n18764.50\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n14419.33\n26878.75\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n24094.50\n23188.86\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n22019.83\n20788.14\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n12923.50\n12365.20\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n14756.00\n15985.00\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n13869.80\n13764.83\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n12296.67\n11907.43\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n15775.17\n17128.14\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n14382.86\n14593.62\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n11566.33\n11644.29\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n13199.50\n12706.00\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n23412.00\n21712.29\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n39541.00\n43548.25\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n36186.60\n35049.00\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n16559.60\n16226.83\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n20772.50\n19294.40\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n19471.20\n18156.00\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n19827.33\n19954.75\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n15466.80\n18145.17\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n12925.67\n12132.75\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n18577.17\n18419.29\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n14943.00\n14050.83\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n24913.00\n23619.75\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n25093.00\n24552.71\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n24428.80\n24733.67\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n17003.00\n16762.60\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n21143.75\n20932.60\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n20435.00\n19467.75\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n17131.33\n18334.00\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n24569.75\n22541.00\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n23835.50\n26028.00\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360.00\n29128.50\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n47383.40\n46569.00\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n55157.75\n47576.60\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n37058.00\n36545.50\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n21546.67\n20838.50\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n23348.67\n22531.00\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n42323.67\n42115.50\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n28938.60\n27619.00\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n25880.80\n27611.33\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n47345.67\n44523.29\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n18711.33\n18127.43\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n29087.29\n28746.38\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n20748.29\n20734.50\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n35933.71\n33880.62\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n15439.71\n14716.38\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n29787.50\n28516.22\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n18145.00\n18086.14\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n21617.00\n21244.50\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n29203.89\n29568.80\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n41363.67\n48119.71\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n22259.09\n22310.75\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n44939.56\n43151.60\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n16902.00\n17133.40\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n16930.00\n17009.33\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nPlot the lag_gdppc and w_avg_gdppc maps for comparison:\n\nw_avg_gdppc &lt;- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nThe spatial window sum is the counter part of the window average, but without using row-standardized weights.\n\nwm_qs &lt;- include.self(wm_q)\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nAssing binary weights to the neighbor structure that includes the diagonal element:\n\nb_weights &lt;- lapply(wm_qs, function(x) 0*x + 1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1 1\n\n\nAssign weight values:\n\nb_weights2 &lt;- nb2listw(wm_qs, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 536 1072 14160\n\n\nCompute lag variable:\n\nw_sum_gdppc &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 147903 134605 131165 135423 134635 133381 238106 297281 344573 268982\n[11] 106510 136141 126832 103303 151645 196097 207589 143926 178242 175235\n[21] 138765 155699 160150 117145 113730  89002  63532 112988  59330  35930\n[31] 154439 145795 112587 107515 162322 145517  61826  79925  82589  83352\n[41] 119897 116749  81510  63530 151986 174193 210294  97361  96472 108936\n[51]  79819 108871  48531 128935  84305 188958 171869 148402  83813 104663\n[61] 155742  73336 112705  78084  58257 279414 237883 219273  83354  90124\n[71] 168462 165714 165668 311663 126892 229971 165876 271045 117731 256646\n[81] 126603 127467 295688 336838 267729 431516  85667  51028\n\n\nConvert lag listw to dataframe\n\nw_sum_gdppc.res &lt;- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) &lt;- c(\"NAME_3\", \"w_sum GDPPC\")\n\nAppend w_sum GDPPC to hunan dataframe:\n\nhunan &lt;- left_join(hunan, w_sum_gdppc.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nCompare lag_sum GDPPC and w_sum GDPPC values:\n\nhunan %&gt;%\n  select(\"County\", \"lag_sum GDPPC\", \"w_sum GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag_sum GDPPC\nw_sum GDPPC\ngeometry\n\n\n\n\nAnxiang\n124236\n147903\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n113624\n134605\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n96573\n131165\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n110950\n135423\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n109081\n134635\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n106244\n133381\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n174988\n238106\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n235079\n297281\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n273907\n344573\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n256221\n268982\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n98013\n106510\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n104050\n136141\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n102846\n126832\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n92017\n103303\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n133831\n151645\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n158446\n196097\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n141883\n207589\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n119508\n143926\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n150757\n178242\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n153324\n175235\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n113593\n138765\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n129594\n155699\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n142149\n160150\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n100119\n117145\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n82884\n113730\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n74668\n89002\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n43184\n63532\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n99244\n112988\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n46549\n59330\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518\n35930\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n140576\n154439\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n121601\n145795\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n92069\n112587\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n43258\n107515\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n144567\n162322\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n132119\n145517\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n51694\n61826\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n59024\n79925\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n69349\n82589\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n73780\n83352\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n94651\n119897\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n100680\n116749\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n69398\n81510\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n52798\n63530\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n140472\n151986\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n118623\n174193\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n180933\n210294\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n82798\n97361\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n83090\n96472\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n97356\n108936\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n59482\n79819\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n77334\n108871\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n38777\n48531\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n111463\n128935\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n74715\n84305\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n174391\n188958\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n150558\n171869\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n122144\n148402\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n68012\n83813\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n84575\n104663\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n143045\n155742\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n51394\n73336\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n98279\n112705\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n47671\n78084\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360\n58257\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n236917\n279414\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n220631\n237883\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n185290\n219273\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n64640\n83354\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n70046\n90124\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n126971\n168462\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n144693\n165714\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n129404\n165668\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n284074\n311663\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n112268\n126892\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n203611\n229971\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n145238\n165876\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n251536\n271045\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n108078\n117731\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n238300\n256646\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n108870\n126603\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n108085\n127467\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n262835\n295688\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n248182\n336838\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n244850\n267729\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n404456\n431516\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n67608\n85667\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n33860\n51028\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nPlot the lag_sum gdppc and w_sum_gdppc maps for comparison:\n\nw_sum_gdppc &lt;- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html",
    "href": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html",
    "title": "In-Class_Ex05",
    "section": "",
    "text": "pacman::p_load(sf, spdep, tmap, tidyverse, knitr, GWmodel)\n\n\nhunan_sf  &lt;- st_read(dsn = \"data/geospatial\", layer =  \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\endurrus\\IS415-GAA\\In-Class_Ex\\In-Class_Ex05\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nJoin the dataframes together:\n\nhunan_sf &lt;- left_join(hunan_sf,hunan2012)%&gt;%\n  select(1:3, 7, 15, 16, 31, 32)\n\nJoining with `by = join_by(County)`\n\n\nsave file\n\nwrite_rds(hunan_sf, \"data/rds/hunan_sf.rds\")\n\n\nhunan_sf &lt;- read_rds(\"data/rds/hunan_sf.rds\")\n\n\nhunan_sp &lt;- as_Spatial(hunan_sf)\n\n\nbw_AIC &lt;- bw.gwr(GDPPC ~ 1, data = hunan_sp, approach = \"AIC\", adaptive = TRUE, kernel = \"bisquare\", longlat = T)\n\nAdaptive bandwidth (number of nearest neighbours): 62 AICc value: 1923.156 \nAdaptive bandwidth (number of nearest neighbours): 46 AICc value: 1920.469 \nAdaptive bandwidth (number of nearest neighbours): 36 AICc value: 1917.324 \nAdaptive bandwidth (number of nearest neighbours): 29 AICc value: 1916.661 \nAdaptive bandwidth (number of nearest neighbours): 26 AICc value: 1914.897 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \n\n\n\nbw_AIC\n\n[1] 22\n\n\n\nbw_CV &lt;- bw.gwr(GDPPC ~ 1, data = hunan_sp, approach = \"CV\", adaptive = TRUE, kernel = \"bisquare\", longlat = T)\n\nAdaptive bandwidth: 62 CV score: 15515442343 \nAdaptive bandwidth: 46 CV score: 14937956887 \nAdaptive bandwidth: 36 CV score: 14408561608 \nAdaptive bandwidth: 29 CV score: 14198527496 \nAdaptive bandwidth: 26 CV score: 13898800611 \nAdaptive bandwidth: 22 CV score: 13662299974 \nAdaptive bandwidth: 22 CV score: 13662299974 \n\n\n\nbw_CV\n\n[1] 22\n\n\nfixed bandwidth\n\nbw_AIC &lt;- bw.gwr(GDPPC ~ 1, data = hunan_sp, approach = \"AIC\", adaptive = FALSE, kernel = \"bisquare\", longlat = T)\n\nFixed bandwidth: 357.4897 AICc value: 1927.631 \nFixed bandwidth: 220.985 AICc value: 1921.547 \nFixed bandwidth: 136.6204 AICc value: 1919.993 \nFixed bandwidth: 84.48025 AICc value: 1940.603 \nFixed bandwidth: 168.8448 AICc value: 1919.457 \nFixed bandwidth: 188.7606 AICc value: 1920.007 \nFixed bandwidth: 156.5362 AICc value: 1919.41 \nFixed bandwidth: 148.929 AICc value: 1919.527 \nFixed bandwidth: 161.2377 AICc value: 1919.392 \nFixed bandwidth: 164.1433 AICc value: 1919.403 \nFixed bandwidth: 159.4419 AICc value: 1919.393 \nFixed bandwidth: 162.3475 AICc value: 1919.394 \nFixed bandwidth: 160.5517 AICc value: 1919.391 \n\n\n\nbw_CV &lt;- bw.gwr(GDPPC ~ 1, data = hunan_sp, approach = \"CV\", adaptive = FALSE, kernel = \"bisquare\", longlat = T)\n\nFixed bandwidth: 357.4897 CV score: 16265191728 \nFixed bandwidth: 220.985 CV score: 14954930931 \nFixed bandwidth: 136.6204 CV score: 14134185837 \nFixed bandwidth: 84.48025 CV score: 13693362460 \nFixed bandwidth: 52.25585 CV score: Inf \nFixed bandwidth: 104.396 CV score: 13891052305 \nFixed bandwidth: 72.17162 CV score: 13577893677 \nFixed bandwidth: 64.56447 CV score: 14681160609 \nFixed bandwidth: 76.8731 CV score: 13444716890 \nFixed bandwidth: 79.77877 CV score: 13503296834 \nFixed bandwidth: 75.07729 CV score: 13452450771 \nFixed bandwidth: 77.98296 CV score: 13457916138 \nFixed bandwidth: 76.18716 CV score: 13442911302 \nFixed bandwidth: 75.76323 CV score: 13444600639 \nFixed bandwidth: 76.44916 CV score: 13442994078 \nFixed bandwidth: 76.02523 CV score: 13443285248 \nFixed bandwidth: 76.28724 CV score: 13442844774 \nFixed bandwidth: 76.34909 CV score: 13442864995 \nFixed bandwidth: 76.24901 CV score: 13442855596 \nFixed bandwidth: 76.31086 CV score: 13442847019 \nFixed bandwidth: 76.27264 CV score: 13442846793 \nFixed bandwidth: 76.29626 CV score: 13442844829 \nFixed bandwidth: 76.28166 CV score: 13442845238 \nFixed bandwidth: 76.29068 CV score: 13442844678 \nFixed bandwidth: 76.29281 CV score: 13442844691 \nFixed bandwidth: 76.28937 CV score: 13442844698 \nFixed bandwidth: 76.2915 CV score: 13442844676 \nFixed bandwidth: 76.292 CV score: 13442844679 \nFixed bandwidth: 76.29119 CV score: 13442844676 \nFixed bandwidth: 76.29099 CV score: 13442844676 \nFixed bandwidth: 76.29131 CV score: 13442844676 \nFixed bandwidth: 76.29138 CV score: 13442844676 \nFixed bandwidth: 76.29126 CV score: 13442844676 \nFixed bandwidth: 76.29123 CV score: 13442844676 \n\n\ngeoweighted summary stats\n\ngwstat &lt;- gwss(data = hunan_sp, vars = \"GDPPC\", bw = bw_AIC, kernel = \"bisquare\", adaptive = TRUE, longlat = T)\n\n\ngwstat_df &lt;- as.data.frame(gwstat$SDF)\n\n\nhunan_gstat &lt;- cbind(hunan_sf,gwstat_df)\n\nviz\n\ntm_shape(hunan_gstat) + tm_fill(\"GDPPC_LM\",\n                                n = 5,\n                                style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Dist of geoweighted mean\",\n            main.title.position = \"center\",\n            main.title.size = 1.0,\n            legend.text.size =0.8,\n            legend.height = 1.0 ,\n            legend.width = 1.0,\n            frame = TRUE)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html#installlaunch-r-packages",
    "href": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html#installlaunch-r-packages",
    "title": "In-Class_Ex05",
    "section": "",
    "text": "pacman::p_load(sf, spdep, tmap, tidyverse, knitr, GWmodel)\n\n\nhunan_sf  &lt;- st_read(dsn = \"data/geospatial\", layer =  \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\endurrus\\IS415-GAA\\In-Class_Ex\\In-Class_Ex05\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nJoin the dataframes together:\n\nhunan_sf &lt;- left_join(hunan_sf,hunan2012)%&gt;%\n  select(1:3, 7, 15, 16, 31, 32)\n\nJoining with `by = join_by(County)`\n\n\nsave file\n\nwrite_rds(hunan_sf, \"data/rds/hunan_sf.rds\")\n\n\nhunan_sf &lt;- read_rds(\"data/rds/hunan_sf.rds\")\n\n\nhunan_sp &lt;- as_Spatial(hunan_sf)\n\n\nbw_AIC &lt;- bw.gwr(GDPPC ~ 1, data = hunan_sp, approach = \"AIC\", adaptive = TRUE, kernel = \"bisquare\", longlat = T)\n\nAdaptive bandwidth (number of nearest neighbours): 62 AICc value: 1923.156 \nAdaptive bandwidth (number of nearest neighbours): 46 AICc value: 1920.469 \nAdaptive bandwidth (number of nearest neighbours): 36 AICc value: 1917.324 \nAdaptive bandwidth (number of nearest neighbours): 29 AICc value: 1916.661 \nAdaptive bandwidth (number of nearest neighbours): 26 AICc value: 1914.897 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \n\n\n\nbw_AIC\n\n[1] 22\n\n\n\nbw_CV &lt;- bw.gwr(GDPPC ~ 1, data = hunan_sp, approach = \"CV\", adaptive = TRUE, kernel = \"bisquare\", longlat = T)\n\nAdaptive bandwidth: 62 CV score: 15515442343 \nAdaptive bandwidth: 46 CV score: 14937956887 \nAdaptive bandwidth: 36 CV score: 14408561608 \nAdaptive bandwidth: 29 CV score: 14198527496 \nAdaptive bandwidth: 26 CV score: 13898800611 \nAdaptive bandwidth: 22 CV score: 13662299974 \nAdaptive bandwidth: 22 CV score: 13662299974 \n\n\n\nbw_CV\n\n[1] 22\n\n\nfixed bandwidth\n\nbw_AIC &lt;- bw.gwr(GDPPC ~ 1, data = hunan_sp, approach = \"AIC\", adaptive = FALSE, kernel = \"bisquare\", longlat = T)\n\nFixed bandwidth: 357.4897 AICc value: 1927.631 \nFixed bandwidth: 220.985 AICc value: 1921.547 \nFixed bandwidth: 136.6204 AICc value: 1919.993 \nFixed bandwidth: 84.48025 AICc value: 1940.603 \nFixed bandwidth: 168.8448 AICc value: 1919.457 \nFixed bandwidth: 188.7606 AICc value: 1920.007 \nFixed bandwidth: 156.5362 AICc value: 1919.41 \nFixed bandwidth: 148.929 AICc value: 1919.527 \nFixed bandwidth: 161.2377 AICc value: 1919.392 \nFixed bandwidth: 164.1433 AICc value: 1919.403 \nFixed bandwidth: 159.4419 AICc value: 1919.393 \nFixed bandwidth: 162.3475 AICc value: 1919.394 \nFixed bandwidth: 160.5517 AICc value: 1919.391 \n\n\n\nbw_CV &lt;- bw.gwr(GDPPC ~ 1, data = hunan_sp, approach = \"CV\", adaptive = FALSE, kernel = \"bisquare\", longlat = T)\n\nFixed bandwidth: 357.4897 CV score: 16265191728 \nFixed bandwidth: 220.985 CV score: 14954930931 \nFixed bandwidth: 136.6204 CV score: 14134185837 \nFixed bandwidth: 84.48025 CV score: 13693362460 \nFixed bandwidth: 52.25585 CV score: Inf \nFixed bandwidth: 104.396 CV score: 13891052305 \nFixed bandwidth: 72.17162 CV score: 13577893677 \nFixed bandwidth: 64.56447 CV score: 14681160609 \nFixed bandwidth: 76.8731 CV score: 13444716890 \nFixed bandwidth: 79.77877 CV score: 13503296834 \nFixed bandwidth: 75.07729 CV score: 13452450771 \nFixed bandwidth: 77.98296 CV score: 13457916138 \nFixed bandwidth: 76.18716 CV score: 13442911302 \nFixed bandwidth: 75.76323 CV score: 13444600639 \nFixed bandwidth: 76.44916 CV score: 13442994078 \nFixed bandwidth: 76.02523 CV score: 13443285248 \nFixed bandwidth: 76.28724 CV score: 13442844774 \nFixed bandwidth: 76.34909 CV score: 13442864995 \nFixed bandwidth: 76.24901 CV score: 13442855596 \nFixed bandwidth: 76.31086 CV score: 13442847019 \nFixed bandwidth: 76.27264 CV score: 13442846793 \nFixed bandwidth: 76.29626 CV score: 13442844829 \nFixed bandwidth: 76.28166 CV score: 13442845238 \nFixed bandwidth: 76.29068 CV score: 13442844678 \nFixed bandwidth: 76.29281 CV score: 13442844691 \nFixed bandwidth: 76.28937 CV score: 13442844698 \nFixed bandwidth: 76.2915 CV score: 13442844676 \nFixed bandwidth: 76.292 CV score: 13442844679 \nFixed bandwidth: 76.29119 CV score: 13442844676 \nFixed bandwidth: 76.29099 CV score: 13442844676 \nFixed bandwidth: 76.29131 CV score: 13442844676 \nFixed bandwidth: 76.29138 CV score: 13442844676 \nFixed bandwidth: 76.29126 CV score: 13442844676 \nFixed bandwidth: 76.29123 CV score: 13442844676 \n\n\ngeoweighted summary stats\n\ngwstat &lt;- gwss(data = hunan_sp, vars = \"GDPPC\", bw = bw_AIC, kernel = \"bisquare\", adaptive = TRUE, longlat = T)\n\n\ngwstat_df &lt;- as.data.frame(gwstat$SDF)\n\n\nhunan_gstat &lt;- cbind(hunan_sf,gwstat_df)\n\nviz\n\ntm_shape(hunan_gstat) + tm_fill(\"GDPPC_LM\",\n                                n = 5,\n                                style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Dist of geoweighted mean\",\n            main.title.position = \"center\",\n            main.title.size = 1.0,\n            legend.text.size =0.8,\n            legend.height = 1.0 ,\n            legend.width = 1.0,\n            frame = TRUE)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html",
    "title": "Take-Home_Ex01",
    "section": "",
    "text": "EDIT: Minor spelling edits."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#introduction",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#introduction",
    "title": "Take-Home_Ex01",
    "section": "Introduction",
    "text": "Introduction\nArmed conflicts continue to wreak havoc worldwide, disrupting the lives of millions annually. After a relative decline in the 1990s and early 2000s, conflicts have surged since 2012, triggered by events such as the 2011 Arab uprisings that sparked wars in Libya, Syria, and Yemen. The instability in Libya further contributed to prolonged unrest in the Sahel region. This period of escalating violence has been marked by numerous high-profile conflicts: the 2020 war between Azerbaijan and Armenia over Nagorno-Karabakh, the brutal fighting in Ethiopia’s Tigray region, Myanmar’s descent into conflict following a military coup in 2021, and Russia’s invasion of Ukraine in 2022. In 2023, violence intensified in Sudan and Gaza, adding to the mounting toll of human suffering. Today, more people are experiencing death, displacement, and a critical need for humanitarian aid than at any time in recent decades."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#importing-packages",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#importing-packages",
    "title": "Take-Home_Ex01",
    "section": "Importing Packages",
    "text": "Importing Packages\nBefore we start the exercise, we will need to import necessary R packages first. We will use the following packages:\n\nsf : provides a standardised way to encode spatial vector data in R environment, facilitating spatial data operations and analysis.\nst : creats simple features from numeric vectors, matrices, or lists, enabling the representation and manipulation of spatial structures in R.\nspatstat: A package for statistical analysis of spatial data, specifically Spatial Point Pattern Analysis. This package was provided by Baddeley, Turner and Ruback (2015) and gives a comprehensive list of functions to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer.\ntidyverse : a collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structure.\nraster : reads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster). In this hands-on exercise, it will be used to convert image output generate by spatstat into raster format.\ntmap: Packages used for creating static and interactive visualisations summary statistics and KDE layers.\nlubridate: splits the data into quarters by their years.\n\n\npacman::p_load(sf, st, tidyverse, raster, tmap, ggplot2, spatstat, lubridate, sparr)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#importing-dataset-into-r-environment",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#importing-dataset-into-r-environment",
    "title": "Take-Home_Ex01",
    "section": "Importing Dataset into R environment",
    "text": "Importing Dataset into R environment\n\nDatasets\n\nFor the purpose of this assignment, armed conflict data of Myanmar between January 2021 - June 2024 from Armed Conflict Location & Event Data (ACLED). Our analysis concentrates on four primary event categories: Battles, Explosion/Remote violence, Strategic developments, and Violence against civilians.\nWe will also use geospatial data on the Myanmar National Border in ESRI Shapefile format. (Myanmar National Boundary MIMU v9.4)\n\n\n\nImporting the Datasets\n\nMyanmar Armed Conflict Dataset\nThe dataset, which we downloaded from ACLED, is in csv format. To use this data in an R-environment, we need to import it as an sf object. We can do this using the st_read() function of the sf package. This function reads the csv data and returns an sf object that can be used for further analysis.\nThe data has also been transformed such that the EPSG coordinates are accurate to Myanmar.\n\nacled_sf &lt;- read_csv(\"data/2021-01-01-2024-06-30-Myanmar.csv\") %&gt;%\n  st_as_sf(coords = c(\n    \"longitude\", \"latitude\"),\n    crs=4326) %&gt;%\n  st_transform(crs = 32647) %&gt;%\n  mutate(event_date = dmy(event_date))\n\nRows: 42608 Columns: 31\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (20): event_id_cnty, event_date, disorder_type, event_type, sub_event_ty...\ndbl (11): year, time_precision, inter1, inter2, interaction, iso, latitude, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThe event_date column is categorized by\n\nacled_sf &lt;- acled_sf %&gt;%\n  mutate(quarter = quarter(event_date))\n\n\n\nMyanmar Administrative Boundary Data\nThe code chunk below uses st_read() of sf package to import Myanmar shapefile into R. The imported shapefile will be simple features Object of sf.\n\nmyanmar_sf &lt;- st_read(dsn = \"data\", \n                 layer = \"mmr_polbnda2_adm1_250k_mimu_1\") %&gt;%\n  st_as_sf(coords =c(\n    \"longitude\", \"latitude\"),\n           crs = 4326) %&gt;%\n  st_transform(crs = 32647)\n\nReading layer `mmr_polbnda2_adm1_250k_mimu_1' from data source \n  `C:\\endurrus\\IS415-GAA\\Take-Home_Ex\\Take-Home_Ex01\\data' using driver `ESRI Shapefile'\nSimple feature collection with 18 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\n\n\n\nOpenStreetMap of Myanmar\nTo import the OpenStreetMap of Myanmar, I utilized st_read() once more.\n\nosm = st_read(\"data\", layer=\"gis_osm_places_a_free_1\")\n\nReading layer `gis_osm_places_a_free_1' from data source \n  `C:\\endurrus\\IS415-GAA\\Take-Home_Ex\\Take-Home_Ex01\\data' using driver `ESRI Shapefile'\nSimple feature collection with 10489 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.24155 ymin: 9.606004 xmax: 101.0663 ymax: 28.17021\nGeodetic CRS:  WGS 84\n\n\n\n\nMapping geospatial data sets\nIt is useful for us to plot a map to show spatial patters.\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\n\nThe code below plots the armed conflict data in Myanmar.\n\nacled_sf %&gt;%   tm_shape()+tm_dots()"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#geospatial-data-wrangling",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#geospatial-data-wrangling",
    "title": "Take-Home_Ex01",
    "section": "Geospatial Data Wrangling",
    "text": "Geospatial Data Wrangling\n\nSeparating data by the year and quarters\nThe code chunk below separates the data provided into years and quarters for easier plotting.\n\n# 2021\nacled_2021.Q1_sf &lt;- acled_sf %&gt;%\n  filter(year == '2021') %&gt;%\n  filter(quarter == '1')\n\nacled_2021.Q2_sf &lt;- acled_sf %&gt;%\n  filter(year == '2021') %&gt;%\n  filter(quarter == '2')\n\nacled_2021.Q3_sf &lt;- acled_sf %&gt;%\n  filter(year == '2021') %&gt;%\n  filter(quarter == '3')\n\nacled_2021.Q4_sf &lt;- acled_sf %&gt;%\n  filter(year == '2021') %&gt;%\n  filter(quarter == '4')\n\n# 2022\nacled_2022.Q1_sf &lt;- acled_sf %&gt;%\n  filter(year == '2022') %&gt;%\n  filter(quarter == '1')\n\nacled_2022.Q2_sf &lt;- acled_sf %&gt;%\n  filter(year == '2022') %&gt;%\n  filter(quarter == '2')\n\nacled_2022.Q3_sf &lt;- acled_sf %&gt;%\n  filter(year == '2022') %&gt;%\n  filter(quarter == '3')\n\nacled_2022.Q4_sf &lt;- acled_sf %&gt;%\n  filter(year == '2022') %&gt;%\n  filter(quarter == '4')\n\n\n# 2023\nacled_2023.Q1_sf &lt;- acled_sf %&gt;%\n  filter(year == '2023') %&gt;%\n  filter(quarter == '1')\n\nacled_2023.Q2_sf &lt;- acled_sf %&gt;%\n  filter(year == '2023') %&gt;%\n  filter(quarter == '2')\n\nacled_2023.Q3_sf &lt;- acled_sf %&gt;%\n  filter(year == '2023') %&gt;%\n  filter(quarter == '3')\n\nacled_2023.Q4_sf &lt;- acled_sf %&gt;%\n  filter(year == '2023') %&gt;%\n  filter(quarter == '4')\n\n\n# 2024\nacled_2024.Q1_sf &lt;- acled_sf %&gt;%\n  filter(year == '2024') %&gt;%\n  filter(quarter == '1')\n\nacled_2024.Q2_sf &lt;- acled_sf %&gt;%\n  filter(year == '2024') %&gt;%\n  filter(quarter == '2')\n\n\n\nConverting sf data frames to sp’s Spatial* class\nThe code chunk below uses as_Spatial() of sf package to convert the geospatial data from sf data frame to sp’s Spatial* class.\n\nacled &lt;- as_Spatial(acled_sf)\n\n# by quarters\nacled_2021.Q1 &lt;- as_Spatial(acled_2021.Q1_sf)\nacled_2021.Q2 &lt;- as_Spatial(acled_2021.Q2_sf)\nacled_2021.Q3 &lt;- as_Spatial(acled_2021.Q3_sf)\nacled_2021.Q4 &lt;- as_Spatial(acled_2021.Q4_sf)\n\nacled_2022.Q1 &lt;- as_Spatial(acled_2022.Q1_sf)\nacled_2022.Q2 &lt;- as_Spatial(acled_2022.Q2_sf)\nacled_2022.Q3 &lt;- as_Spatial(acled_2022.Q3_sf)\nacled_2022.Q4 &lt;- as_Spatial(acled_2022.Q4_sf)\n\nacled_2023.Q1 &lt;- as_Spatial(acled_2023.Q1_sf)\nacled_2023.Q2 &lt;- as_Spatial(acled_2023.Q2_sf)\nacled_2023.Q3 &lt;- as_Spatial(acled_2023.Q3_sf)\nacled_2023.Q4 &lt;- as_Spatial(acled_2023.Q4_sf)\n\nacled_2024.Q1 &lt;- as_Spatial(acled_2024.Q1_sf)\nacled_2024.Q2 &lt;- as_Spatial(acled_2024.Q2_sf)\n\n\n\nConverting simple features to spatstat’s ppp (planar point pattern) object\nspatstat requires the analytical data in ppp object form. Hence we will convert sf objects to ppp objects using as.ppp() function by providing the point coordinates and the observation window.\n\n# overall\nacled_ppp &lt;- as.ppp(st_coordinates(acled_sf), st_bbox(acled_sf))\n\nWarning: data contain duplicated points\n\n# by quarters\nacled_2021.Q1_ppp &lt;- as.ppp(st_coordinates(acled_2021.Q1_sf), st_bbox(acled_2021.Q1_sf))\n\nWarning: data contain duplicated points\n\nacled_2021.Q2_ppp &lt;- as.ppp(st_coordinates(acled_2021.Q2_sf), st_bbox(acled_2021.Q2_sf))\n\nWarning: data contain duplicated points\n\nacled_2021.Q3_ppp &lt;- as.ppp(st_coordinates(acled_2021.Q3_sf), st_bbox(acled_2021.Q3_sf))\n\nWarning: data contain duplicated points\n\nacled_2021.Q4_ppp &lt;- as.ppp(st_coordinates(acled_2021.Q4_sf), st_bbox(acled_2021.Q4_sf))\n\nWarning: data contain duplicated points\n\nacled_2022.Q1_ppp &lt;- as.ppp(st_coordinates(acled_2022.Q1_sf), st_bbox(acled_2022.Q1_sf))\n\nWarning: data contain duplicated points\n\nacled_2022.Q2_ppp &lt;- as.ppp(st_coordinates(acled_2022.Q2_sf), st_bbox(acled_2022.Q2_sf))\n\nWarning: data contain duplicated points\n\nacled_2022.Q3_ppp &lt;- as.ppp(st_coordinates(acled_2022.Q3_sf), st_bbox(acled_2022.Q3_sf))\n\nWarning: data contain duplicated points\n\nacled_2022.Q4_ppp &lt;- as.ppp(st_coordinates(acled_2022.Q4_sf), st_bbox(acled_2022.Q4_sf))\n\nWarning: data contain duplicated points\n\nacled_2023.Q1_ppp &lt;- as.ppp(st_coordinates(acled_2023.Q1_sf), st_bbox(acled_2023.Q1_sf))\n\nWarning: data contain duplicated points\n\nacled_2023.Q2_ppp &lt;- as.ppp(st_coordinates(acled_2023.Q2_sf), st_bbox(acled_2023.Q2_sf))\n\nWarning: data contain duplicated points\n\nacled_2023.Q3_ppp &lt;- as.ppp(st_coordinates(acled_2023.Q3_sf), st_bbox(acled_2023.Q3_sf))\n\nWarning: data contain duplicated points\n\nacled_2023.Q4_ppp &lt;- as.ppp(st_coordinates(acled_2023.Q4_sf), st_bbox(acled_2023.Q4_sf))\n\nWarning: data contain duplicated points\n\nacled_2024.Q1_ppp &lt;- as.ppp(st_coordinates(acled_2024.Q1_sf), st_bbox(acled_2024.Q1_sf))\n\nWarning: data contain duplicated points\n\nacled_2024.Q2_ppp &lt;- as.ppp(st_coordinates(acled_2024.Q2_sf), st_bbox(acled_2024.Q2_sf))\n\nWarning: data contain duplicated points\n\nplot(acled_2021.Q1_ppp)\n\n\n\n\n\n\n\n\nHeres the summary statistics of the newly created ppp object.\n\nsummary(acled_2021.Q1_ppp)\n\nPlanar point pattern:  712 points\nAverage intensity 5.418954e-10 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 13 decimal places\n\nWindow: rectangle = [-203795.3, 591875.9] x [1375186.1, 3026504.9] units\n                    (795700 x 1651000 units)\nWindow area = 1.31391e+12 square units\n\n\n\n\nHandling duplicated points\nIt is previously mentioned in summary(acled_ppp) that there are duplicated points in the patterns. We can double confirm the duplication in a ppp object by using the code chunk below.\n\nany(duplicated(acled_2021.Q1_ppp))\n\n[1] TRUE\n\n\nSince the above code chunk returns TRUE, we will use sum() and multiplicity() functions to see how many locations have more than one point event.\n\nsum(multiplicity(acled_2021.Q1_ppp) &gt; 1)\n\n[1] 549\n\n\nWe can address this by using rjitter() which will add a small perturbation to the duplicate points so that they do not occupy the exact same spaces.\n\n# overall\nacled_ppp_jit &lt;- rjitter(acled_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\n\n# by quarters\nacled_2021.Q1_ppp_jit &lt;- rjitter(acled_2021.Q1_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\nacled_2021.Q2_ppp_jit &lt;- rjitter(acled_2021.Q2_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\nacled_2021.Q3_ppp_jit &lt;- rjitter(acled_2021.Q3_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\nacled_2021.Q4_ppp_jit &lt;- rjitter(acled_2021.Q4_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\n\nacled_2022.Q1_ppp_jit &lt;- rjitter(acled_2022.Q1_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\nacled_2022.Q2_ppp_jit &lt;- rjitter(acled_2022.Q2_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\nacled_2022.Q3_ppp_jit &lt;- rjitter(acled_2022.Q3_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\nacled_2022.Q4_ppp_jit &lt;- rjitter(acled_2022.Q4_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\n\nacled_2023.Q1_ppp_jit &lt;- rjitter(acled_2023.Q1_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\nacled_2023.Q2_ppp_jit &lt;- rjitter(acled_2023.Q2_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\nacled_2023.Q3_ppp_jit &lt;- rjitter(acled_2023.Q3_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\nacled_2023.Q4_ppp_jit &lt;- rjitter(acled_2023.Q4_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\n\nacled_2024.Q1_ppp_jit &lt;- rjitter(acled_2024.Q1_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\nacled_2024.Q2_ppp_jit &lt;- rjitter(acled_2024.Q2_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\n\nWe will check if there is still any duplicate points in our dataset.\n\nany(duplicated(acled_2021.Q1_ppp_jit))\n\n[1] FALSE\n\n\n\n\nCreating owin object\nSince we have imported the Myanmar boundary, we will now convert the myanmar_sf object into an owin object.\n\nmyanmar_owin &lt;- as.owin(myanmar_sf)\nplot(myanmar_owin)\n\n\n\n\n\n\n\nsummary(myanmar_owin)\n\nWindow: polygonal boundary\n1345 separate polygons (783 holes)\n                    vertices         area relative.area\npolygon 1 (hole)           4 -2.89739e-02     -4.33e-14\npolygon 2 (hole)           5 -7.39370e-02     -1.10e-13\npolygon 3 (hole)           6 -1.08246e-01     -1.62e-13\npolygon 4 (hole)          13 -3.27066e-01     -4.88e-13\npolygon 5 (hole)           3 -3.55720e-07     -5.31e-19\npolygon 6 (hole)           4 -3.29535e-08     -4.92e-20\npolygon 7 (hole)           4 -2.72345e-07     -4.07e-19\npolygon 8 (hole)           3 -4.10226e-07     -6.13e-19\npolygon 9 (hole)           4 -1.83634e-06     -2.74e-18\npolygon 10 (hole)          3 -1.86294e-06     -2.78e-18\npolygon 11 (hole)          4 -2.01188e-06     -3.00e-18\npolygon 12 (hole)          3 -6.89672e-11     -1.03e-22\npolygon 13 (hole)          4 -1.94084e-06     -2.90e-18\npolygon 14 (hole)          4 -4.15521e-06     -6.20e-18\npolygon 15 (hole)          3 -1.67824e-07     -2.51e-19\npolygon 16 (hole)          4 -5.10103e-07     -7.62e-19\npolygon 17 (hole)          3 -5.71908e-08     -8.54e-20\npolygon 18 (hole)          4 -9.56472e-07     -1.43e-18\npolygon 19 (hole)          3 -1.67010e-06     -2.49e-18\npolygon 20 (hole)          3 -7.14373e-07     -1.07e-18\npolygon 21 (hole)          4 -5.48471e-08     -8.19e-20\npolygon 22 (hole)          4 -9.63973e-07     -1.44e-18\npolygon 23 (hole)          3 -3.04045e-06     -4.54e-18\npolygon 24 (hole)          4 -4.06661e-07     -6.07e-19\npolygon 25 (hole)          3 -1.83329e-13     -2.74e-25\npolygon 26 (hole)          5 -6.85239e-10     -1.02e-21\npolygon 27 (hole)          4 -1.18031e-06     -1.76e-18\npolygon 28 (hole)          4 -9.56264e-11     -1.43e-22\npolygon 29 (hole)          6 -7.03445e-06     -1.05e-17\npolygon 30 (hole)          4 -4.35634e-07     -6.50e-19\npolygon 31 (hole)          4 -3.67731e-07     -5.49e-19\npolygon 32 (hole)         11 -1.82960e-05     -2.73e-17\npolygon 33 (hole)         10 -4.44947e-06     -6.64e-18\npolygon 34 (hole)          4 -5.06848e-07     -7.57e-19\npolygon 35 (hole)         16 -2.17406e-06     -3.25e-18\npolygon 36 (hole)          4 -4.01576e-06     -6.00e-18\npolygon 37 (hole)          4 -3.55001e-07     -5.30e-19\npolygon 38 (hole)          4 -9.82088e-07     -1.47e-18\npolygon 39 (hole)          4 -4.41915e-10     -6.60e-22\npolygon 40 (hole)          3 -4.10023e-09     -6.12e-21\npolygon 41 (hole)          4 -5.97298e-08     -8.92e-20\npolygon 42                26  2.85778e+06      4.27e-06\npolygon 43 (hole)          7 -5.98527e-06     -8.94e-18\npolygon 44 (hole)          5 -1.11940e-06     -1.67e-18\npolygon 45 (hole)          3 -6.94332e-09     -1.04e-20\npolygon 46 (hole)          5 -4.91071e-06     -7.33e-18\npolygon 47 (hole)          4 -3.51438e-07     -5.25e-19\npolygon 48 (hole)          3 -6.99415e-08     -1.04e-19\npolygon 49 (hole)          4 -1.11326e-08     -1.66e-20\npolygon 50 (hole)          3 -6.10517e-07     -9.12e-19\npolygon 51 (hole)          3 -2.24607e-07     -3.35e-19\npolygon 52 (hole)          4 -8.02093e-07     -1.20e-18\npolygon 53 (hole)          3 -9.66907e-08     -1.44e-19\npolygon 54 (hole)          4 -4.37363e-06     -6.53e-18\npolygon 55 (hole)          3 -1.70717e-07     -2.55e-19\npolygon 56 (hole)          4 -3.07590e-06     -4.59e-18\npolygon 57 (hole)          3 -1.99408e-07     -2.98e-19\npolygon 58 (hole)          6 -1.63617e-06     -2.44e-18\npolygon 59 (hole)          3 -3.06785e-07     -4.58e-19\npolygon 60 (hole)          3 -1.56131e-07     -2.33e-19\npolygon 61 (hole)          7 -1.79876e-06     -2.69e-18\npolygon 62 (hole)         11 -1.65937e-05     -2.48e-17\npolygon 63 (hole)          4 -1.42725e-06     -2.13e-18\npolygon 64 (hole)          6 -1.33879e-06     -2.00e-18\npolygon 65 (hole)          3 -3.98058e-07     -5.94e-19\npolygon 66 (hole)          3 -4.46005e-07     -6.66e-19\npolygon 67 (hole)         12 -2.05767e-05     -3.07e-17\npolygon 68 (hole)          3 -2.92851e-07     -4.37e-19\npolygon 69 (hole)          6 -7.37176e-07     -1.10e-18\npolygon 70 (hole)          4 -3.81552e-07     -5.70e-19\npolygon 71 (hole)          4 -1.67713e-06     -2.50e-18\npolygon 72 (hole)          6 -3.03661e-06     -4.53e-18\npolygon 73 (hole)         16 -1.79219e-05     -2.68e-17\npolygon 74 (hole)          4 -1.03552e-06     -1.55e-18\npolygon 75 (hole)          4 -1.01406e-06     -1.51e-18\npolygon 76 (hole)          4 -8.65300e-07     -1.29e-18\npolygon 77 (hole)          3 -5.38141e-07     -8.04e-19\npolygon 78 (hole)          4 -1.48789e-06     -2.22e-18\npolygon 79 (hole)          4 -2.04242e-06     -3.05e-18\npolygon 80 (hole)          3 -1.01252e-06     -1.51e-18\npolygon 81 (hole)          3 -1.59017e-07     -2.37e-19\npolygon 82 (hole)          4 -1.48988e-06     -2.22e-18\npolygon 83 (hole)          3 -1.48101e-07     -2.21e-19\npolygon 84 (hole)          7 -2.30688e-06     -3.44e-18\npolygon 85 (hole)         10 -9.86116e-06     -1.47e-17\npolygon 86 (hole)          6 -3.90621e-06     -5.83e-18\npolygon 87 (hole)          4 -2.01296e-07     -3.01e-19\npolygon 88 (hole)          6 -8.13898e-07     -1.22e-18\npolygon 89 (hole)          3 -4.84979e-08     -7.24e-20\npolygon 90 (hole)          4 -5.46126e-07     -8.15e-19\npolygon 91 (hole)          3 -6.40553e-07     -9.56e-19\npolygon 92 (hole)          4 -2.03670e-07     -3.04e-19\npolygon 93 (hole)          3 -1.16077e-07     -1.73e-19\npolygon 94 (hole)          4 -4.11957e-07     -6.15e-19\npolygon 95 (hole)          3 -7.00399e-08     -1.05e-19\npolygon 96 (hole)          4 -2.23188e-07     -3.33e-19\npolygon 97 (hole)          4 -3.10997e-07     -4.64e-19\npolygon 98 (hole)          6 -5.74412e-06     -8.58e-18\npolygon 99 (hole)          9 -2.19427e-05     -3.28e-17\npolygon 100 (hole)         3 -2.67563e-07     -4.00e-19\npolygon 101 (hole)         4 -1.32715e-06     -1.98e-18\npolygon 102 (hole)         6 -2.60133e-06     -3.88e-18\npolygon 103 (hole)         5 -1.22958e-05     -1.84e-17\npolygon 104 (hole)         3 -1.14982e-09     -1.72e-21\npolygon 105 (hole)         4 -2.43524e-10     -3.64e-22\npolygon 106 (hole)         3 -3.31085e-07     -4.94e-19\npolygon 107 (hole)         4 -8.01372e-07     -1.20e-18\npolygon 108 (hole)         4 -6.70371e-07     -1.00e-18\npolygon 109 (hole)         3 -4.90978e-07     -7.33e-19\npolygon 110 (hole)         4 -2.54297e-06     -3.80e-18\npolygon 111 (hole)         5 -2.38956e-06     -3.57e-18\npolygon 112 (hole)         4 -3.62129e-07     -5.41e-19\npolygon 113 (hole)         5 -9.41057e-07     -1.41e-18\npolygon 114 (hole)         3 -4.44880e-08     -6.64e-20\npolygon 115 (hole)         4 -7.71257e-07     -1.15e-18\npolygon 116 (hole)         6 -2.89370e-06     -4.32e-18\npolygon 117 (hole)         7 -1.57765e-05     -2.36e-17\npolygon 118 (hole)         4 -2.26147e-07     -3.38e-19\npolygon 119 (hole)         4 -1.37331e-06     -2.05e-18\npolygon 120 (hole)         4 -4.36370e-07     -6.52e-19\npolygon 121 (hole)         4 -3.22896e-06     -4.82e-18\npolygon 122 (hole)         4 -4.75997e-07     -7.11e-19\npolygon 123 (hole)         4 -4.38715e-07     -6.55e-19\npolygon 124 (hole)         6 -1.02899e-06     -1.54e-18\npolygon 125 (hole)         4 -1.14855e-06     -1.71e-18\npolygon 126 (hole)         3 -1.02277e-07     -1.53e-19\npolygon 127 (hole)         9 -2.87716e-06     -4.30e-18\npolygon 128 (hole)         3 -3.86621e-07     -5.77e-19\npolygon 129 (hole)         3 -1.94296e-07     -2.90e-19\npolygon 130 (hole)         7 -1.80011e-06     -2.69e-18\npolygon 131 (hole)         4 -5.37691e-07     -8.03e-19\npolygon 132 (hole)         3 -5.77240e-08     -8.62e-20\npolygon 133 (hole)         8 -3.01954e-06     -4.51e-18\npolygon 134 (hole)         6 -6.67140e-06     -9.96e-18\npolygon 135 (hole)         4 -2.66412e-07     -3.98e-19\npolygon 136 (hole)         3 -1.40064e-07     -2.09e-19\npolygon 137 (hole)         4 -3.40782e-07     -5.09e-19\npolygon 138 (hole)         6 -6.46573e-06     -9.65e-18\npolygon 139 (hole)         4 -2.99274e-07     -4.47e-19\npolygon 140 (hole)         3 -5.55465e-10     -8.29e-22\npolygon 141 (hole)         3 -1.77354e-07     -2.65e-19\npolygon 142 (hole)         3 -7.87909e-08     -1.18e-19\npolygon 143 (hole)         3 -1.69698e-07     -2.53e-19\npolygon 144 (hole)         7 -2.48946e-06     -3.72e-18\npolygon 145 (hole)         3 -1.31588e-12     -1.96e-24\npolygon 146 (hole)         4 -3.22413e-07     -4.81e-19\npolygon 147 (hole)         7 -4.93484e-06     -7.37e-18\npolygon 148 (hole)         3 -1.58436e-07     -2.37e-19\npolygon 149 (hole)         4 -3.15509e-08     -4.71e-20\npolygon 150 (hole)         3 -9.84638e-07     -1.47e-18\npolygon 151 (hole)         4 -1.67312e-07     -2.50e-19\npolygon 152 (hole)         3 -1.12101e-07     -1.67e-19\npolygon 153               43  7.32477e+06      1.09e-05\npolygon 154 (hole)         5 -5.48711e-06     -8.19e-18\npolygon 155 (hole)         3 -1.30703e-06     -1.95e-18\npolygon 156 (hole)         3 -3.44039e-07     -5.14e-19\npolygon 157 (hole)         4 -1.67760e-06     -2.50e-18\npolygon 158 (hole)         3 -6.43116e-07     -9.60e-19\npolygon 159 (hole)         3 -3.47614e-08     -5.19e-20\npolygon 160 (hole)         3 -1.66250e-08     -2.48e-20\npolygon 161 (hole)         4 -2.13921e-06     -3.19e-18\npolygon 162 (hole)         4 -4.27151e-07     -6.38e-19\npolygon 163 (hole)         7 -1.19424e-06     -1.78e-18\npolygon 164 (hole)         4 -7.28922e-07     -1.09e-18\npolygon 165 (hole)         4 -2.02465e-06     -3.02e-18\npolygon 166 (hole)         3 -4.21171e-08     -6.29e-20\npolygon 167 (hole)         3 -1.12224e-08     -1.68e-20\npolygon 168              103  1.86991e+07      2.79e-05\npolygon 169 (hole)         3 -2.29459e-07     -3.43e-19\npolygon 170 (hole)         4 -2.38485e-07     -3.56e-19\npolygon 171 (hole)         6 -3.65340e-07     -5.46e-19\npolygon 172 (hole)         4 -1.71122e-07     -2.56e-19\npolygon 173 (hole)         5 -2.87414e-06     -4.29e-18\npolygon 174 (hole)         3 -2.23174e-08     -3.33e-20\npolygon 175 (hole)         3 -2.07226e-08     -3.09e-20\npolygon 176 (hole)         3 -4.70001e-09     -7.02e-21\npolygon 177               37  9.32316e+06      1.39e-05\npolygon 178 (hole)         4 -5.81687e-07     -8.69e-19\npolygon 179                3  0.00000e+00      0.00e+00\npolygon 180 (hole)         8 -3.12973e-06     -4.67e-18\npolygon 181 (hole)         4 -2.57791e-08     -3.85e-20\npolygon 182 (hole)         3 -2.00116e-06     -2.99e-18\npolygon 183 (hole)         4 -1.16159e-06     -1.73e-18\npolygon 184 (hole)         3 -1.24415e-09     -1.86e-21\npolygon 185 (hole)         4 -7.76199e-07     -1.16e-18\npolygon 186 (hole)         4 -8.04350e-07     -1.20e-18\npolygon 187              371  2.43869e+08      3.64e-04\npolygon 188              297  2.84905e+08      4.25e-04\npolygon 189 (hole)         3 -3.45320e-06     -5.16e-18\npolygon 190 (hole)         3 -9.76936e-08     -1.46e-19\npolygon 191 (hole)         4 -3.63549e-07     -5.43e-19\npolygon 192 (hole)         4 -3.27706e-07     -4.89e-19\npolygon 193               33  1.68222e+07      2.51e-05\npolygon 194               33  4.47665e+05      6.68e-07\npolygon 195               19  1.34593e+05      2.01e-07\npolygon 196               39  1.36327e+06      2.04e-06\npolygon 197              137  1.55547e+08      2.32e-04\npolygon 198 (hole)         3 -4.67770e-09     -6.98e-21\npolygon 199 (hole)         3 -8.08618e-08     -1.21e-19\npolygon 200 (hole)         4 -3.87011e-06     -5.78e-18\npolygon 201               36  8.76479e+06      1.31e-05\npolygon 202 (hole)         4 -4.56275e-07     -6.81e-19\npolygon 203               79  3.08116e+07      4.60e-05\npolygon 204 (hole)         4 -5.65074e-07     -8.44e-19\npolygon 205              388  2.25271e+08      3.36e-04\npolygon 206 (hole)         4 -3.42368e-06     -5.11e-18\npolygon 207 (hole)         3 -7.83497e-07     -1.17e-18\npolygon 208 (hole)         3 -4.76203e-09     -7.11e-21\npolygon 209              316  7.78512e+07      1.16e-04\npolygon 210               13  1.09564e+05      1.64e-07\npolygon 211               18  3.49727e+05      5.22e-07\npolygon 212               31  1.23017e+06      1.84e-06\npolygon 213               16  6.55537e+05      9.79e-07\npolygon 214               24  8.49487e+05      1.27e-06\npolygon 215 (hole)         5 -3.46963e-07     -5.18e-19\npolygon 216 (hole)         4 -6.69787e-07     -1.00e-18\npolygon 217 (hole)         4 -1.41603e-07     -2.11e-19\npolygon 218               30  2.54436e+06      3.80e-06\npolygon 219              336  4.15806e+07      6.21e-05\npolygon 220 (hole)         6 -2.04487e-06     -3.05e-18\npolygon 221 (hole)         4 -2.93932e-07     -4.39e-19\npolygon 222 (hole)         3 -3.03547e-08     -4.53e-20\npolygon 223              330  1.69190e+08      2.53e-04\npolygon 224               47  1.08035e+07      1.61e-05\npolygon 225               39  4.94369e+06      7.38e-06\npolygon 226 (hole)         4 -9.31715e-07     -1.39e-18\npolygon 227 (hole)         3 -1.61548e-12     -2.41e-24\npolygon 228 (hole)         3 -1.07143e-07     -1.60e-19\npolygon 229 (hole)         4 -6.10340e-07     -9.11e-19\npolygon 230               23  2.72438e+06      4.07e-06\npolygon 231               33  5.70263e+06      8.52e-06\npolygon 232 (hole)         4 -1.12608e-07     -1.68e-19\npolygon 233 (hole)         4 -8.85831e-08     -1.32e-19\npolygon 234               90  4.20329e+07      6.28e-05\npolygon 235               28  1.35341e+06      2.02e-06\npolygon 236              225  1.08816e+08      1.62e-04\npolygon 237               33  9.16670e+06      1.37e-05\npolygon 238 (hole)         3 -9.13049e-09     -1.36e-20\npolygon 239 (hole)         4 -4.56911e-07     -6.82e-19\npolygon 240              192  7.02655e+07      1.05e-04\npolygon 241               49  1.49245e+07      2.23e-05\npolygon 242               98  1.79076e+07      2.67e-05\npolygon 243 (hole)         4 -2.18459e-09     -3.26e-21\npolygon 244 (hole)         4 -1.36504e-06     -2.04e-18\npolygon 245 (hole)         5 -2.42563e-06     -3.62e-18\npolygon 246                6  6.37552e+05      9.52e-07\npolygon 247 (hole)         3 -2.79397e-08     -4.17e-20\npolygon 248               49  1.01233e+07      1.51e-05\npolygon 249 (hole)         3 -1.17677e-06     -1.76e-18\npolygon 250              141  3.43053e+07      5.12e-05\npolygon 251 (hole)         6 -3.18516e-06     -4.76e-18\npolygon 252              195  3.24345e+07      4.84e-05\npolygon 253               51  3.38313e+06      5.05e-06\npolygon 254               34  2.01400e+06      3.01e-06\npolygon 255 (hole)         4 -3.14136e-07     -4.69e-19\npolygon 256 (hole)         3 -4.27796e-07     -6.39e-19\npolygon 257               13  2.50435e+05      3.74e-07\npolygon 258                9  9.04824e+04      1.35e-07\npolygon 259               34  4.61794e+06      6.90e-06\npolygon 260               17  4.58200e+05      6.84e-07\npolygon 261               15  2.74776e+05      4.10e-07\npolygon 262 (hole)         4 -2.17893e-06     -3.25e-18\npolygon 263 (hole)         5 -7.02326e-06     -1.05e-17\npolygon 264               21  5.34978e+05      7.99e-07\npolygon 265               19  4.55347e+05      6.80e-07\npolygon 266 (hole)         6 -4.09510e-06     -6.11e-18\npolygon 267               71  3.42557e+06      5.11e-06\npolygon 268 (hole)         3 -7.38399e-08     -1.10e-19\npolygon 269               24  1.32420e+06      1.98e-06\npolygon 270               15  3.26247e+05      4.87e-07\npolygon 271               39  8.65790e+05      1.29e-06\npolygon 272               43  1.41627e+06      2.11e-06\npolygon 273               24  7.52068e+05      1.12e-06\npolygon 274               96  1.32101e+07      1.97e-05\npolygon 275               38  1.18003e+06      1.76e-06\npolygon 276              429  5.99087e+08      8.95e-04\npolygon 277               13  1.74105e+05      2.60e-07\npolygon 278               19  2.52336e+05      3.77e-07\npolygon 279               16  3.11495e+05      4.65e-07\npolygon 280               11  9.11047e+04      1.36e-07\npolygon 281               12  2.13470e+05      3.19e-07\npolygon 282               17  5.82663e+05      8.70e-07\npolygon 283 (hole)         4 -1.89536e-06     -2.83e-18\npolygon 284               56  2.60440e+07      3.89e-05\npolygon 285              107  4.91389e+06      7.34e-06\npolygon 286 (hole)         7 -2.04270e-06     -3.05e-18\npolygon 287               51  2.79076e+06      4.17e-06\npolygon 288 (hole)         5 -1.27010e-06     -1.90e-18\npolygon 289               89  1.61156e+07      2.41e-05\npolygon 290 (hole)         4 -2.08446e-08     -3.11e-20\npolygon 291 (hole)         3 -1.60149e-08     -2.39e-20\npolygon 292               28  1.30499e+06      1.95e-06\npolygon 293 (hole)         4 -5.63014e-07     -8.41e-19\npolygon 294               11  1.27616e+05      1.91e-07\npolygon 295               34  2.54199e+06      3.80e-06\npolygon 296               27  1.72476e+06      2.58e-06\npolygon 297 (hole)         3 -2.72458e-09     -4.07e-21\npolygon 298               37  2.01882e+06      3.01e-06\npolygon 299 (hole)         4 -5.70504e-07     -8.52e-19\npolygon 300               23  1.65571e+06      2.47e-06\npolygon 301               33  3.05816e+06      4.57e-06\npolygon 302 (hole)         4 -8.37974e-07     -1.25e-18\npolygon 303 (hole)         4 -2.08298e-07     -3.11e-19\npolygon 304 (hole)         4 -2.05163e-07     -3.06e-19\npolygon 305               14  3.23153e+05      4.83e-07\npolygon 306               91  1.51209e+07      2.26e-05\npolygon 307               12  2.42901e+05      3.63e-07\npolygon 308 (hole)         3 -7.12933e-09     -1.06e-20\npolygon 309 (hole)         4 -2.12296e-09     -3.17e-21\npolygon 310 (hole)         5 -6.51128e-07     -9.72e-19\npolygon 311               11  1.37889e+05      2.06e-07\npolygon 312 (hole)         4 -7.83312e-07     -1.17e-18\npolygon 313 (hole)         4 -2.15527e-07     -3.22e-19\npolygon 314 (hole)         3 -2.24169e-08     -3.35e-20\npolygon 315               58  2.29751e+07      3.43e-05\npolygon 316               48  5.10265e+06      7.62e-06\npolygon 317               22  1.30706e+06      1.95e-06\npolygon 318 (hole)         4 -2.64848e-06     -3.95e-18\npolygon 319               15  3.49480e+05      5.22e-07\npolygon 320 (hole)        15 -2.06284e-05     -3.08e-17\npolygon 321               17  1.57570e+06      2.35e-06\npolygon 322 (hole)         4 -4.42575e-07     -6.61e-19\npolygon 323 (hole)         4 -5.27325e-06     -7.87e-18\npolygon 324 (hole)         6 -6.26349e-06     -9.35e-18\npolygon 325 (hole)         4 -6.27134e-06     -9.36e-18\npolygon 326 (hole)         4 -3.59342e-06     -5.37e-18\npolygon 327 (hole)         4 -5.02133e-08     -7.50e-20\npolygon 328 (hole)         3 -7.53308e-09     -1.12e-20\npolygon 329 (hole)         4 -2.64937e-07     -3.96e-19\npolygon 330 (hole)        10 -5.93010e-06     -8.85e-18\npolygon 331 (hole)         3 -3.39743e-06     -5.07e-18\npolygon 332 (hole)         4 -3.71039e-07     -5.54e-19\npolygon 333 (hole)        21 -6.24740e-06     -9.33e-18\npolygon 334 (hole)         3 -6.29672e-07     -9.40e-19\npolygon 335 (hole)         4 -1.64658e-07     -2.46e-19\npolygon 336 (hole)         3 -2.26368e-10     -3.38e-22\npolygon 337 (hole)         3 -7.64382e-10     -1.14e-21\npolygon 338 (hole)         3 -3.82634e-08     -5.71e-20\npolygon 339               34  3.68725e+06      5.51e-06\npolygon 340 (hole)         3 -2.04657e-07     -3.06e-19\npolygon 341 (hole)         4 -4.60327e-07     -6.87e-19\npolygon 342 (hole)         3 -3.46305e-07     -5.17e-19\npolygon 343 (hole)         3 -2.24522e-07     -3.35e-19\npolygon 344 (hole)         4 -3.10471e-07     -4.64e-19\npolygon 345 (hole)         3 -1.29881e-08     -1.94e-20\npolygon 346               34  5.21904e+06      7.79e-06\npolygon 347 (hole)         4 -8.16830e-07     -1.22e-18\npolygon 348 (hole)         4 -5.25346e-12     -7.84e-24\npolygon 349 (hole)         4 -1.34474e-07     -2.01e-19\npolygon 350 (hole)         4 -7.58535e-07     -1.13e-18\npolygon 351               24  5.42734e+06      8.10e-06\npolygon 352 (hole)         4 -3.70207e-07     -5.53e-19\npolygon 353 (hole)         4 -4.44568e-07     -6.64e-19\npolygon 354 (hole)         4 -1.37458e-06     -2.05e-18\npolygon 355 (hole)         4 -3.82934e-06     -5.72e-18\npolygon 356 (hole)         3 -1.56625e-06     -2.34e-18\npolygon 357 (hole)         4 -4.24394e-08     -6.34e-20\npolygon 358 (hole)         4 -7.88438e-08     -1.18e-19\npolygon 359 (hole)         5 -6.25364e-07     -9.34e-19\npolygon 360 (hole)         4 -4.68732e-09     -7.00e-21\npolygon 361 (hole)         3 -3.01326e-07     -4.50e-19\npolygon 362 (hole)         3 -2.73646e-08     -4.09e-20\npolygon 363 (hole)         4 -5.74129e-07     -8.57e-19\npolygon 364              422  4.66497e+08      6.97e-04\npolygon 365 (hole)         5 -1.31979e-06     -1.97e-18\npolygon 366 (hole)         3 -5.34019e-10     -7.97e-22\npolygon 367 (hole)         3 -1.99125e-09     -2.97e-21\npolygon 368 (hole)         3 -1.39870e-07     -2.09e-19\npolygon 369 (hole)         3 -1.07121e-06     -1.60e-18\npolygon 370 (hole)         3 -4.31047e-07     -6.44e-19\npolygon 371 (hole)         4 -3.49431e-07     -5.22e-19\npolygon 372              142  2.98767e+07      4.46e-05\npolygon 373 (hole)         3 -2.44926e-08     -3.66e-20\npolygon 374 (hole)         3 -3.19009e-08     -4.76e-20\npolygon 375 (hole)         3 -2.59781e-08     -3.88e-20\npolygon 376 (hole)         3 -1.22448e-07     -1.83e-19\npolygon 377              132  2.18707e+07      3.27e-05\npolygon 378 (hole)         3 -3.60761e-07     -5.39e-19\npolygon 379 (hole)         3 -2.37207e-08     -3.54e-20\npolygon 380 (hole)         4 -8.71149e-07     -1.30e-18\npolygon 381 (hole)         4 -1.81852e-06     -2.72e-18\npolygon 382 (hole)         3 -9.47568e-09     -1.41e-20\npolygon 383 (hole)         4 -1.05268e-06     -1.57e-18\npolygon 384 (hole)         9 -8.92711e-06     -1.33e-17\npolygon 385 (hole)         4 -1.59532e-06     -2.38e-18\npolygon 386 (hole)         5 -8.69411e-07     -1.30e-18\npolygon 387 (hole)         6 -5.29194e-06     -7.90e-18\npolygon 388 (hole)        12 -7.93669e-06     -1.19e-17\npolygon 389 (hole)         3 -3.65933e-08     -5.46e-20\npolygon 390               19  5.88230e+05      8.78e-07\npolygon 391 (hole)         3 -6.88046e-08     -1.03e-19\npolygon 392               22  1.77611e+06      2.65e-06\npolygon 393 (hole)         4 -6.42929e-04     -9.60e-16\npolygon 394               40  4.09952e+06      6.12e-06\npolygon 395 (hole)         3 -2.52078e-03     -3.76e-15\npolygon 396 (hole)         3 -1.14757e-07     -1.71e-19\npolygon 397               28  1.47685e+06      2.21e-06\npolygon 398 (hole)         4 -3.14458e-08     -4.70e-20\npolygon 399 (hole)         4 -8.02831e-08     -1.20e-19\npolygon 400 (hole)         8 -8.93463e-02     -1.33e-13\npolygon 401 (hole)         3 -6.85896e-11     -1.02e-22\npolygon 402 (hole)         4 -1.16516e-07     -1.74e-19\npolygon 403               67  9.99685e+06      1.49e-05\npolygon 404 (hole)         6 -3.37319e-06     -5.04e-18\npolygon 405 (hole)         7 -9.81865e-07     -1.47e-18\npolygon 406 (hole)         3 -6.88049e-10     -1.03e-21\npolygon 407 (hole)         3 -3.18016e-08     -4.75e-20\npolygon 408 (hole)         8 -6.36344e-02     -9.50e-14\npolygon 409 (hole)         6 -7.57977e-02     -1.13e-13\npolygon 410 (hole)         4 -5.06714e-07     -7.57e-19\npolygon 411 (hole)         7 -5.87793e-06     -8.78e-18\npolygon 412 (hole)        10 -2.86267e-06     -4.27e-18\npolygon 413 (hole)         7 -1.06387e-06     -1.59e-18\npolygon 414 (hole)         3 -4.31917e-06     -6.45e-18\npolygon 415 (hole)         8 -1.08149e-06     -1.61e-18\npolygon 416 (hole)         3 -1.00264e-08     -1.50e-20\npolygon 417 (hole)        10 -2.61217e-06     -3.90e-18\npolygon 418 (hole)         6 -1.06953e-06     -1.60e-18\npolygon 419 (hole)         4 -1.90065e-07     -2.84e-19\npolygon 420 (hole)         4 -2.24224e-02     -3.35e-14\npolygon 421 (hole)         6 -1.09700e-07     -1.64e-19\npolygon 422 (hole)        11 -2.01202e-06     -3.00e-18\npolygon 423 (hole)         5 -9.35663e-02     -1.40e-13\npolygon 424 (hole)         4 -5.24917e-08     -7.84e-20\npolygon 425 (hole)         7 -1.21076e-06     -1.81e-18\npolygon 426 (hole)        13 -1.39251e-01     -2.08e-13\npolygon 427 (hole)         7 -1.46533e-01     -2.19e-13\npolygon 428 (hole)         6 -7.59071e-02     -1.13e-13\npolygon 429 (hole)         7 -5.15914e-03     -7.70e-15\npolygon 430 (hole)        10 -4.09465e-02     -6.11e-14\npolygon 431 (hole)        21 -1.86624e-01     -2.79e-13\npolygon 432 (hole)         3 -1.69684e-02     -2.53e-14\npolygon 433 (hole)         8 -4.08363e-02     -6.10e-14\npolygon 434 (hole)         3 -1.73631e-02     -2.59e-14\npolygon 435 (hole)         5 -1.41820e-02     -2.12e-14\npolygon 436 (hole)        10 -6.15227e-02     -9.19e-14\npolygon 437 (hole)         8 -2.90782e-02     -4.34e-14\npolygon 438 (hole)         8 -6.15579e-02     -9.19e-14\npolygon 439 (hole)         4 -7.46409e-04     -1.11e-15\npolygon 440 (hole)         4 -1.05431e-02     -1.57e-14\npolygon 441 (hole)         7 -1.72082e-06     -2.57e-18\npolygon 442 (hole)         7 -2.49218e-06     -3.72e-18\npolygon 443 (hole)         4 -8.25150e-03     -1.23e-14\npolygon 444 (hole)         3 -2.15876e-07     -3.22e-19\npolygon 445 (hole)         6 -7.79825e-07     -1.16e-18\npolygon 446 (hole)         3 -2.59990e-02     -3.88e-14\npolygon 447 (hole)         4 -1.96870e-02     -2.94e-14\npolygon 448 (hole)         3 -9.09758e-03     -1.36e-14\npolygon 449 (hole)         3 -4.01475e-05     -5.99e-17\npolygon 450 (hole)         9 -2.41806e-02     -3.61e-14\npolygon 451 (hole)         4 -4.08101e-08     -6.09e-20\npolygon 452                3  0.00000e+00      0.00e+00\npolygon 453 (hole)         7 -5.73306e-02     -8.56e-14\npolygon 454 (hole)         4 -4.26735e-02     -6.37e-14\npolygon 455 (hole)         3 -2.21993e-08     -3.31e-20\npolygon 456 (hole)         5 -8.18708e-07     -1.22e-18\npolygon 457 (hole)         7 -1.69748e-02     -2.53e-14\npolygon 458 (hole)         3 -4.66468e-08     -6.97e-20\npolygon 459 (hole)         3 -1.05617e-02     -1.58e-14\npolygon 460 (hole)         4 -1.05444e-06     -1.57e-18\npolygon 461 (hole)         4 -1.34632e-07     -2.01e-19\npolygon 462 (hole)         4 -1.39750e-08     -2.09e-20\npolygon 463 (hole)         4 -3.58077e-08     -5.35e-20\npolygon 464 (hole)         5 -4.57466e-06     -6.83e-18\npolygon 465               25  4.82266e+05      7.20e-07\npolygon 466 (hole)         4 -2.04127e-07     -3.05e-19\npolygon 467 (hole)         6 -3.72405e-02     -5.56e-14\npolygon 468 (hole)         3 -3.37970e-07     -5.05e-19\npolygon 469 (hole)         7 -3.08334e-02     -4.60e-14\npolygon 470 (hole)         4 -5.73988e-08     -8.57e-20\npolygon 471 (hole)         4 -6.69856e-03     -1.00e-14\npolygon 472 (hole)         4 -1.15937e-02     -1.73e-14\npolygon 473 (hole)         4 -6.51952e-07     -9.73e-19\npolygon 474 (hole)         4 -3.11046e-03     -4.64e-15\npolygon 475 (hole)        12 -1.45689e-01     -2.18e-13\npolygon 476 (hole)         6 -6.22064e-07     -9.29e-19\npolygon 477 (hole)         4 -1.41734e-07     -2.12e-19\npolygon 478 (hole)         3 -6.12975e-07     -9.15e-19\npolygon 479 (hole)         8 -6.15169e-06     -9.19e-18\npolygon 480 (hole)         4 -5.64800e-02     -8.43e-14\npolygon 481 (hole)         3 -1.11189e-02     -1.66e-14\npolygon 482 (hole)         3 -1.66641e-07     -2.49e-19\npolygon 483 (hole)         4 -2.07175e-09     -3.09e-21\npolygon 484 (hole)         3 -4.92109e-08     -7.35e-20\npolygon 485 (hole)         4 -2.60006e-02     -3.88e-14\npolygon 486 (hole)         3 -1.01395e-11     -1.51e-23\npolygon 487 (hole)         4 -2.21624e-10     -3.31e-22\npolygon 488 (hole)         4 -1.05862e-07     -1.58e-19\npolygon 489 (hole)         3 -1.17217e-11     -1.75e-23\npolygon 490 (hole)        28 -1.79082e-01     -2.67e-13\npolygon 491 (hole)         4 -1.58212e-04     -2.36e-16\npolygon 492 (hole)         4 -3.64666e-07     -5.45e-19\npolygon 493 (hole)         4 -9.07721e-06     -1.36e-17\npolygon 494 (hole)         4 -6.73612e-03     -1.01e-14\npolygon 495               16  4.14093e+05      6.18e-07\npolygon 496 (hole)         4 -5.09041e-07     -7.60e-19\npolygon 497 (hole)         4 -1.30783e-07     -1.95e-19\npolygon 498 (hole)         4 -2.14069e-09     -3.20e-21\npolygon 499 (hole)         4 -1.82795e-08     -2.73e-20\npolygon 500 (hole)         4 -5.36782e-03     -8.02e-15\npolygon 501 (hole)         6 -1.51450e-02     -2.26e-14\npolygon 502 (hole)         4 -4.38078e-03     -6.54e-15\npolygon 503 (hole)         4 -1.36409e-02     -2.04e-14\npolygon 504 (hole)         4 -3.84271e-02     -5.74e-14\npolygon 505 (hole)         3 -7.56650e-03     -1.13e-14\npolygon 506 (hole)         3 -3.20234e-07     -4.78e-19\npolygon 507 (hole)         4 -8.04110e-03     -1.20e-14\npolygon 508 (hole)         6 -2.53481e-02     -3.78e-14\npolygon 509 (hole)         3 -4.18749e-08     -6.25e-20\npolygon 510 (hole)         4 -1.15603e-02     -1.73e-14\npolygon 511 (hole)         3 -2.16578e-03     -3.23e-15\npolygon 512 (hole)         4 -3.80479e-07     -5.68e-19\npolygon 513 (hole)         3 -4.76364e-08     -7.11e-20\npolygon 514 (hole)         4 -4.65116e-07     -6.94e-19\npolygon 515 (hole)         3 -1.86664e-07     -2.79e-19\npolygon 516 (hole)         3 -2.87542e-03     -4.29e-15\npolygon 517 (hole)         5 -2.50764e-08     -3.74e-20\npolygon 518 (hole)         6 -7.90541e-07     -1.18e-18\npolygon 519 (hole)         4 -5.42478e-02     -8.10e-14\npolygon 520 (hole)         3 -4.75090e-03     -7.09e-15\npolygon 521 (hole)         4 -3.45047e-02     -5.15e-14\npolygon 522 (hole)         6 -7.20472e-03     -1.08e-14\npolygon 523 (hole)         3 -3.04805e-12     -4.55e-24\npolygon 524 (hole)         4 -8.16292e-08     -1.22e-19\npolygon 525 (hole)         6 -7.71308e-07     -1.15e-18\npolygon 526 (hole)         4 -2.01300e-02     -3.01e-14\npolygon 527 (hole)         4 -1.06474e-07     -1.59e-19\npolygon 528 (hole)         6 -1.34176e-06     -2.00e-18\npolygon 529 (hole)         6 -1.08555e-07     -1.62e-19\npolygon 530 (hole)         3 -1.22081e-07     -1.82e-19\npolygon 531 (hole)         7 -1.14683e-06     -1.71e-18\npolygon 532 (hole)         3 -4.64709e-07     -6.94e-19\npolygon 533 (hole)         4 -7.86243e-07     -1.17e-18\npolygon 534 (hole)         9 -7.99880e-02     -1.19e-13\npolygon 535 (hole)         3 -1.61996e-07     -2.42e-19\npolygon 536 (hole)         6 -1.02196e-07     -1.53e-19\npolygon 537 (hole)         4 -1.30938e-03     -1.96e-15\npolygon 538 (hole)         4 -1.42378e-11     -2.13e-23\npolygon 539 (hole)         9 -6.93637e-06     -1.04e-17\npolygon 540 (hole)         9 -1.92423e-02     -2.87e-14\npolygon 541 (hole)         4 -1.00754e-06     -1.50e-18\npolygon 542 (hole)         3 -2.44523e-07     -3.65e-19\npolygon 543 (hole)         4 -2.73889e-02     -4.09e-14\npolygon 544 (hole)         4 -1.09638e-07     -1.64e-19\npolygon 545 (hole)         6 -2.07150e-06     -3.09e-18\npolygon 546 (hole)         5 -3.09883e-07     -4.63e-19\npolygon 547 (hole)         3 -1.54562e-06     -2.31e-18\npolygon 548 (hole)         3 -1.15109e-02     -1.72e-14\npolygon 549 (hole)         4 -3.57695e-08     -5.34e-20\npolygon 550 (hole)         5 -1.82216e-06     -2.72e-18\npolygon 551 (hole)         4 -8.77810e-02     -1.31e-13\npolygon 552 (hole)         7 -2.49873e-06     -3.73e-18\npolygon 553 (hole)         3 -7.17116e-07     -1.07e-18\npolygon 554               26  3.03928e+06      4.54e-06\npolygon 555 (hole)         6 -8.99139e-02     -1.34e-13\npolygon 556 (hole)         6 -1.07810e-06     -1.61e-18\npolygon 557 (hole)         4 -4.49324e-07     -6.71e-19\npolygon 558 (hole)         4 -1.63537e-06     -2.44e-18\npolygon 559 (hole)         4 -1.66983e-08     -2.49e-20\npolygon 560 (hole)         3 -1.20354e-07     -1.80e-19\npolygon 561 (hole)         6 -6.18153e-06     -9.23e-18\npolygon 562 (hole)         4 -3.03787e-07     -4.54e-19\npolygon 563 (hole)         6 -1.02159e-06     -1.53e-18\npolygon 564 (hole)         8 -2.04339e-06     -3.05e-18\npolygon 565 (hole)         7 -1.69870e-01     -2.54e-13\npolygon 566 (hole)         8 -7.11283e-06     -1.06e-17\npolygon 567 (hole)        14 -3.82802e-06     -5.72e-18\npolygon 568 (hole)         4 -2.35641e-06     -3.52e-18\npolygon 569 (hole)         3 -1.51419e-07     -2.26e-19\npolygon 570 (hole)        11 -1.85737e-01     -2.77e-13\npolygon 571 (hole)         6 -2.18529e-06     -3.26e-18\npolygon 572 (hole)        11 -4.86346e-06     -7.26e-18\npolygon 573 (hole)         4 -3.83301e-07     -5.72e-19\npolygon 574 (hole)        32 -8.16597e-01     -1.22e-12\npolygon 575 (hole)         3 -2.74036e-07     -4.09e-19\npolygon 576 (hole)         4 -1.25077e-09     -1.87e-21\npolygon 577 (hole)         3 -3.99854e-08     -5.97e-20\npolygon 578 (hole)         4 -2.67722e-13     -4.00e-25\npolygon 579 (hole)         4 -8.73792e-08     -1.30e-19\npolygon 580 (hole)         3 -7.28025e-12     -1.09e-23\npolygon 581 (hole)         4 -1.73159e-07     -2.59e-19\npolygon 582 (hole)         3 -1.77999e-08     -2.66e-20\npolygon 583 (hole)         4 -2.22329e-08     -3.32e-20\npolygon 584 (hole)         3 -1.57852e-07     -2.36e-19\npolygon 585 (hole)         3 -2.88032e-09     -4.30e-21\npolygon 586 (hole)         3 -1.07568e-06     -1.61e-18\npolygon 587 (hole)         7 -6.59191e-02     -9.84e-14\npolygon 588 (hole)         4 -1.58960e-07     -2.37e-19\npolygon 589 (hole)         4 -2.73739e-07     -4.09e-19\npolygon 590 (hole)         3 -1.48932e-02     -2.22e-14\npolygon 591 (hole)        13 -3.56626e-01     -5.33e-13\npolygon 592 (hole)         4 -3.50738e-08     -5.24e-20\npolygon 593 (hole)         6 -3.99329e-06     -5.96e-18\npolygon 594 (hole)         8 -4.35683e-06     -6.51e-18\npolygon 595 (hole)         3 -1.64307e-06     -2.45e-18\npolygon 596 (hole)         3 -2.09234e-07     -3.12e-19\npolygon 597 (hole)         4 -1.29603e-07     -1.94e-19\npolygon 598               14  1.53563e+05      2.29e-07\npolygon 599 (hole)         6 -6.03221e-06     -9.01e-18\npolygon 600 (hole)        15 -2.31620e-01     -3.46e-13\npolygon 601 (hole)         4 -1.38723e-08     -2.07e-20\npolygon 602 (hole)         5 -1.30592e-06     -1.95e-18\npolygon 603 (hole)         4 -4.22857e-07     -6.31e-19\npolygon 604 (hole)         3 -4.27362e-08     -6.38e-20\npolygon 605 (hole)         4 -9.72694e-08     -1.45e-19\npolygon 606 (hole)         7 -1.59277e-06     -2.38e-18\npolygon 607 (hole)         4 -3.30055e-07     -4.93e-19\npolygon 608 (hole)         3 -2.27202e-11     -3.39e-23\npolygon 609 (hole)         6 -1.63424e-06     -2.44e-18\npolygon 610 (hole)         7 -5.32246e-06     -7.95e-18\npolygon 611 (hole)         7 -3.46670e-02     -5.18e-14\npolygon 612 (hole)         6 -1.14747e-06     -1.71e-18\npolygon 613 (hole)         3 -6.96187e-12     -1.04e-23\npolygon 614 (hole)         5 -1.22481e-06     -1.83e-18\npolygon 615 (hole)         7 -6.56975e-06     -9.81e-18\npolygon 616 (hole)        11 -3.75831e-06     -5.61e-18\npolygon 617 (hole)         9 -1.47233e-06     -2.20e-18\npolygon 618 (hole)         9 -4.22533e-06     -6.31e-18\npolygon 619 (hole)        13 -1.40633e-02     -2.10e-14\npolygon 620 (hole)        11 -2.28017e-06     -3.40e-18\npolygon 621 (hole)         4 -4.48255e-07     -6.69e-19\npolygon 622 (hole)         3 -9.77849e-09     -1.46e-20\npolygon 623 (hole)         4 -4.47668e-07     -6.68e-19\npolygon 624 (hole)         6 -2.76240e-02     -4.12e-14\npolygon 625 (hole)         3 -3.74154e-02     -5.59e-14\npolygon 626 (hole)         3 -1.16808e-02     -1.74e-14\npolygon 627 (hole)        10 -4.10705e-03     -6.13e-15\npolygon 628 (hole)        10 -1.69077e-06     -2.52e-18\npolygon 629 (hole)         3 -2.87094e-08     -4.29e-20\npolygon 630 (hole)         3 -3.26602e-08     -4.88e-20\npolygon 631 (hole)         3 -1.55568e-07     -2.32e-19\npolygon 632 (hole)         4 -9.39130e-07     -1.40e-18\npolygon 633 (hole)         4 -7.90017e-02     -1.18e-13\npolygon 634 (hole)         3 -1.07902e-03     -1.61e-15\npolygon 635 (hole)         3 -8.74114e-04     -1.31e-15\npolygon 636 (hole)         4 -4.24113e-08     -6.33e-20\npolygon 637 (hole)         5 -1.41525e-06     -2.11e-18\npolygon 638 (hole)         4 -1.16350e-06     -1.74e-18\npolygon 639 (hole)         3 -6.97838e-08     -1.04e-19\npolygon 640 (hole)        10 -5.59537e-02     -8.35e-14\npolygon 641 (hole)         4 -1.48865e-08     -2.22e-20\npolygon 642 (hole)         6 -6.68506e-07     -9.98e-19\npolygon 643 (hole)         3 -2.30992e-08     -3.45e-20\npolygon 644 (hole)         5 -4.30820e-07     -6.43e-19\npolygon 645 (hole)         4 -4.50814e-08     -6.73e-20\npolygon 646 (hole)         5 -1.83919e-07     -2.75e-19\npolygon 647 (hole)         8 -9.78938e-07     -1.46e-18\npolygon 648               19  5.08538e+05      7.59e-07\npolygon 649 (hole)         6 -1.54713e-06     -2.31e-18\npolygon 650 (hole)         4 -1.45573e-02     -2.17e-14\npolygon 651               16  1.80565e+05      2.70e-07\npolygon 652               26  9.75091e+05      1.46e-06\npolygon 653 (hole)         4 -1.26313e-06     -1.89e-18\npolygon 654 (hole)         4 -1.90718e-03     -2.85e-15\npolygon 655 (hole)         4 -1.07233e-07     -1.60e-19\npolygon 656 (hole)         3 -7.26183e-03     -1.08e-14\npolygon 657 (hole)         3 -2.76213e-10     -4.12e-22\npolygon 658 (hole)         3 -2.80771e-02     -4.19e-14\npolygon 659 (hole)         7 -5.31797e-03     -7.94e-15\npolygon 660 (hole)         5 -4.51363e-09     -6.74e-21\npolygon 661 (hole)         4 -3.64153e-07     -5.44e-19\npolygon 662 (hole)         4 -1.88745e-02     -2.82e-14\npolygon 663 (hole)         4 -1.01723e-07     -1.52e-19\npolygon 664 (hole)         3 -1.45605e-02     -2.17e-14\npolygon 665 (hole)         6 -2.86011e-06     -4.27e-18\npolygon 666 (hole)         3 -2.28810e-02     -3.42e-14\npolygon 667 (hole)         4 -9.08794e-08     -1.36e-19\npolygon 668 (hole)         5 -1.72617e-02     -2.58e-14\npolygon 669 (hole)         3 -4.96859e-03     -7.42e-15\npolygon 670 (hole)         4 -1.85807e-02     -2.77e-14\npolygon 671 (hole)         4 -8.61249e-03     -1.29e-14\npolygon 672 (hole)         3 -1.66645e-03     -2.49e-15\npolygon 673 (hole)         7 -1.66808e-02     -2.49e-14\npolygon 674 (hole)         4 -1.73584e-06     -2.59e-18\npolygon 675 (hole)         3 -8.26479e-08     -1.23e-19\npolygon 676 (hole)         6 -1.56749e-06     -2.34e-18\npolygon 677 (hole)         3 -2.86223e-09     -4.27e-21\npolygon 678 (hole)         8 -1.27636e-06     -1.91e-18\npolygon 679 (hole)        11 -3.66415e-06     -5.47e-18\npolygon 680 (hole)        10 -3.21224e-06     -4.80e-18\npolygon 681 (hole)        10 -2.58025e-06     -3.85e-18\npolygon 682 (hole)         3 -1.73697e-07     -2.59e-19\npolygon 683 (hole)         3 -1.38098e-08     -2.06e-20\npolygon 684 (hole)        14 -2.82179e-06     -4.21e-18\npolygon 685 (hole)         4 -2.41048e-07     -3.60e-19\npolygon 686 (hole)        19 -6.09380e-06     -9.10e-18\npolygon 687 (hole)         5 -5.81704e-07     -8.69e-19\npolygon 688 (hole)         8 -2.67945e-06     -4.00e-18\npolygon 689 (hole)        15 -6.54951e-06     -9.78e-18\npolygon 690 (hole)         3 -2.38016e-08     -3.55e-20\npolygon 691 (hole)         4 -1.05535e-06     -1.58e-18\npolygon 692 (hole)         8 -3.22016e-07     -4.81e-19\npolygon 693 (hole)         7 -1.49278e-06     -2.23e-18\npolygon 694 (hole)         8 -2.37875e-06     -3.55e-18\npolygon 695 (hole)         7 -6.28647e-07     -9.39e-19\npolygon 696 (hole)        16 -4.13786e-06     -6.18e-18\npolygon 697 (hole)        34 -1.71423e-05     -2.56e-17\npolygon 698 (hole)         4 -1.63033e-06     -2.43e-18\npolygon 699 (hole)         4 -2.10479e-07     -3.14e-19\npolygon 700 (hole)         8 -5.80075e-06     -8.66e-18\npolygon 701 (hole)         3 -6.63547e-08     -9.91e-20\npolygon 702 (hole)         8 -6.48529e-07     -9.68e-19\npolygon 703 (hole)         4 -1.22292e-06     -1.83e-18\npolygon 704 (hole)         3 -3.69723e-09     -5.52e-21\npolygon 705 (hole)         6 -1.48900e-06     -2.22e-18\npolygon 706 (hole)         8 -1.39392e-06     -2.08e-18\npolygon 707 (hole)        11 -5.05385e-06     -7.55e-18\npolygon 708 (hole)        15 -9.73640e-06     -1.45e-17\npolygon 709 (hole)         6 -9.42407e-07     -1.41e-18\npolygon 710 (hole)         4 -4.51758e-07     -6.75e-19\npolygon 711 (hole)         3 -1.40094e-08     -2.09e-20\npolygon 712 (hole)         4 -5.59670e-07     -8.36e-19\npolygon 713 (hole)         8 -5.07976e-07     -7.58e-19\npolygon 714 (hole)         9 -2.30103e-06     -3.44e-18\npolygon 715 (hole)        11 -1.85244e-06     -2.77e-18\npolygon 716 (hole)         4 -4.41141e-07     -6.59e-19\npolygon 717 (hole)         3 -5.14970e-09     -7.69e-21\npolygon 718 (hole)         3 -1.23756e-07     -1.85e-19\npolygon 719 (hole)        10 -5.08583e-06     -7.59e-18\npolygon 720 (hole)         3 -3.50795e-09     -5.24e-21\npolygon 721 (hole)         3 -2.55812e-08     -3.82e-20\npolygon 722 (hole)        10 -2.30769e-06     -3.45e-18\npolygon 723 (hole)         4 -2.79503e-07     -4.17e-19\npolygon 724 (hole)         5 -4.95816e-07     -7.40e-19\npolygon 725 (hole)        50 -2.64857e-05     -3.95e-17\npolygon 726 (hole)         4 -8.77056e-07     -1.31e-18\npolygon 727 (hole)         6 -2.22331e-06     -3.32e-18\npolygon 728 (hole)         4 -2.50835e-06     -3.75e-18\npolygon 729 (hole)         4 -1.17536e-07     -1.76e-19\npolygon 730 (hole)         5 -1.71933e-06     -2.57e-18\npolygon 731 (hole)         4 -2.01837e-06     -3.01e-18\npolygon 732 (hole)        10 -3.98806e-06     -5.95e-18\npolygon 733 (hole)         6 -2.21318e-06     -3.30e-18\npolygon 734 (hole)         6 -8.93389e-07     -1.33e-18\npolygon 735 (hole)         6 -2.07502e-06     -3.10e-18\npolygon 736 (hole)        25 -1.89169e-05     -2.82e-17\npolygon 737 (hole)         4 -7.39039e-08     -1.10e-19\npolygon 738 (hole)         4 -1.38246e-08     -2.06e-20\npolygon 739 (hole)         4 -3.40264e-07     -5.08e-19\npolygon 740 (hole)         3 -1.77119e-07     -2.64e-19\npolygon 741 (hole)        14 -6.84286e-06     -1.02e-17\npolygon 742 (hole)        12 -4.68955e-06     -7.00e-18\npolygon 743 (hole)         5 -5.12786e-07     -7.66e-19\npolygon 744 (hole)         7 -6.35489e-07     -9.49e-19\npolygon 745 (hole)         5 -4.23206e-07     -6.32e-19\npolygon 746 (hole)        14 -5.39036e-06     -8.05e-18\npolygon 747               19  2.15295e+05      3.21e-07\npolygon 748               16  3.50061e+05      5.23e-07\npolygon 749 (hole)         3 -1.78834e+02     -2.67e-10\npolygon 750               14  2.11571e+05      3.16e-07\npolygon 751               11  1.59536e+05      2.38e-07\npolygon 752              111  7.35028e+07      1.10e-04\npolygon 753               54  9.35305e+06      1.40e-05\npolygon 754               19  6.34649e+05      9.48e-07\npolygon 755               10  3.74827e+04      5.60e-08\npolygon 756               13  1.37100e+05      2.05e-07\npolygon 757               31  4.47193e+06      6.68e-06\npolygon 758               19  1.23742e+06      1.85e-06\npolygon 759               20  1.79201e+06      2.68e-06\npolygon 760               16  2.19464e+05      3.28e-07\npolygon 761               11  7.94092e+04      1.19e-07\npolygon 762               14  1.45779e+05      2.18e-07\npolygon 763               31  6.24672e+05      9.33e-07\npolygon 764               11  2.29288e+04      3.42e-08\npolygon 765               18  2.10998e+05      3.15e-07\npolygon 766               26  2.52571e+06      3.77e-06\npolygon 767               16  5.77783e+05      8.63e-07\npolygon 768               26  8.87985e+05      1.33e-06\npolygon 769               13  1.10557e+05      1.65e-07\npolygon 770               21  9.55338e+05      1.43e-06\npolygon 771               32  2.18189e+06      3.26e-06\npolygon 772               18  7.64830e+05      1.14e-06\npolygon 773               34  1.71336e+06      2.56e-06\npolygon 774              115  9.29594e+05      1.39e-06\npolygon 775               68  2.06761e+05      3.09e-07\npolygon 776               40  4.87851e+06      7.28e-06\npolygon 777               10  7.43137e+04      1.11e-07\npolygon 778               17  5.95020e+05      8.88e-07\npolygon 779               21  4.02132e+05      6.00e-07\npolygon 780               21  1.09635e+06      1.64e-06\npolygon 781               14  1.15356e+05      1.72e-07\npolygon 782               20  3.13610e+05      4.68e-07\npolygon 783              275  3.92648e+08      5.86e-04\npolygon 784               16  2.19612e+05      3.28e-07\npolygon 785               13  2.64858e+05      3.95e-07\npolygon 786               23  1.25549e+06      1.87e-06\npolygon 787                9  1.79312e+05      2.68e-07\npolygon 788               15  2.93132e+05      4.38e-07\npolygon 789               15  5.29892e+05      7.91e-07\npolygon 790               23  4.95351e+05      7.40e-07\npolygon 791               14  4.41976e+05      6.60e-07\npolygon 792               19  3.32318e+05      4.96e-07\npolygon 793               16  4.15914e+05      6.21e-07\npolygon 794               22  5.10526e+05      7.62e-07\npolygon 795               48  1.87148e+07      2.79e-05\npolygon 796               18  1.62882e+06      2.43e-06\npolygon 797               71  2.43615e+07      3.64e-05\npolygon 798              116  5.16444e+07      7.71e-05\npolygon 799               19  1.54144e+06      2.30e-06\npolygon 800               11  2.01013e+05      3.00e-07\npolygon 801               20  2.31201e+06      3.45e-06\npolygon 802               15  5.94674e+05      8.88e-07\npolygon 803              218  1.56252e+08      2.33e-04\npolygon 804              162  8.80247e+07      1.31e-04\npolygon 805               16  3.69968e+05      5.52e-07\npolygon 806               14  1.61451e+05      2.41e-07\npolygon 807               18  5.54566e+05      8.28e-07\npolygon 808               19  5.07078e+05      7.57e-07\npolygon 809               57  6.86475e+06      1.03e-05\npolygon 810               15  6.56018e+05      9.80e-07\npolygon 811               21  6.65092e+05      9.93e-07\npolygon 812               15  5.97784e+05      8.93e-07\npolygon 813               37  2.56010e+06      3.82e-06\npolygon 814               13  1.66996e+05      2.49e-07\npolygon 815               20  8.18381e+05      1.22e-06\npolygon 816               21  2.89704e+06      4.33e-06\npolygon 817               15  4.08213e+05      6.10e-07\npolygon 818              104  4.71547e+07      7.04e-05\npolygon 819               28  3.80443e+06      5.68e-06\npolygon 820               67  3.17343e+07      4.74e-05\npolygon 821              730  9.20735e+08      1.37e-03\npolygon 822               16  2.01576e+05      3.01e-07\npolygon 823               12  1.41506e+05      2.11e-07\npolygon 824               15  4.92125e+05      7.35e-07\npolygon 825               18  1.58128e+06      2.36e-06\npolygon 826               25  1.94322e+06      2.90e-06\npolygon 827               12  2.51373e+05      3.75e-07\npolygon 828              412  4.47936e+08      6.69e-04\npolygon 829               22  7.57105e+05      1.13e-06\npolygon 830               16  6.97434e+05      1.04e-06\npolygon 831               39  4.45130e+06      6.65e-06\npolygon 832               13  8.83786e+05      1.32e-06\npolygon 833               10  2.06200e+05      3.08e-07\npolygon 834               76  3.60497e+07      5.38e-05\npolygon 835               13  4.56433e+05      6.82e-07\npolygon 836               28  2.30613e+06      3.44e-06\npolygon 837               27  2.50338e+06      3.74e-06\npolygon 838               14  4.69238e+05      7.01e-07\npolygon 839               10  1.69886e+05      2.54e-07\npolygon 840               16  5.42822e+05      8.11e-07\npolygon 841               10  1.17633e+05      1.76e-07\npolygon 842                8  7.08579e+04      1.06e-07\npolygon 843              144  7.85300e+07      1.17e-04\npolygon 844               37  1.93477e+06      2.89e-06\npolygon 845               25  5.59996e+05      8.36e-07\npolygon 846               44  2.86031e+06      4.27e-06\npolygon 847               26  1.26276e+06      1.89e-06\npolygon 848              149  1.37840e+08      2.06e-04\npolygon 849               18  4.84958e+05      7.24e-07\npolygon 850               73  2.93195e+07      4.38e-05\npolygon 851               45  6.87481e+06      1.03e-05\npolygon 852               64  1.80880e+07      2.70e-05\npolygon 853               12  8.76879e+05      1.31e-06\npolygon 854               26  2.78381e+06      4.16e-06\npolygon 855               35  8.72326e+06      1.30e-05\npolygon 856               53  1.06237e+07      1.59e-05\npolygon 857               26  5.40467e+06      8.07e-06\npolygon 858              148  1.05037e+08      1.57e-04\npolygon 859               21  8.32798e+05      1.24e-06\npolygon 860               21  2.23023e+06      3.33e-06\npolygon 861                8  6.30805e+05      9.42e-07\npolygon 862               78  3.67603e+07      5.49e-05\npolygon 863               18  1.64745e+06      2.46e-06\npolygon 864               58  1.31747e+07      1.97e-05\npolygon 865               94  1.16837e+07      1.74e-05\npolygon 866               53  3.17801e+06      4.75e-06\npolygon 867              137  8.46454e+06      1.26e-05\npolygon 868               23  4.36507e+05      6.52e-07\npolygon 869               27  9.72136e+05      1.45e-06\npolygon 870 (hole)         5 -6.97021e-07     -1.04e-18\npolygon 871 (hole)         8 -3.52861e-06     -5.27e-18\npolygon 872               55  1.98854e+06      2.97e-06\npolygon 873 (hole)         3 -2.04762e-08     -3.06e-20\npolygon 874 (hole)         4 -6.22375e-07     -9.29e-19\npolygon 875 (hole)         4 -2.36873e-07     -3.54e-19\npolygon 876 (hole)        10 -2.81071e-06     -4.20e-18\npolygon 877 (hole)         3 -7.27160e-09     -1.09e-20\npolygon 878 (hole)         4 -1.10286e-06     -1.65e-18\npolygon 879 (hole)         6 -1.93232e-06     -2.89e-18\npolygon 880 (hole)         4 -1.51309e-07     -2.26e-19\npolygon 881 (hole)        10 -7.07665e-06     -1.06e-17\npolygon 882 (hole)         6 -2.19324e-07     -3.27e-19\npolygon 883 (hole)         4 -2.88552e-07     -4.31e-19\npolygon 884 (hole)         4 -1.75262e-07     -2.62e-19\npolygon 885 (hole)         6 -7.12345e-07     -1.06e-18\npolygon 886 (hole)         4 -1.22366e-06     -1.83e-18\npolygon 887 (hole)         3 -2.13831e-08     -3.19e-20\npolygon 888 (hole)         4 -9.22699e-07     -1.38e-18\npolygon 889 (hole)         7 -1.61583e-06     -2.41e-18\npolygon 890 (hole)         4 -3.05722e-07     -4.56e-19\npolygon 891 (hole)         4 -2.78836e-07     -4.16e-19\npolygon 892 (hole)        10 -4.43177e-06     -6.62e-18\npolygon 893 (hole)         4 -1.73147e-06     -2.59e-18\npolygon 894 (hole)         5 -1.27245e-06     -1.90e-18\npolygon 895 (hole)         6 -1.04516e-06     -1.56e-18\npolygon 896 (hole)        10 -1.02181e-06     -1.53e-18\npolygon 897 (hole)        10 -4.76338e-06     -7.11e-18\npolygon 898 (hole)         3 -5.17982e-08     -7.73e-20\npolygon 899 (hole)         4 -4.56779e-07     -6.82e-19\npolygon 900 (hole)        14 -6.60975e-06     -9.87e-18\npolygon 901 (hole)         4 -1.89112e-07     -2.82e-19\npolygon 902 (hole)         3 -2.16955e-08     -3.24e-20\npolygon 903 (hole)         5 -7.94332e-07     -1.19e-18\npolygon 904 (hole)         4 -9.89198e-08     -1.48e-19\npolygon 905 (hole)         3 -1.77373e-08     -2.65e-20\npolygon 906 (hole)         4 -3.64370e-07     -5.44e-19\npolygon 907 (hole)         4 -2.24606e-07     -3.35e-19\npolygon 908 (hole)         8 -2.36780e-06     -3.54e-18\npolygon 909 (hole)         4 -7.04234e-08     -1.05e-19\npolygon 910 (hole)         5 -5.34330e-07     -7.98e-19\npolygon 911 (hole)         3 -7.79609e-08     -1.16e-19\npolygon 912 (hole)         4 -1.25316e-07     -1.87e-19\npolygon 913 (hole)         7 -1.04799e-06     -1.56e-18\npolygon 914 (hole)        10 -2.48459e-06     -3.71e-18\npolygon 915 (hole)         7 -7.38000e-07     -1.10e-18\npolygon 916 (hole)         7 -3.13894e-07     -4.69e-19\npolygon 917 (hole)        12 -7.14816e-06     -1.07e-17\npolygon 918 (hole)         6 -5.26802e-07     -7.87e-19\npolygon 919 (hole)        12 -4.31344e-06     -6.44e-18\npolygon 920 (hole)         5 -5.57508e-07     -8.32e-19\npolygon 921 (hole)         4 -2.54699e-07     -3.80e-19\npolygon 922 (hole)         4 -1.30150e-07     -1.94e-19\npolygon 923 (hole)         7 -6.13772e-07     -9.16e-19\npolygon 924 (hole)         7 -6.14897e-06     -9.18e-18\npolygon 925 (hole)         3 -2.18561e-08     -3.26e-20\npolygon 926 (hole)         3 -6.63760e-09     -9.91e-21\npolygon 927 (hole)         4 -2.83899e-07     -4.24e-19\npolygon 928 (hole)         8 -3.03154e-06     -4.53e-18\npolygon 929 (hole)         4 -1.34999e-07     -2.02e-19\npolygon 930 (hole)         4 -9.24206e-09     -1.38e-20\npolygon 931 (hole)         4 -3.37664e-07     -5.04e-19\npolygon 932 (hole)         4 -6.24926e-07     -9.33e-19\npolygon 933 (hole)         4 -1.86883e-07     -2.79e-19\npolygon 934 (hole)         5 -3.87980e-07     -5.79e-19\npolygon 935 (hole)         3 -1.19726e-07     -1.79e-19\npolygon 936 (hole)         3 -3.16269e-08     -4.72e-20\npolygon 937 (hole)        14 -1.35927e-05     -2.03e-17\npolygon 938 (hole)         4 -2.44946e-07     -3.66e-19\npolygon 939 (hole)         5 -7.43645e-08     -1.11e-19\npolygon 940 (hole)         3 -2.82993e-08     -4.23e-20\npolygon 941 (hole)         6 -3.50049e-06     -5.23e-18\npolygon 942 (hole)         3 -3.12799e-09     -4.67e-21\npolygon 943 (hole)         8 -1.63751e-06     -2.45e-18\npolygon 944 (hole)         3 -3.41559e-08     -5.10e-20\npolygon 945 (hole)         4 -1.35920e-07     -2.03e-19\npolygon 946 (hole)         6 -1.48117e-06     -2.21e-18\npolygon 947 (hole)         4 -1.87856e-06     -2.81e-18\npolygon 948 (hole)         5 -7.00330e-07     -1.05e-18\npolygon 949 (hole)         6 -9.15044e-07     -1.37e-18\npolygon 950 (hole)         4 -7.13686e-07     -1.07e-18\npolygon 951 (hole)         6 -1.69196e-06     -2.53e-18\npolygon 952               48  1.02651e+07      1.53e-05\npolygon 953 (hole)        12 -5.63666e-06     -8.42e-18\npolygon 954 (hole)         3 -6.62619e-07     -9.89e-19\npolygon 955 (hole)         4 -7.51731e-07     -1.12e-18\npolygon 956 (hole)         3 -4.76591e-07     -7.12e-19\npolygon 957 (hole)         4 -1.39374e-06     -2.08e-18\npolygon 958 (hole)         4 -3.54028e-06     -5.29e-18\npolygon 959 (hole)         3 -2.20492e-09     -3.29e-21\npolygon 960 (hole)        20 -1.44592e-05     -2.16e-17\npolygon 961 (hole)         5 -4.19637e-07     -6.27e-19\npolygon 962 (hole)        39 -1.89868e-05     -2.84e-17\npolygon 963 (hole)         6 -7.08690e-07     -1.06e-18\npolygon 964 (hole)         3 -5.33030e-08     -7.96e-20\npolygon 965 (hole)         3 -4.18672e-08     -6.25e-20\npolygon 966 (hole)         6 -1.19843e-06     -1.79e-18\npolygon 967 (hole)         5 -1.19407e-07     -1.78e-19\npolygon 968 (hole)         4 -7.75621e-08     -1.16e-19\npolygon 969 (hole)         8 -1.14379e-06     -1.71e-18\npolygon 970 (hole)         3 -2.13254e-08     -3.18e-20\npolygon 971 (hole)         7 -1.65696e-07     -2.47e-19\npolygon 972 (hole)         3 -1.12670e-09     -1.68e-21\npolygon 973 (hole)         3 -6.74502e-09     -1.01e-20\npolygon 974 (hole)         3 -8.15548e-08     -1.22e-19\npolygon 975 (hole)         3 -3.27681e-09     -4.89e-21\npolygon 976 (hole)         3 -1.22342e-08     -1.83e-20\npolygon 977 (hole)         3 -5.54257e-11     -8.28e-23\npolygon 978 (hole)         3 -3.48620e-09     -5.21e-21\npolygon 979 (hole)         4 -5.48096e-07     -8.18e-19\npolygon 980 (hole)         4 -6.02066e-08     -8.99e-20\npolygon 981 (hole)         3 -1.26456e-08     -1.89e-20\npolygon 982 (hole)         4 -6.89152e-08     -1.03e-19\npolygon 983 (hole)         4 -4.57305e-07     -6.83e-19\npolygon 984 (hole)         4 -7.91420e-07     -1.18e-18\npolygon 985 (hole)         4 -1.33472e-06     -1.99e-18\npolygon 986               15  3.16153e+05      4.72e-07\npolygon 987               22  8.93201e+05      1.33e-06\npolygon 988               18  2.91538e+05      4.35e-07\npolygon 989               59  3.70736e+06      5.54e-06\npolygon 990               11  1.55205e+05      2.32e-07\npolygon 991               14  1.87401e+05      2.80e-07\npolygon 992               11  6.54128e+04      9.77e-08\npolygon 993               11  8.64659e+04      1.29e-07\npolygon 994               12  2.25129e+05      3.36e-07\npolygon 995               30  2.72178e+06      4.06e-06\npolygon 996 (hole)         3 -2.26252e+00     -3.38e-12\npolygon 997              180  1.80314e+07      2.69e-05\npolygon 998               14  4.01942e+05      6.00e-07\npolygon 999              103  1.33467e+07      1.99e-05\npolygon 1000              14  2.07708e+05      3.10e-07\npolygon 1001              55  4.38623e+06      6.55e-06\npolygon 1002              41  4.69733e+06      7.01e-06\npolygon 1003              74  3.92633e+06      5.86e-06\npolygon 1004              31  2.79477e+06      4.17e-06\npolygon 1005              17  8.74607e+05      1.31e-06\npolygon 1006              26  4.50962e+05      6.73e-07\npolygon 1007              18  1.15065e+06      1.72e-06\npolygon 1008             164  1.48037e+07      2.21e-05\npolygon 1009              12  3.17290e+05      4.74e-07\npolygon 1010              69  2.59551e+07      3.88e-05\npolygon 1011              37  7.85963e+05      1.17e-06\npolygon 1012              14  3.37873e+05      5.05e-07\npolygon 1013              12  1.77980e+05      2.66e-07\npolygon 1014              21  6.46195e+05      9.65e-07\npolygon 1015              24  2.69998e+06      4.03e-06\npolygon 1016              30  1.00675e+06      1.50e-06\npolygon 1017              57  4.22747e+06      6.31e-06\npolygon 1018              23  8.63543e+05      1.29e-06\npolygon 1019              11  2.01925e+05      3.02e-07\npolygon 1020              95  2.88232e+07      4.30e-05\npolygon 1021             452  9.64208e+07      1.44e-04\npolygon 1022              77  1.72297e+07      2.57e-05\npolygon 1023              16  3.33522e+05      4.98e-07\npolygon 1024              19  6.82895e+05      1.02e-06\npolygon 1025              43  3.95062e+06      5.90e-06\npolygon 1026              29  1.00709e+06      1.50e-06\npolygon 1027              21  8.90014e+05      1.33e-06\npolygon 1028              22  7.93453e+05      1.18e-06\npolygon 1029              13  4.52813e+05      6.76e-07\npolygon 1030              30  1.49817e+06      2.24e-06\npolygon 1031              48  4.23996e+06      6.33e-06\npolygon 1032              37  1.20290e+06      1.80e-06\npolygon 1033              19  4.85805e+05      7.25e-07\npolygon 1034              46  2.18001e+06      3.26e-06\npolygon 1035               7  1.33723e+05      2.00e-07\npolygon 1036              54  1.82059e+07      2.72e-05\npolygon 1037              10  8.57866e+05      1.28e-06\npolygon 1038              14  1.98445e+05      2.96e-07\npolygon 1039              19  4.68357e+05      6.99e-07\npolygon 1040              52  8.57765e+06      1.28e-05\npolygon 1041              73  7.91998e+06      1.18e-05\npolygon 1042              23  8.19561e+06      1.22e-05\npolygon 1043              10  1.06594e+05      1.59e-07\npolygon 1044             169  1.39462e+07      2.08e-05\npolygon 1045              17  2.55915e+05      3.82e-07\npolygon 1046              12  1.81516e+05      2.71e-07\npolygon 1047              16  3.68509e+05      5.50e-07\npolygon 1048              12  1.24954e+05      1.87e-07\npolygon 1049            1012  4.61886e+08      6.90e-04\npolygon 1050              15  5.42647e+05      8.10e-07\npolygon 1051              12  5.53088e+05      8.26e-07\npolygon 1052              24  1.06455e+06      1.59e-06\npolygon 1053              14  3.17038e+05      4.73e-07\npolygon 1054              17  1.25559e+06      1.87e-06\npolygon 1055              16  1.92407e+06      2.87e-06\npolygon 1056              80  1.86306e+07      2.78e-05\npolygon 1057              11  6.83880e+04      1.02e-07\npolygon 1058             166  4.21470e+07      6.29e-05\npolygon 1059              22  1.36174e+06      2.03e-06\npolygon 1060              31  6.07363e+05      9.07e-07\npolygon 1061              10  1.27067e+05      1.90e-07\npolygon 1062             164  5.02951e+07      7.51e-05\npolygon 1063              17  1.20798e+06      1.80e-06\npolygon 1064              59  2.41720e+06      3.61e-06\npolygon 1065              12  2.52952e+05      3.78e-07\npolygon 1066              14  2.44407e+05      3.65e-07\npolygon 1067              43  4.89177e+06      7.30e-06\npolygon 1068              40  3.86642e+06      5.77e-06\npolygon 1069              23  4.59203e+05      6.86e-07\npolygon 1070              14  1.79442e+05      2.68e-07\npolygon 1071              13  1.61191e+05      2.41e-07\npolygon 1072              43  1.33365e+06      1.99e-06\npolygon 1073              75  1.20247e+07      1.80e-05\npolygon 1074              17  9.96466e+04      1.49e-07\npolygon 1075              22  1.60660e+06      2.40e-06\npolygon 1076             730  1.16983e+08      1.75e-04\npolygon 1077             129  7.87539e+06      1.18e-05\npolygon 1078              22  4.66256e+05      6.96e-07\npolygon 1079              19  5.44519e+05      8.13e-07\npolygon 1080              16  3.73911e+05      5.58e-07\npolygon 1081              88  3.47678e+07      5.19e-05\npolygon 1082              46  3.23711e+06      4.83e-06\npolygon 1083              47  9.17482e+05      1.37e-06\npolygon 1084              14  4.44869e+05      6.64e-07\npolygon 1085              43  1.29527e+06      1.93e-06\npolygon 1086              65  3.20974e+06      4.79e-06\npolygon 1087             306  1.83695e+07      2.74e-05\npolygon 1088              17  4.25486e+05      6.35e-07\npolygon 1089              29  1.08467e+06      1.62e-06\npolygon 1090              26  1.16602e+06      1.74e-06\npolygon 1091             135  4.90655e+06      7.33e-06\npolygon 1092              23  1.87723e+06      2.80e-06\npolygon 1093              21  7.02338e+05      1.05e-06\npolygon 1094              30  4.99970e+06      7.47e-06\npolygon 1095              21  7.71571e+05      1.15e-06\npolygon 1096              13  1.47832e+05      2.21e-07\npolygon 1097              26  3.17307e+06      4.74e-06\npolygon 1098              17  1.03642e+06      1.55e-06\npolygon 1099             100  8.74537e+06      1.31e-05\npolygon 1100              11  1.13950e+05      1.70e-07\npolygon 1101              26  8.27840e+05      1.24e-06\npolygon 1102              17  4.10882e+05      6.14e-07\npolygon 1103              13  1.49250e+05      2.23e-07\npolygon 1104              35  1.76408e+06      2.63e-06\npolygon 1105              15  2.03390e+05      3.04e-07\npolygon 1106              18  1.70982e+05      2.55e-07\npolygon 1107              32  7.98599e+06      1.19e-05\npolygon 1108              27  3.20839e+05      4.79e-07\npolygon 1109             539  1.17139e+08      1.75e-04\npolygon 1110              51  1.57614e+06      2.35e-06\npolygon 1111              19  3.60772e+05      5.39e-07\npolygon 1112              58  2.10060e+06      3.14e-06\npolygon 1113              13  1.70224e+05      2.54e-07\npolygon 1114              11  6.11736e+05      9.13e-07\npolygon 1115              35  5.26152e+06      7.86e-06\npolygon 1116              16  1.99371e+05      2.98e-07\npolygon 1117              14  4.48979e+05      6.70e-07\npolygon 1118              25  1.92913e+06      2.88e-06\npolygon 1119              16  4.26157e+05      6.36e-07\npolygon 1120              46  1.88229e+06      2.81e-06\npolygon 1121              17  2.29456e+05      3.43e-07\npolygon 1122              36  4.01418e+06      5.99e-06\npolygon 1123              57  1.77153e+07      2.65e-05\npolygon 1124              20  5.72298e+05      8.55e-07\npolygon 1125              14  2.46782e+05      3.68e-07\npolygon 1126              29  1.01300e+06      1.51e-06\npolygon 1127              90  8.54955e+06      1.28e-05\npolygon 1128              21  3.99098e+05      5.96e-07\npolygon 1129              12  2.81650e+05      4.21e-07\npolygon 1130              52  3.19337e+06      4.77e-06\npolygon 1131              13  3.40300e+05      5.08e-07\npolygon 1132              29  9.08533e+05      1.36e-06\npolygon 1133              20  3.07393e+05      4.59e-07\npolygon 1134              19  1.15906e+06      1.73e-06\npolygon 1135              17  1.16182e+06      1.73e-06\npolygon 1136              21  2.60877e+06      3.90e-06\npolygon 1137              15  1.09001e+05      1.63e-07\npolygon 1138              37  1.31921e+06      1.97e-06\npolygon 1139              53  1.46854e+06      2.19e-06\npolygon 1140              59  8.92822e+06      1.33e-05\npolygon 1141               9  7.44981e+04      1.11e-07\npolygon 1142              14  2.41462e+05      3.61e-07\npolygon 1143              96  7.25940e+06      1.08e-05\npolygon 1144              11  1.06055e+05      1.58e-07\npolygon 1145              49  1.87834e+06      2.80e-06\npolygon 1146              23  6.08310e+05      9.08e-07\npolygon 1147              50  6.76488e+05      1.01e-06\npolygon 1148              22  4.83089e+05      7.21e-07\npolygon 1149              17  1.17278e+05      1.75e-07\npolygon 1150              13  8.98786e+05      1.34e-06\npolygon 1151              43  1.01757e+06      1.52e-06\npolygon 1152              52  1.68377e+06      2.51e-06\npolygon 1153             348  2.50314e+08      3.74e-04\npolygon 1154              43  1.29120e+06      1.93e-06\npolygon 1155              71  2.02836e+06      3.03e-06\npolygon 1156 (hole)        4 -4.12791e+00     -6.16e-12\npolygon 1157             141  4.53240e+06      6.77e-06\npolygon 1158              52  3.62008e+06      5.41e-06\npolygon 1159              20  7.69539e+05      1.15e-06\npolygon 1160              88  8.88904e+06      1.33e-05\npolygon 1161              12  1.44668e+05      2.16e-07\npolygon 1162              46  2.28026e+06      3.40e-06\npolygon 1163              39  4.79165e+06      7.15e-06\npolygon 1164              53  2.86736e+06      4.28e-06\npolygon 1165              38  3.22508e+06      4.82e-06\npolygon 1166              18  4.44863e+05      6.64e-07\npolygon 1167              45  1.45134e+06      2.17e-06\npolygon 1168              86  2.56400e+07      3.83e-05\npolygon 1169             158  1.74510e+07      2.61e-05\npolygon 1170              14  2.50383e+05      3.74e-07\npolygon 1171             120  7.17019e+06      1.07e-05\npolygon 1172             146  2.28448e+07      3.41e-05\npolygon 1173             143  2.34472e+07      3.50e-05\npolygon 1174              20  3.47415e+05      5.19e-07\npolygon 1175              84  3.86387e+06      5.77e-06\npolygon 1176              68  1.10850e+07      1.66e-05\npolygon 1177             863  7.47702e+07      1.12e-04\npolygon 1178              53  7.54742e+06      1.13e-05\npolygon 1179              64  2.11016e+06      3.15e-06\npolygon 1180             103  1.47525e+07      2.20e-05\npolygon 1181              26  3.40345e+06      5.08e-06\npolygon 1182             103  8.40445e+06      1.25e-05\npolygon 1183              23  4.92041e+05      7.35e-07\npolygon 1184              27  5.53625e+05      8.27e-07\npolygon 1185              60  3.56102e+06      5.32e-06\npolygon 1186             151  1.51314e+07      2.26e-05\npolygon 1187             708  4.18129e+08      6.24e-04\npolygon 1188             120  1.32857e+07      1.98e-05\npolygon 1189             856  2.53898e+08      3.79e-04\npolygon 1190              13  2.47298e+05      3.69e-07\npolygon 1191              16  7.35754e+05      1.10e-06\npolygon 1192              21  5.31633e+05      7.94e-07\npolygon 1193              72  1.03185e+07      1.54e-05\npolygon 1194              38  1.34734e+06      2.01e-06\npolygon 1195               8  4.09489e+05      6.11e-07\npolygon 1196              17  2.46995e+05      3.69e-07\npolygon 1197              14  1.42285e+05      2.12e-07\npolygon 1198               9  1.56346e+05      2.33e-07\npolygon 1199              42  5.49581e+05      8.21e-07\npolygon 1200              59  1.15813e+06      1.73e-06\npolygon 1201              12  1.16845e+05      1.74e-07\npolygon 1202              11  6.00122e+04      8.96e-08\npolygon 1203              14  1.63465e+05      2.44e-07\npolygon 1204               8  4.73674e+04      7.07e-08\npolygon 1205              23  6.69330e+05      9.99e-07\npolygon 1206             144  6.48346e+06      9.68e-06\npolygon 1207              74  4.79923e+06      7.17e-06\npolygon 1208             116  1.02706e+07      1.53e-05\npolygon 1209              16  2.74005e+05      4.09e-07\npolygon 1210              97  4.72599e+06      7.06e-06\npolygon 1211              18  6.15583e+05      9.19e-07\npolygon 1212             146  1.38979e+07      2.08e-05\npolygon 1213              32  1.94516e+06      2.90e-06\npolygon 1214              26  9.81356e+05      1.47e-06\npolygon 1215              82  4.39797e+06      6.57e-06\npolygon 1216              33  9.36113e+05      1.40e-06\npolygon 1217              47  1.51844e+06      2.27e-06\npolygon 1218             196  2.32689e+07      3.47e-05\npolygon 1219              53  1.30069e+06      1.94e-06\npolygon 1220              70  1.00802e+07      1.51e-05\npolygon 1221              10  5.33870e+05      7.97e-07\npolygon 1222             211  2.73026e+07      4.08e-05\npolygon 1223              41  1.44141e+06      2.15e-06\npolygon 1224               9  5.20220e+05      7.77e-07\npolygon 1225             316  6.66808e+07      9.96e-05\npolygon 1226              17  7.48505e+05      1.12e-06\npolygon 1227              15  1.49799e+05      2.24e-07\npolygon 1228              24  4.99500e+05      7.46e-07\npolygon 1229              12  2.24463e+05      3.35e-07\npolygon 1230             100  1.06028e+07      1.58e-05\npolygon 1231              11  1.24267e+05      1.86e-07\npolygon 1232             143  1.89581e+07      2.83e-05\npolygon 1233              60  7.07802e+06      1.06e-05\npolygon 1234             124  1.23476e+07      1.84e-05\npolygon 1235              34  5.67625e+06      8.48e-06\npolygon 1236             797  1.86955e+08      2.79e-04\npolygon 1237              15  7.15891e+05      1.07e-06\npolygon 1238              20  1.61624e+06      2.41e-06\npolygon 1239              13  1.73955e+05      2.60e-07\npolygon 1240              60  2.42590e+06      3.62e-06\npolygon 1241              20  3.86365e+05      5.77e-07\npolygon 1242             213  3.69421e+07      5.52e-05\npolygon 1243              15  4.55574e+05      6.80e-07\npolygon 1244              35  1.56058e+06      2.33e-06\npolygon 1245              32  1.42419e+06      2.13e-06\npolygon 1246              68  2.30711e+06      3.44e-06\npolygon 1247             240  5.93935e+07      8.87e-05\npolygon 1248             145  1.58875e+07      2.37e-05\npolygon 1249              39  3.67239e+06      5.48e-06\npolygon 1250              54  3.84847e+06      5.75e-06\npolygon 1251              32  1.14073e+06      1.70e-06\npolygon 1252              18  3.58549e+05      5.35e-07\npolygon 1253              25  8.06470e+05      1.20e-06\npolygon 1254              15  2.67818e+05      4.00e-07\npolygon 1255              26  1.43681e+06      2.15e-06\npolygon 1256              18  3.10061e+05      4.63e-07\npolygon 1257              18  4.71644e+05      7.04e-07\npolygon 1258              16  5.04146e+05      7.53e-07\npolygon 1259              72  7.33720e+06      1.10e-05\npolygon 1260              27  1.37772e+06      2.06e-06\npolygon 1261              15  3.17217e+05      4.74e-07\npolygon 1262              37  1.17498e+06      1.75e-06\npolygon 1263              21  7.05388e+05      1.05e-06\npolygon 1264             216  2.05399e+07      3.07e-05\npolygon 1265              16  2.40093e+05      3.59e-07\npolygon 1266              29  1.71282e+06      2.56e-06\npolygon 1267              30  1.28695e+06      1.92e-06\npolygon 1268              36  2.29670e+06      3.43e-06\npolygon 1269             129  1.97698e+07      2.95e-05\npolygon 1270              65  2.65969e+06      3.97e-06\npolygon 1271             283  3.30575e+07      4.94e-05\npolygon 1272              28  7.06271e+05      1.05e-06\npolygon 1273              28  5.50158e+05      8.21e-07\npolygon 1274              49  2.25015e+06      3.36e-06\npolygon 1275              26  1.24280e+06      1.86e-06\npolygon 1276              28  9.02794e+05      1.35e-06\npolygon 1277              18  4.84064e+05      7.23e-07\npolygon 1278              47  2.33442e+06      3.49e-06\npolygon 1279              17  2.23835e+05      3.34e-07\npolygon 1280              34  7.32504e+05      1.09e-06\npolygon 1281              41  7.15538e+05      1.07e-06\npolygon 1282              21  5.81687e+05      8.69e-07\npolygon 1283              63  3.83819e+06      5.73e-06\npolygon 1284              27  1.33192e+06      1.99e-06\npolygon 1285              46  2.95028e+06      4.41e-06\npolygon 1286              10  1.34210e+05      2.00e-07\npolygon 1287              16  2.38274e+05      3.56e-07\npolygon 1288              18  4.18536e+05      6.25e-07\npolygon 1289              46  1.26584e+06      1.89e-06\npolygon 1290              14  2.14679e+05      3.21e-07\npolygon 1291              76  3.63371e+06      5.43e-06\npolygon 1292             339  4.44685e+07      6.64e-05\npolygon 1293             109  6.29786e+06      9.40e-06\npolygon 1294              14  2.89570e+05      4.32e-07\npolygon 1295              37  9.07704e+05      1.36e-06\npolygon 1296              68  3.86104e+06      5.77e-06\npolygon 1297             183  1.45458e+07      2.17e-05\npolygon 1298              44  1.64355e+06      2.45e-06\npolygon 1299              26  1.21667e+06      1.82e-06\npolygon 1300              13  1.95710e+05      2.92e-07\npolygon 1301              38  1.44402e+06      2.16e-06\npolygon 1302              14  3.29394e+05      4.92e-07\npolygon 1303              14  1.79828e+05      2.69e-07\npolygon 1304              44  2.11118e+06      3.15e-06\npolygon 1305             643  1.79215e+08      2.68e-04\npolygon 1306              24  1.10979e+06      1.66e-06\npolygon 1307              30  1.57106e+06      2.35e-06\npolygon 1308              46  3.61716e+06      5.40e-06\npolygon 1309              93  7.56340e+05      1.13e-06\npolygon 1310              57  3.07732e+06      4.59e-06\npolygon 1311              18  2.16224e+05      3.23e-07\npolygon 1312              17  5.12388e+05      7.65e-07\npolygon 1313               9  7.44780e+04      1.11e-07\npolygon 1314              57  8.09122e+06      1.21e-05\npolygon 1315              16  4.01323e+05      5.99e-07\npolygon 1316             118  2.90304e+07      4.33e-05\npolygon 1317              22  4.44693e+05      6.64e-07\npolygon 1318              43  2.28763e+06      3.42e-06\npolygon 1319              27  1.15444e+06      1.72e-06\npolygon 1320              25  1.21695e+06      1.82e-06\npolygon 1321              53  4.49228e+06      6.71e-06\npolygon 1322 (hole)        8 -1.14003e-01     -1.70e-13\npolygon 1323 (hole)        4 -5.05161e-02     -7.54e-14\npolygon 1324 (hole)        6 -3.83858e-06     -5.73e-18\npolygon 1325 (hole)        6 -6.42550e-02     -9.59e-14\npolygon 1326 (hole)        4 -1.10823e-02     -1.65e-14\npolygon 1327 (hole)        8 -1.54074e-01     -2.30e-13\npolygon 1328 (hole)        4 -5.15531e-03     -7.70e-15\npolygon 1329 (hole)        7 -4.08919e-02     -6.11e-14\npolygon 1330 (hole)        9 -6.45354e-02     -9.64e-14\npolygon 1331 (hole)       13 -6.64876e-02     -9.93e-14\npolygon 1332 (hole)        5 -5.31928e-02     -7.94e-14\npolygon 1333 (hole)        6 -4.67378e-02     -6.98e-14\npolygon 1334 (hole)        4 -2.58840e-02     -3.86e-14\npolygon 1335 (hole)       10 -9.35297e-02     -1.40e-13\npolygon 1336 (hole)        4 -1.76462e-02     -2.63e-14\npolygon 1337 (hole)        4 -5.14884e-02     -7.69e-14\npolygon 1338 (hole)        3 -1.43940e-03     -2.15e-15\npolygon 1339 (hole)        3 -2.72931e-02     -4.08e-14\npolygon 1340 (hole)        4 -9.91931e-02     -1.48e-13\npolygon 1341 (hole)       16 -1.55622e-05     -2.32e-17\npolygon 1342 (hole)        8 -2.24831e-06     -3.36e-18\npolygon 1343              79  1.47390e+07      2.20e-05\npolygon 1344           37614  6.60254e+11      9.86e-01\npolygon 1345 (hole)        8 -3.42277e-06     -5.11e-18\nenclosing rectangle: [-210008.6, 724647.6] x [1072026.3, 3158467.1] units\n                     (934700 x 2086000 units)\nWindow area = 6.69714e+11 square units\nFraction of frame area: 0.343\n\n\n\n\nCreating point events objects in owin Object\nIn this last step of geospatial data wrangling, we will extract armed conflict events that are located within Myanmar.\n\n# overall\nacledmyanmar_ppp = acled_ppp[myanmar_owin]\n\n# by quarters\nacledmyanmar_2021.Q1_ppp = acled_2021.Q1_ppp[myanmar_owin]\nacledmyanmar_2021.Q2_ppp = acled_2021.Q2_ppp[myanmar_owin]\nacledmyanmar_2021.Q3_ppp = acled_2021.Q3_ppp[myanmar_owin]\nacledmyanmar_2021.Q4_ppp = acled_2021.Q4_ppp[myanmar_owin]\n\nacledmyanmar_2022.Q1_ppp = acled_2022.Q1_ppp[myanmar_owin]\nacledmyanmar_2022.Q2_ppp = acled_2022.Q2_ppp[myanmar_owin]\nacledmyanmar_2022.Q3_ppp = acled_2022.Q3_ppp[myanmar_owin]\nacledmyanmar_2022.Q4_ppp = acled_2022.Q4_ppp[myanmar_owin]\n\nacledmyanmar_2023.Q1_ppp = acled_2023.Q1_ppp[myanmar_owin]\nacledmyanmar_2023.Q2_ppp = acled_2023.Q2_ppp[myanmar_owin]\nacledmyanmar_2023.Q3_ppp = acled_2023.Q3_ppp[myanmar_owin]\nacledmyanmar_2023.Q4_ppp = acled_2023.Q4_ppp[myanmar_owin]\n\nacledmyanmar_2024.Q1_ppp = acled_2024.Q1_ppp[myanmar_owin]\nacledmyanmar_2024.Q2_ppp = acled_2024.Q2_ppp[myanmar_owin]\n\nThe output object combines both the point and polygon feature in one ppp object class as shown below.\n\nsummary(acledmyanmar_2021.Q1_ppp)\n\nPlanar point pattern:  711 points\nAverage intensity 1.061648e-09 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 13 decimal places\n\nWindow: polygonal boundary\n1345 separate polygons (783 holes)\n                    vertices         area relative.area\npolygon 1 (hole)           4 -2.89739e-02     -4.33e-14\npolygon 2 (hole)           5 -7.39370e-02     -1.10e-13\npolygon 3 (hole)           6 -1.08246e-01     -1.62e-13\npolygon 4 (hole)          13 -3.27066e-01     -4.88e-13\npolygon 5 (hole)           3 -3.55720e-07     -5.31e-19\npolygon 6 (hole)           4 -3.29535e-08     -4.92e-20\npolygon 7 (hole)           4 -2.72345e-07     -4.07e-19\npolygon 8 (hole)           3 -4.10226e-07     -6.13e-19\npolygon 9 (hole)           4 -1.83634e-06     -2.74e-18\npolygon 10 (hole)          3 -1.86294e-06     -2.78e-18\npolygon 11 (hole)          4 -2.01188e-06     -3.00e-18\npolygon 12 (hole)          3 -6.89672e-11     -1.03e-22\npolygon 13 (hole)          4 -1.94084e-06     -2.90e-18\npolygon 14 (hole)          4 -4.15521e-06     -6.20e-18\npolygon 15 (hole)          3 -1.67824e-07     -2.51e-19\npolygon 16 (hole)          4 -5.10103e-07     -7.62e-19\npolygon 17 (hole)          3 -5.71908e-08     -8.54e-20\npolygon 18 (hole)          4 -9.56472e-07     -1.43e-18\npolygon 19 (hole)          3 -1.67010e-06     -2.49e-18\npolygon 20 (hole)          3 -7.14373e-07     -1.07e-18\npolygon 21 (hole)          4 -5.48471e-08     -8.19e-20\npolygon 22 (hole)          4 -9.63973e-07     -1.44e-18\npolygon 23 (hole)          3 -3.04045e-06     -4.54e-18\npolygon 24 (hole)          4 -4.06661e-07     -6.07e-19\npolygon 25 (hole)          3 -1.83329e-13     -2.74e-25\npolygon 26 (hole)          5 -6.85239e-10     -1.02e-21\npolygon 27 (hole)          4 -1.18031e-06     -1.76e-18\npolygon 28 (hole)          4 -9.56264e-11     -1.43e-22\npolygon 29 (hole)          6 -7.03445e-06     -1.05e-17\npolygon 30 (hole)          4 -4.35634e-07     -6.50e-19\npolygon 31 (hole)          4 -3.67731e-07     -5.49e-19\npolygon 32 (hole)         11 -1.82960e-05     -2.73e-17\npolygon 33 (hole)         10 -4.44947e-06     -6.64e-18\npolygon 34 (hole)          4 -5.06848e-07     -7.57e-19\npolygon 35 (hole)         16 -2.17406e-06     -3.25e-18\npolygon 36 (hole)          4 -4.01576e-06     -6.00e-18\npolygon 37 (hole)          4 -3.55001e-07     -5.30e-19\npolygon 38 (hole)          4 -9.82088e-07     -1.47e-18\npolygon 39 (hole)          4 -4.41915e-10     -6.60e-22\npolygon 40 (hole)          3 -4.10023e-09     -6.12e-21\npolygon 41 (hole)          4 -5.97298e-08     -8.92e-20\npolygon 42                26  2.85778e+06      4.27e-06\npolygon 43 (hole)          7 -5.98527e-06     -8.94e-18\npolygon 44 (hole)          5 -1.11940e-06     -1.67e-18\npolygon 45 (hole)          3 -6.94332e-09     -1.04e-20\npolygon 46 (hole)          5 -4.91071e-06     -7.33e-18\npolygon 47 (hole)          4 -3.51438e-07     -5.25e-19\npolygon 48 (hole)          3 -6.99415e-08     -1.04e-19\npolygon 49 (hole)          4 -1.11326e-08     -1.66e-20\npolygon 50 (hole)          3 -6.10517e-07     -9.12e-19\npolygon 51 (hole)          3 -2.24607e-07     -3.35e-19\npolygon 52 (hole)          4 -8.02093e-07     -1.20e-18\npolygon 53 (hole)          3 -9.66907e-08     -1.44e-19\npolygon 54 (hole)          4 -4.37363e-06     -6.53e-18\npolygon 55 (hole)          3 -1.70717e-07     -2.55e-19\npolygon 56 (hole)          4 -3.07590e-06     -4.59e-18\npolygon 57 (hole)          3 -1.99408e-07     -2.98e-19\npolygon 58 (hole)          6 -1.63617e-06     -2.44e-18\npolygon 59 (hole)          3 -3.06785e-07     -4.58e-19\npolygon 60 (hole)          3 -1.56131e-07     -2.33e-19\npolygon 61 (hole)          7 -1.79876e-06     -2.69e-18\npolygon 62 (hole)         11 -1.65937e-05     -2.48e-17\npolygon 63 (hole)          4 -1.42725e-06     -2.13e-18\npolygon 64 (hole)          6 -1.33879e-06     -2.00e-18\npolygon 65 (hole)          3 -3.98058e-07     -5.94e-19\npolygon 66 (hole)          3 -4.46005e-07     -6.66e-19\npolygon 67 (hole)         12 -2.05767e-05     -3.07e-17\npolygon 68 (hole)          3 -2.92851e-07     -4.37e-19\npolygon 69 (hole)          6 -7.37176e-07     -1.10e-18\npolygon 70 (hole)          4 -3.81552e-07     -5.70e-19\npolygon 71 (hole)          4 -1.67713e-06     -2.50e-18\npolygon 72 (hole)          6 -3.03661e-06     -4.53e-18\npolygon 73 (hole)         16 -1.79219e-05     -2.68e-17\npolygon 74 (hole)          4 -1.03552e-06     -1.55e-18\npolygon 75 (hole)          4 -1.01406e-06     -1.51e-18\npolygon 76 (hole)          4 -8.65300e-07     -1.29e-18\npolygon 77 (hole)          3 -5.38141e-07     -8.04e-19\npolygon 78 (hole)          4 -1.48789e-06     -2.22e-18\npolygon 79 (hole)          4 -2.04242e-06     -3.05e-18\npolygon 80 (hole)          3 -1.01252e-06     -1.51e-18\npolygon 81 (hole)          3 -1.59017e-07     -2.37e-19\npolygon 82 (hole)          4 -1.48988e-06     -2.22e-18\npolygon 83 (hole)          3 -1.48101e-07     -2.21e-19\npolygon 84 (hole)          7 -2.30688e-06     -3.44e-18\npolygon 85 (hole)         10 -9.86116e-06     -1.47e-17\npolygon 86 (hole)          6 -3.90621e-06     -5.83e-18\npolygon 87 (hole)          4 -2.01296e-07     -3.01e-19\npolygon 88 (hole)          6 -8.13898e-07     -1.22e-18\npolygon 89 (hole)          3 -4.84979e-08     -7.24e-20\npolygon 90 (hole)          4 -5.46126e-07     -8.15e-19\npolygon 91 (hole)          3 -6.40553e-07     -9.56e-19\npolygon 92 (hole)          4 -2.03670e-07     -3.04e-19\npolygon 93 (hole)          3 -1.16077e-07     -1.73e-19\npolygon 94 (hole)          4 -4.11957e-07     -6.15e-19\npolygon 95 (hole)          3 -7.00399e-08     -1.05e-19\npolygon 96 (hole)          4 -2.23188e-07     -3.33e-19\npolygon 97 (hole)          4 -3.10997e-07     -4.64e-19\npolygon 98 (hole)          6 -5.74412e-06     -8.58e-18\npolygon 99 (hole)          9 -2.19427e-05     -3.28e-17\npolygon 100 (hole)         3 -2.67563e-07     -4.00e-19\npolygon 101 (hole)         4 -1.32715e-06     -1.98e-18\npolygon 102 (hole)         6 -2.60133e-06     -3.88e-18\npolygon 103 (hole)         5 -1.22958e-05     -1.84e-17\npolygon 104 (hole)         3 -1.14982e-09     -1.72e-21\npolygon 105 (hole)         4 -2.43524e-10     -3.64e-22\npolygon 106 (hole)         3 -3.31085e-07     -4.94e-19\npolygon 107 (hole)         4 -8.01372e-07     -1.20e-18\npolygon 108 (hole)         4 -6.70371e-07     -1.00e-18\npolygon 109 (hole)         3 -4.90978e-07     -7.33e-19\npolygon 110 (hole)         4 -2.54297e-06     -3.80e-18\npolygon 111 (hole)         5 -2.38956e-06     -3.57e-18\npolygon 112 (hole)         4 -3.62129e-07     -5.41e-19\npolygon 113 (hole)         5 -9.41057e-07     -1.41e-18\npolygon 114 (hole)         3 -4.44880e-08     -6.64e-20\npolygon 115 (hole)         4 -7.71257e-07     -1.15e-18\npolygon 116 (hole)         6 -2.89370e-06     -4.32e-18\npolygon 117 (hole)         7 -1.57765e-05     -2.36e-17\npolygon 118 (hole)         4 -2.26147e-07     -3.38e-19\npolygon 119 (hole)         4 -1.37331e-06     -2.05e-18\npolygon 120 (hole)         4 -4.36370e-07     -6.52e-19\npolygon 121 (hole)         4 -3.22896e-06     -4.82e-18\npolygon 122 (hole)         4 -4.75997e-07     -7.11e-19\npolygon 123 (hole)         4 -4.38715e-07     -6.55e-19\npolygon 124 (hole)         6 -1.02899e-06     -1.54e-18\npolygon 125 (hole)         4 -1.14855e-06     -1.71e-18\npolygon 126 (hole)         3 -1.02277e-07     -1.53e-19\npolygon 127 (hole)         9 -2.87716e-06     -4.30e-18\npolygon 128 (hole)         3 -3.86621e-07     -5.77e-19\npolygon 129 (hole)         3 -1.94296e-07     -2.90e-19\npolygon 130 (hole)         7 -1.80011e-06     -2.69e-18\npolygon 131 (hole)         4 -5.37691e-07     -8.03e-19\npolygon 132 (hole)         3 -5.77240e-08     -8.62e-20\npolygon 133 (hole)         8 -3.01954e-06     -4.51e-18\npolygon 134 (hole)         6 -6.67140e-06     -9.96e-18\npolygon 135 (hole)         4 -2.66412e-07     -3.98e-19\npolygon 136 (hole)         3 -1.40064e-07     -2.09e-19\npolygon 137 (hole)         4 -3.40782e-07     -5.09e-19\npolygon 138 (hole)         6 -6.46573e-06     -9.65e-18\npolygon 139 (hole)         4 -2.99274e-07     -4.47e-19\npolygon 140 (hole)         3 -5.55465e-10     -8.29e-22\npolygon 141 (hole)         3 -1.77354e-07     -2.65e-19\npolygon 142 (hole)         3 -7.87909e-08     -1.18e-19\npolygon 143 (hole)         3 -1.69698e-07     -2.53e-19\npolygon 144 (hole)         7 -2.48946e-06     -3.72e-18\npolygon 145 (hole)         3 -1.31588e-12     -1.96e-24\npolygon 146 (hole)         4 -3.22413e-07     -4.81e-19\npolygon 147 (hole)         7 -4.93484e-06     -7.37e-18\npolygon 148 (hole)         3 -1.58436e-07     -2.37e-19\npolygon 149 (hole)         4 -3.15509e-08     -4.71e-20\npolygon 150 (hole)         3 -9.84638e-07     -1.47e-18\npolygon 151 (hole)         4 -1.67312e-07     -2.50e-19\npolygon 152 (hole)         3 -1.12101e-07     -1.67e-19\npolygon 153               43  7.32477e+06      1.09e-05\npolygon 154 (hole)         5 -5.48711e-06     -8.19e-18\npolygon 155 (hole)         3 -1.30703e-06     -1.95e-18\npolygon 156 (hole)         3 -3.44039e-07     -5.14e-19\npolygon 157 (hole)         4 -1.67760e-06     -2.50e-18\npolygon 158 (hole)         3 -6.43116e-07     -9.60e-19\npolygon 159 (hole)         3 -3.47614e-08     -5.19e-20\npolygon 160 (hole)         3 -1.66250e-08     -2.48e-20\npolygon 161 (hole)         4 -2.13921e-06     -3.19e-18\npolygon 162 (hole)         4 -4.27151e-07     -6.38e-19\npolygon 163 (hole)         7 -1.19424e-06     -1.78e-18\npolygon 164 (hole)         4 -7.28922e-07     -1.09e-18\npolygon 165 (hole)         4 -2.02465e-06     -3.02e-18\npolygon 166 (hole)         3 -4.21171e-08     -6.29e-20\npolygon 167 (hole)         3 -1.12224e-08     -1.68e-20\npolygon 168              103  1.86991e+07      2.79e-05\npolygon 169 (hole)         3 -2.29459e-07     -3.43e-19\npolygon 170 (hole)         4 -2.38485e-07     -3.56e-19\npolygon 171 (hole)         6 -3.65340e-07     -5.46e-19\npolygon 172 (hole)         4 -1.71122e-07     -2.56e-19\npolygon 173 (hole)         5 -2.87414e-06     -4.29e-18\npolygon 174 (hole)         3 -2.23174e-08     -3.33e-20\npolygon 175 (hole)         3 -2.07226e-08     -3.09e-20\npolygon 176 (hole)         3 -4.70001e-09     -7.02e-21\npolygon 177               37  9.32316e+06      1.39e-05\npolygon 178 (hole)         4 -5.81687e-07     -8.69e-19\npolygon 179                3  0.00000e+00      0.00e+00\npolygon 180 (hole)         8 -3.12973e-06     -4.67e-18\npolygon 181 (hole)         4 -2.57791e-08     -3.85e-20\npolygon 182 (hole)         3 -2.00116e-06     -2.99e-18\npolygon 183 (hole)         4 -1.16159e-06     -1.73e-18\npolygon 184 (hole)         3 -1.24415e-09     -1.86e-21\npolygon 185 (hole)         4 -7.76199e-07     -1.16e-18\npolygon 186 (hole)         4 -8.04350e-07     -1.20e-18\npolygon 187              371  2.43869e+08      3.64e-04\npolygon 188              297  2.84905e+08      4.25e-04\npolygon 189 (hole)         3 -3.45320e-06     -5.16e-18\npolygon 190 (hole)         3 -9.76936e-08     -1.46e-19\npolygon 191 (hole)         4 -3.63549e-07     -5.43e-19\npolygon 192 (hole)         4 -3.27706e-07     -4.89e-19\npolygon 193               33  1.68222e+07      2.51e-05\npolygon 194               33  4.47665e+05      6.68e-07\npolygon 195               19  1.34593e+05      2.01e-07\npolygon 196               39  1.36327e+06      2.04e-06\npolygon 197              137  1.55547e+08      2.32e-04\npolygon 198 (hole)         3 -4.67770e-09     -6.98e-21\npolygon 199 (hole)         3 -8.08618e-08     -1.21e-19\npolygon 200 (hole)         4 -3.87011e-06     -5.78e-18\npolygon 201               36  8.76479e+06      1.31e-05\npolygon 202 (hole)         4 -4.56275e-07     -6.81e-19\npolygon 203               79  3.08116e+07      4.60e-05\npolygon 204 (hole)         4 -5.65074e-07     -8.44e-19\npolygon 205              388  2.25271e+08      3.36e-04\npolygon 206 (hole)         4 -3.42368e-06     -5.11e-18\npolygon 207 (hole)         3 -7.83497e-07     -1.17e-18\npolygon 208 (hole)         3 -4.76203e-09     -7.11e-21\npolygon 209              316  7.78512e+07      1.16e-04\npolygon 210               13  1.09564e+05      1.64e-07\npolygon 211               18  3.49727e+05      5.22e-07\npolygon 212               31  1.23017e+06      1.84e-06\npolygon 213               16  6.55537e+05      9.79e-07\npolygon 214               24  8.49487e+05      1.27e-06\npolygon 215 (hole)         5 -3.46963e-07     -5.18e-19\npolygon 216 (hole)         4 -6.69787e-07     -1.00e-18\npolygon 217 (hole)         4 -1.41603e-07     -2.11e-19\npolygon 218               30  2.54436e+06      3.80e-06\npolygon 219              336  4.15806e+07      6.21e-05\npolygon 220 (hole)         6 -2.04487e-06     -3.05e-18\npolygon 221 (hole)         4 -2.93932e-07     -4.39e-19\npolygon 222 (hole)         3 -3.03547e-08     -4.53e-20\npolygon 223              330  1.69190e+08      2.53e-04\npolygon 224               47  1.08035e+07      1.61e-05\npolygon 225               39  4.94369e+06      7.38e-06\npolygon 226 (hole)         4 -9.31715e-07     -1.39e-18\npolygon 227 (hole)         3 -1.61548e-12     -2.41e-24\npolygon 228 (hole)         3 -1.07143e-07     -1.60e-19\npolygon 229 (hole)         4 -6.10340e-07     -9.11e-19\npolygon 230               23  2.72438e+06      4.07e-06\npolygon 231               33  5.70263e+06      8.52e-06\npolygon 232 (hole)         4 -1.12608e-07     -1.68e-19\npolygon 233 (hole)         4 -8.85831e-08     -1.32e-19\npolygon 234               90  4.20329e+07      6.28e-05\npolygon 235               28  1.35341e+06      2.02e-06\npolygon 236              225  1.08816e+08      1.62e-04\npolygon 237               33  9.16670e+06      1.37e-05\npolygon 238 (hole)         3 -9.13049e-09     -1.36e-20\npolygon 239 (hole)         4 -4.56911e-07     -6.82e-19\npolygon 240              192  7.02655e+07      1.05e-04\npolygon 241               49  1.49245e+07      2.23e-05\npolygon 242               98  1.79076e+07      2.67e-05\npolygon 243 (hole)         4 -2.18459e-09     -3.26e-21\npolygon 244 (hole)         4 -1.36504e-06     -2.04e-18\npolygon 245 (hole)         5 -2.42563e-06     -3.62e-18\npolygon 246                6  6.37552e+05      9.52e-07\npolygon 247 (hole)         3 -2.79397e-08     -4.17e-20\npolygon 248               49  1.01233e+07      1.51e-05\npolygon 249 (hole)         3 -1.17677e-06     -1.76e-18\npolygon 250              141  3.43053e+07      5.12e-05\npolygon 251 (hole)         6 -3.18516e-06     -4.76e-18\npolygon 252              195  3.24345e+07      4.84e-05\npolygon 253               51  3.38313e+06      5.05e-06\npolygon 254               34  2.01400e+06      3.01e-06\npolygon 255 (hole)         4 -3.14136e-07     -4.69e-19\npolygon 256 (hole)         3 -4.27796e-07     -6.39e-19\npolygon 257               13  2.50435e+05      3.74e-07\npolygon 258                9  9.04824e+04      1.35e-07\npolygon 259               34  4.61794e+06      6.90e-06\npolygon 260               17  4.58200e+05      6.84e-07\npolygon 261               15  2.74776e+05      4.10e-07\npolygon 262 (hole)         4 -2.17893e-06     -3.25e-18\npolygon 263 (hole)         5 -7.02326e-06     -1.05e-17\npolygon 264               21  5.34978e+05      7.99e-07\npolygon 265               19  4.55347e+05      6.80e-07\npolygon 266 (hole)         6 -4.09510e-06     -6.11e-18\npolygon 267               71  3.42557e+06      5.11e-06\npolygon 268 (hole)         3 -7.38399e-08     -1.10e-19\npolygon 269               24  1.32420e+06      1.98e-06\npolygon 270               15  3.26247e+05      4.87e-07\npolygon 271               39  8.65790e+05      1.29e-06\npolygon 272               43  1.41627e+06      2.11e-06\npolygon 273               24  7.52068e+05      1.12e-06\npolygon 274               96  1.32101e+07      1.97e-05\npolygon 275               38  1.18003e+06      1.76e-06\npolygon 276              429  5.99087e+08      8.95e-04\npolygon 277               13  1.74105e+05      2.60e-07\npolygon 278               19  2.52336e+05      3.77e-07\npolygon 279               16  3.11495e+05      4.65e-07\npolygon 280               11  9.11047e+04      1.36e-07\npolygon 281               12  2.13470e+05      3.19e-07\npolygon 282               17  5.82663e+05      8.70e-07\npolygon 283 (hole)         4 -1.89536e-06     -2.83e-18\npolygon 284               56  2.60440e+07      3.89e-05\npolygon 285              107  4.91389e+06      7.34e-06\npolygon 286 (hole)         7 -2.04270e-06     -3.05e-18\npolygon 287               51  2.79076e+06      4.17e-06\npolygon 288 (hole)         5 -1.27010e-06     -1.90e-18\npolygon 289               89  1.61156e+07      2.41e-05\npolygon 290 (hole)         4 -2.08446e-08     -3.11e-20\npolygon 291 (hole)         3 -1.60149e-08     -2.39e-20\npolygon 292               28  1.30499e+06      1.95e-06\npolygon 293 (hole)         4 -5.63014e-07     -8.41e-19\npolygon 294               11  1.27616e+05      1.91e-07\npolygon 295               34  2.54199e+06      3.80e-06\npolygon 296               27  1.72476e+06      2.58e-06\npolygon 297 (hole)         3 -2.72458e-09     -4.07e-21\npolygon 298               37  2.01882e+06      3.01e-06\npolygon 299 (hole)         4 -5.70504e-07     -8.52e-19\npolygon 300               23  1.65571e+06      2.47e-06\npolygon 301               33  3.05816e+06      4.57e-06\npolygon 302 (hole)         4 -8.37974e-07     -1.25e-18\npolygon 303 (hole)         4 -2.08298e-07     -3.11e-19\npolygon 304 (hole)         4 -2.05163e-07     -3.06e-19\npolygon 305               14  3.23153e+05      4.83e-07\npolygon 306               91  1.51209e+07      2.26e-05\npolygon 307               12  2.42901e+05      3.63e-07\npolygon 308 (hole)         3 -7.12933e-09     -1.06e-20\npolygon 309 (hole)         4 -2.12296e-09     -3.17e-21\npolygon 310 (hole)         5 -6.51128e-07     -9.72e-19\npolygon 311               11  1.37889e+05      2.06e-07\npolygon 312 (hole)         4 -7.83312e-07     -1.17e-18\npolygon 313 (hole)         4 -2.15527e-07     -3.22e-19\npolygon 314 (hole)         3 -2.24169e-08     -3.35e-20\npolygon 315               58  2.29751e+07      3.43e-05\npolygon 316               48  5.10265e+06      7.62e-06\npolygon 317               22  1.30706e+06      1.95e-06\npolygon 318 (hole)         4 -2.64848e-06     -3.95e-18\npolygon 319               15  3.49480e+05      5.22e-07\npolygon 320 (hole)        15 -2.06284e-05     -3.08e-17\npolygon 321               17  1.57570e+06      2.35e-06\npolygon 322 (hole)         4 -4.42575e-07     -6.61e-19\npolygon 323 (hole)         4 -5.27325e-06     -7.87e-18\npolygon 324 (hole)         6 -6.26349e-06     -9.35e-18\npolygon 325 (hole)         4 -6.27134e-06     -9.36e-18\npolygon 326 (hole)         4 -3.59342e-06     -5.37e-18\npolygon 327 (hole)         4 -5.02133e-08     -7.50e-20\npolygon 328 (hole)         3 -7.53308e-09     -1.12e-20\npolygon 329 (hole)         4 -2.64937e-07     -3.96e-19\npolygon 330 (hole)        10 -5.93010e-06     -8.85e-18\npolygon 331 (hole)         3 -3.39743e-06     -5.07e-18\npolygon 332 (hole)         4 -3.71039e-07     -5.54e-19\npolygon 333 (hole)        21 -6.24740e-06     -9.33e-18\npolygon 334 (hole)         3 -6.29672e-07     -9.40e-19\npolygon 335 (hole)         4 -1.64658e-07     -2.46e-19\npolygon 336 (hole)         3 -2.26368e-10     -3.38e-22\npolygon 337 (hole)         3 -7.64382e-10     -1.14e-21\npolygon 338 (hole)         3 -3.82634e-08     -5.71e-20\npolygon 339               34  3.68725e+06      5.51e-06\npolygon 340 (hole)         3 -2.04657e-07     -3.06e-19\npolygon 341 (hole)         4 -4.60327e-07     -6.87e-19\npolygon 342 (hole)         3 -3.46305e-07     -5.17e-19\npolygon 343 (hole)         3 -2.24522e-07     -3.35e-19\npolygon 344 (hole)         4 -3.10471e-07     -4.64e-19\npolygon 345 (hole)         3 -1.29881e-08     -1.94e-20\npolygon 346               34  5.21904e+06      7.79e-06\npolygon 347 (hole)         4 -8.16830e-07     -1.22e-18\npolygon 348 (hole)         4 -5.25346e-12     -7.84e-24\npolygon 349 (hole)         4 -1.34474e-07     -2.01e-19\npolygon 350 (hole)         4 -7.58535e-07     -1.13e-18\npolygon 351               24  5.42734e+06      8.10e-06\npolygon 352 (hole)         4 -3.70207e-07     -5.53e-19\npolygon 353 (hole)         4 -4.44568e-07     -6.64e-19\npolygon 354 (hole)         4 -1.37458e-06     -2.05e-18\npolygon 355 (hole)         4 -3.82934e-06     -5.72e-18\npolygon 356 (hole)         3 -1.56625e-06     -2.34e-18\npolygon 357 (hole)         4 -4.24394e-08     -6.34e-20\npolygon 358 (hole)         4 -7.88438e-08     -1.18e-19\npolygon 359 (hole)         5 -6.25364e-07     -9.34e-19\npolygon 360 (hole)         4 -4.68732e-09     -7.00e-21\npolygon 361 (hole)         3 -3.01326e-07     -4.50e-19\npolygon 362 (hole)         3 -2.73646e-08     -4.09e-20\npolygon 363 (hole)         4 -5.74129e-07     -8.57e-19\npolygon 364              422  4.66497e+08      6.97e-04\npolygon 365 (hole)         5 -1.31979e-06     -1.97e-18\npolygon 366 (hole)         3 -5.34019e-10     -7.97e-22\npolygon 367 (hole)         3 -1.99125e-09     -2.97e-21\npolygon 368 (hole)         3 -1.39870e-07     -2.09e-19\npolygon 369 (hole)         3 -1.07121e-06     -1.60e-18\npolygon 370 (hole)         3 -4.31047e-07     -6.44e-19\npolygon 371 (hole)         4 -3.49431e-07     -5.22e-19\npolygon 372              142  2.98767e+07      4.46e-05\npolygon 373 (hole)         3 -2.44926e-08     -3.66e-20\npolygon 374 (hole)         3 -3.19009e-08     -4.76e-20\npolygon 375 (hole)         3 -2.59781e-08     -3.88e-20\npolygon 376 (hole)         3 -1.22448e-07     -1.83e-19\npolygon 377              132  2.18707e+07      3.27e-05\npolygon 378 (hole)         3 -3.60761e-07     -5.39e-19\npolygon 379 (hole)         3 -2.37207e-08     -3.54e-20\npolygon 380 (hole)         4 -8.71149e-07     -1.30e-18\npolygon 381 (hole)         4 -1.81852e-06     -2.72e-18\npolygon 382 (hole)         3 -9.47568e-09     -1.41e-20\npolygon 383 (hole)         4 -1.05268e-06     -1.57e-18\npolygon 384 (hole)         9 -8.92711e-06     -1.33e-17\npolygon 385 (hole)         4 -1.59532e-06     -2.38e-18\npolygon 386 (hole)         5 -8.69411e-07     -1.30e-18\npolygon 387 (hole)         6 -5.29194e-06     -7.90e-18\npolygon 388 (hole)        12 -7.93669e-06     -1.19e-17\npolygon 389 (hole)         3 -3.65933e-08     -5.46e-20\npolygon 390               19  5.88230e+05      8.78e-07\npolygon 391 (hole)         3 -6.88046e-08     -1.03e-19\npolygon 392               22  1.77611e+06      2.65e-06\npolygon 393 (hole)         4 -6.42929e-04     -9.60e-16\npolygon 394               40  4.09952e+06      6.12e-06\npolygon 395 (hole)         3 -2.52078e-03     -3.76e-15\npolygon 396 (hole)         3 -1.14757e-07     -1.71e-19\npolygon 397               28  1.47685e+06      2.21e-06\npolygon 398 (hole)         4 -3.14458e-08     -4.70e-20\npolygon 399 (hole)         4 -8.02831e-08     -1.20e-19\npolygon 400 (hole)         8 -8.93463e-02     -1.33e-13\npolygon 401 (hole)         3 -6.85896e-11     -1.02e-22\npolygon 402 (hole)         4 -1.16516e-07     -1.74e-19\npolygon 403               67  9.99685e+06      1.49e-05\npolygon 404 (hole)         6 -3.37319e-06     -5.04e-18\npolygon 405 (hole)         7 -9.81865e-07     -1.47e-18\npolygon 406 (hole)         3 -6.88049e-10     -1.03e-21\npolygon 407 (hole)         3 -3.18016e-08     -4.75e-20\npolygon 408 (hole)         8 -6.36344e-02     -9.50e-14\npolygon 409 (hole)         6 -7.57977e-02     -1.13e-13\npolygon 410 (hole)         4 -5.06714e-07     -7.57e-19\npolygon 411 (hole)         7 -5.87793e-06     -8.78e-18\npolygon 412 (hole)        10 -2.86267e-06     -4.27e-18\npolygon 413 (hole)         7 -1.06387e-06     -1.59e-18\npolygon 414 (hole)         3 -4.31917e-06     -6.45e-18\npolygon 415 (hole)         8 -1.08149e-06     -1.61e-18\npolygon 416 (hole)         3 -1.00264e-08     -1.50e-20\npolygon 417 (hole)        10 -2.61217e-06     -3.90e-18\npolygon 418 (hole)         6 -1.06953e-06     -1.60e-18\npolygon 419 (hole)         4 -1.90065e-07     -2.84e-19\npolygon 420 (hole)         4 -2.24224e-02     -3.35e-14\npolygon 421 (hole)         6 -1.09700e-07     -1.64e-19\npolygon 422 (hole)        11 -2.01202e-06     -3.00e-18\npolygon 423 (hole)         5 -9.35663e-02     -1.40e-13\npolygon 424 (hole)         4 -5.24917e-08     -7.84e-20\npolygon 425 (hole)         7 -1.21076e-06     -1.81e-18\npolygon 426 (hole)        13 -1.39251e-01     -2.08e-13\npolygon 427 (hole)         7 -1.46533e-01     -2.19e-13\npolygon 428 (hole)         6 -7.59071e-02     -1.13e-13\npolygon 429 (hole)         7 -5.15914e-03     -7.70e-15\npolygon 430 (hole)        10 -4.09465e-02     -6.11e-14\npolygon 431 (hole)        21 -1.86624e-01     -2.79e-13\npolygon 432 (hole)         3 -1.69684e-02     -2.53e-14\npolygon 433 (hole)         8 -4.08363e-02     -6.10e-14\npolygon 434 (hole)         3 -1.73631e-02     -2.59e-14\npolygon 435 (hole)         5 -1.41820e-02     -2.12e-14\npolygon 436 (hole)        10 -6.15227e-02     -9.19e-14\npolygon 437 (hole)         8 -2.90782e-02     -4.34e-14\npolygon 438 (hole)         8 -6.15579e-02     -9.19e-14\npolygon 439 (hole)         4 -7.46409e-04     -1.11e-15\npolygon 440 (hole)         4 -1.05431e-02     -1.57e-14\npolygon 441 (hole)         7 -1.72082e-06     -2.57e-18\npolygon 442 (hole)         7 -2.49218e-06     -3.72e-18\npolygon 443 (hole)         4 -8.25150e-03     -1.23e-14\npolygon 444 (hole)         3 -2.15876e-07     -3.22e-19\npolygon 445 (hole)         6 -7.79825e-07     -1.16e-18\npolygon 446 (hole)         3 -2.59990e-02     -3.88e-14\npolygon 447 (hole)         4 -1.96870e-02     -2.94e-14\npolygon 448 (hole)         3 -9.09758e-03     -1.36e-14\npolygon 449 (hole)         3 -4.01475e-05     -5.99e-17\npolygon 450 (hole)         9 -2.41806e-02     -3.61e-14\npolygon 451 (hole)         4 -4.08101e-08     -6.09e-20\npolygon 452                3  0.00000e+00      0.00e+00\npolygon 453 (hole)         7 -5.73306e-02     -8.56e-14\npolygon 454 (hole)         4 -4.26735e-02     -6.37e-14\npolygon 455 (hole)         3 -2.21993e-08     -3.31e-20\npolygon 456 (hole)         5 -8.18708e-07     -1.22e-18\npolygon 457 (hole)         7 -1.69748e-02     -2.53e-14\npolygon 458 (hole)         3 -4.66468e-08     -6.97e-20\npolygon 459 (hole)         3 -1.05617e-02     -1.58e-14\npolygon 460 (hole)         4 -1.05444e-06     -1.57e-18\npolygon 461 (hole)         4 -1.34632e-07     -2.01e-19\npolygon 462 (hole)         4 -1.39750e-08     -2.09e-20\npolygon 463 (hole)         4 -3.58077e-08     -5.35e-20\npolygon 464 (hole)         5 -4.57466e-06     -6.83e-18\npolygon 465               25  4.82266e+05      7.20e-07\npolygon 466 (hole)         4 -2.04127e-07     -3.05e-19\npolygon 467 (hole)         6 -3.72405e-02     -5.56e-14\npolygon 468 (hole)         3 -3.37970e-07     -5.05e-19\npolygon 469 (hole)         7 -3.08334e-02     -4.60e-14\npolygon 470 (hole)         4 -5.73988e-08     -8.57e-20\npolygon 471 (hole)         4 -6.69856e-03     -1.00e-14\npolygon 472 (hole)         4 -1.15937e-02     -1.73e-14\npolygon 473 (hole)         4 -6.51952e-07     -9.73e-19\npolygon 474 (hole)         4 -3.11046e-03     -4.64e-15\npolygon 475 (hole)        12 -1.45689e-01     -2.18e-13\npolygon 476 (hole)         6 -6.22064e-07     -9.29e-19\npolygon 477 (hole)         4 -1.41734e-07     -2.12e-19\npolygon 478 (hole)         3 -6.12975e-07     -9.15e-19\npolygon 479 (hole)         8 -6.15169e-06     -9.19e-18\npolygon 480 (hole)         4 -5.64800e-02     -8.43e-14\npolygon 481 (hole)         3 -1.11189e-02     -1.66e-14\npolygon 482 (hole)         3 -1.66641e-07     -2.49e-19\npolygon 483 (hole)         4 -2.07175e-09     -3.09e-21\npolygon 484 (hole)         3 -4.92109e-08     -7.35e-20\npolygon 485 (hole)         4 -2.60006e-02     -3.88e-14\npolygon 486 (hole)         3 -1.01395e-11     -1.51e-23\npolygon 487 (hole)         4 -2.21624e-10     -3.31e-22\npolygon 488 (hole)         4 -1.05862e-07     -1.58e-19\npolygon 489 (hole)         3 -1.17217e-11     -1.75e-23\npolygon 490 (hole)        28 -1.79082e-01     -2.67e-13\npolygon 491 (hole)         4 -1.58212e-04     -2.36e-16\npolygon 492 (hole)         4 -3.64666e-07     -5.45e-19\npolygon 493 (hole)         4 -9.07721e-06     -1.36e-17\npolygon 494 (hole)         4 -6.73612e-03     -1.01e-14\npolygon 495               16  4.14093e+05      6.18e-07\npolygon 496 (hole)         4 -5.09041e-07     -7.60e-19\npolygon 497 (hole)         4 -1.30783e-07     -1.95e-19\npolygon 498 (hole)         4 -2.14069e-09     -3.20e-21\npolygon 499 (hole)         4 -1.82795e-08     -2.73e-20\npolygon 500 (hole)         4 -5.36782e-03     -8.02e-15\npolygon 501 (hole)         6 -1.51450e-02     -2.26e-14\npolygon 502 (hole)         4 -4.38078e-03     -6.54e-15\npolygon 503 (hole)         4 -1.36409e-02     -2.04e-14\npolygon 504 (hole)         4 -3.84271e-02     -5.74e-14\npolygon 505 (hole)         3 -7.56650e-03     -1.13e-14\npolygon 506 (hole)         3 -3.20234e-07     -4.78e-19\npolygon 507 (hole)         4 -8.04110e-03     -1.20e-14\npolygon 508 (hole)         6 -2.53481e-02     -3.78e-14\npolygon 509 (hole)         3 -4.18749e-08     -6.25e-20\npolygon 510 (hole)         4 -1.15603e-02     -1.73e-14\npolygon 511 (hole)         3 -2.16578e-03     -3.23e-15\npolygon 512 (hole)         4 -3.80479e-07     -5.68e-19\npolygon 513 (hole)         3 -4.76364e-08     -7.11e-20\npolygon 514 (hole)         4 -4.65116e-07     -6.94e-19\npolygon 515 (hole)         3 -1.86664e-07     -2.79e-19\npolygon 516 (hole)         3 -2.87542e-03     -4.29e-15\npolygon 517 (hole)         5 -2.50764e-08     -3.74e-20\npolygon 518 (hole)         6 -7.90541e-07     -1.18e-18\npolygon 519 (hole)         4 -5.42478e-02     -8.10e-14\npolygon 520 (hole)         3 -4.75090e-03     -7.09e-15\npolygon 521 (hole)         4 -3.45047e-02     -5.15e-14\npolygon 522 (hole)         6 -7.20472e-03     -1.08e-14\npolygon 523 (hole)         3 -3.04805e-12     -4.55e-24\npolygon 524 (hole)         4 -8.16292e-08     -1.22e-19\npolygon 525 (hole)         6 -7.71308e-07     -1.15e-18\npolygon 526 (hole)         4 -2.01300e-02     -3.01e-14\npolygon 527 (hole)         4 -1.06474e-07     -1.59e-19\npolygon 528 (hole)         6 -1.34176e-06     -2.00e-18\npolygon 529 (hole)         6 -1.08555e-07     -1.62e-19\npolygon 530 (hole)         3 -1.22081e-07     -1.82e-19\npolygon 531 (hole)         7 -1.14683e-06     -1.71e-18\npolygon 532 (hole)         3 -4.64709e-07     -6.94e-19\npolygon 533 (hole)         4 -7.86243e-07     -1.17e-18\npolygon 534 (hole)         9 -7.99880e-02     -1.19e-13\npolygon 535 (hole)         3 -1.61996e-07     -2.42e-19\npolygon 536 (hole)         6 -1.02196e-07     -1.53e-19\npolygon 537 (hole)         4 -1.30938e-03     -1.96e-15\npolygon 538 (hole)         4 -1.42378e-11     -2.13e-23\npolygon 539 (hole)         9 -6.93637e-06     -1.04e-17\npolygon 540 (hole)         9 -1.92423e-02     -2.87e-14\npolygon 541 (hole)         4 -1.00754e-06     -1.50e-18\npolygon 542 (hole)         3 -2.44523e-07     -3.65e-19\npolygon 543 (hole)         4 -2.73889e-02     -4.09e-14\npolygon 544 (hole)         4 -1.09638e-07     -1.64e-19\npolygon 545 (hole)         6 -2.07150e-06     -3.09e-18\npolygon 546 (hole)         5 -3.09883e-07     -4.63e-19\npolygon 547 (hole)         3 -1.54562e-06     -2.31e-18\npolygon 548 (hole)         3 -1.15109e-02     -1.72e-14\npolygon 549 (hole)         4 -3.57695e-08     -5.34e-20\npolygon 550 (hole)         5 -1.82216e-06     -2.72e-18\npolygon 551 (hole)         4 -8.77810e-02     -1.31e-13\npolygon 552 (hole)         7 -2.49873e-06     -3.73e-18\npolygon 553 (hole)         3 -7.17116e-07     -1.07e-18\npolygon 554               26  3.03928e+06      4.54e-06\npolygon 555 (hole)         6 -8.99139e-02     -1.34e-13\npolygon 556 (hole)         6 -1.07810e-06     -1.61e-18\npolygon 557 (hole)         4 -4.49324e-07     -6.71e-19\npolygon 558 (hole)         4 -1.63537e-06     -2.44e-18\npolygon 559 (hole)         4 -1.66983e-08     -2.49e-20\npolygon 560 (hole)         3 -1.20354e-07     -1.80e-19\npolygon 561 (hole)         6 -6.18153e-06     -9.23e-18\npolygon 562 (hole)         4 -3.03787e-07     -4.54e-19\npolygon 563 (hole)         6 -1.02159e-06     -1.53e-18\npolygon 564 (hole)         8 -2.04339e-06     -3.05e-18\npolygon 565 (hole)         7 -1.69870e-01     -2.54e-13\npolygon 566 (hole)         8 -7.11283e-06     -1.06e-17\npolygon 567 (hole)        14 -3.82802e-06     -5.72e-18\npolygon 568 (hole)         4 -2.35641e-06     -3.52e-18\npolygon 569 (hole)         3 -1.51419e-07     -2.26e-19\npolygon 570 (hole)        11 -1.85737e-01     -2.77e-13\npolygon 571 (hole)         6 -2.18529e-06     -3.26e-18\npolygon 572 (hole)        11 -4.86346e-06     -7.26e-18\npolygon 573 (hole)         4 -3.83301e-07     -5.72e-19\npolygon 574 (hole)        32 -8.16597e-01     -1.22e-12\npolygon 575 (hole)         3 -2.74036e-07     -4.09e-19\npolygon 576 (hole)         4 -1.25077e-09     -1.87e-21\npolygon 577 (hole)         3 -3.99854e-08     -5.97e-20\npolygon 578 (hole)         4 -2.67722e-13     -4.00e-25\npolygon 579 (hole)         4 -8.73792e-08     -1.30e-19\npolygon 580 (hole)         3 -7.28025e-12     -1.09e-23\npolygon 581 (hole)         4 -1.73159e-07     -2.59e-19\npolygon 582 (hole)         3 -1.77999e-08     -2.66e-20\npolygon 583 (hole)         4 -2.22329e-08     -3.32e-20\npolygon 584 (hole)         3 -1.57852e-07     -2.36e-19\npolygon 585 (hole)         3 -2.88032e-09     -4.30e-21\npolygon 586 (hole)         3 -1.07568e-06     -1.61e-18\npolygon 587 (hole)         7 -6.59191e-02     -9.84e-14\npolygon 588 (hole)         4 -1.58960e-07     -2.37e-19\npolygon 589 (hole)         4 -2.73739e-07     -4.09e-19\npolygon 590 (hole)         3 -1.48932e-02     -2.22e-14\npolygon 591 (hole)        13 -3.56626e-01     -5.33e-13\npolygon 592 (hole)         4 -3.50738e-08     -5.24e-20\npolygon 593 (hole)         6 -3.99329e-06     -5.96e-18\npolygon 594 (hole)         8 -4.35683e-06     -6.51e-18\npolygon 595 (hole)         3 -1.64307e-06     -2.45e-18\npolygon 596 (hole)         3 -2.09234e-07     -3.12e-19\npolygon 597 (hole)         4 -1.29603e-07     -1.94e-19\npolygon 598               14  1.53563e+05      2.29e-07\npolygon 599 (hole)         6 -6.03221e-06     -9.01e-18\npolygon 600 (hole)        15 -2.31620e-01     -3.46e-13\npolygon 601 (hole)         4 -1.38723e-08     -2.07e-20\npolygon 602 (hole)         5 -1.30592e-06     -1.95e-18\npolygon 603 (hole)         4 -4.22857e-07     -6.31e-19\npolygon 604 (hole)         3 -4.27362e-08     -6.38e-20\npolygon 605 (hole)         4 -9.72694e-08     -1.45e-19\npolygon 606 (hole)         7 -1.59277e-06     -2.38e-18\npolygon 607 (hole)         4 -3.30055e-07     -4.93e-19\npolygon 608 (hole)         3 -2.27202e-11     -3.39e-23\npolygon 609 (hole)         6 -1.63424e-06     -2.44e-18\npolygon 610 (hole)         7 -5.32246e-06     -7.95e-18\npolygon 611 (hole)         7 -3.46670e-02     -5.18e-14\npolygon 612 (hole)         6 -1.14747e-06     -1.71e-18\npolygon 613 (hole)         3 -6.96187e-12     -1.04e-23\npolygon 614 (hole)         5 -1.22481e-06     -1.83e-18\npolygon 615 (hole)         7 -6.56975e-06     -9.81e-18\npolygon 616 (hole)        11 -3.75831e-06     -5.61e-18\npolygon 617 (hole)         9 -1.47233e-06     -2.20e-18\npolygon 618 (hole)         9 -4.22533e-06     -6.31e-18\npolygon 619 (hole)        13 -1.40633e-02     -2.10e-14\npolygon 620 (hole)        11 -2.28017e-06     -3.40e-18\npolygon 621 (hole)         4 -4.48255e-07     -6.69e-19\npolygon 622 (hole)         3 -9.77849e-09     -1.46e-20\npolygon 623 (hole)         4 -4.47668e-07     -6.68e-19\npolygon 624 (hole)         6 -2.76240e-02     -4.12e-14\npolygon 625 (hole)         3 -3.74154e-02     -5.59e-14\npolygon 626 (hole)         3 -1.16808e-02     -1.74e-14\npolygon 627 (hole)        10 -4.10705e-03     -6.13e-15\npolygon 628 (hole)        10 -1.69077e-06     -2.52e-18\npolygon 629 (hole)         3 -2.87094e-08     -4.29e-20\npolygon 630 (hole)         3 -3.26602e-08     -4.88e-20\npolygon 631 (hole)         3 -1.55568e-07     -2.32e-19\npolygon 632 (hole)         4 -9.39130e-07     -1.40e-18\npolygon 633 (hole)         4 -7.90017e-02     -1.18e-13\npolygon 634 (hole)         3 -1.07902e-03     -1.61e-15\npolygon 635 (hole)         3 -8.74114e-04     -1.31e-15\npolygon 636 (hole)         4 -4.24113e-08     -6.33e-20\npolygon 637 (hole)         5 -1.41525e-06     -2.11e-18\npolygon 638 (hole)         4 -1.16350e-06     -1.74e-18\npolygon 639 (hole)         3 -6.97838e-08     -1.04e-19\npolygon 640 (hole)        10 -5.59537e-02     -8.35e-14\npolygon 641 (hole)         4 -1.48865e-08     -2.22e-20\npolygon 642 (hole)         6 -6.68506e-07     -9.98e-19\npolygon 643 (hole)         3 -2.30992e-08     -3.45e-20\npolygon 644 (hole)         5 -4.30820e-07     -6.43e-19\npolygon 645 (hole)         4 -4.50814e-08     -6.73e-20\npolygon 646 (hole)         5 -1.83919e-07     -2.75e-19\npolygon 647 (hole)         8 -9.78938e-07     -1.46e-18\npolygon 648               19  5.08538e+05      7.59e-07\npolygon 649 (hole)         6 -1.54713e-06     -2.31e-18\npolygon 650 (hole)         4 -1.45573e-02     -2.17e-14\npolygon 651               16  1.80565e+05      2.70e-07\npolygon 652               26  9.75091e+05      1.46e-06\npolygon 653 (hole)         4 -1.26313e-06     -1.89e-18\npolygon 654 (hole)         4 -1.90718e-03     -2.85e-15\npolygon 655 (hole)         4 -1.07233e-07     -1.60e-19\npolygon 656 (hole)         3 -7.26183e-03     -1.08e-14\npolygon 657 (hole)         3 -2.76213e-10     -4.12e-22\npolygon 658 (hole)         3 -2.80771e-02     -4.19e-14\npolygon 659 (hole)         7 -5.31797e-03     -7.94e-15\npolygon 660 (hole)         5 -4.51363e-09     -6.74e-21\npolygon 661 (hole)         4 -3.64153e-07     -5.44e-19\npolygon 662 (hole)         4 -1.88745e-02     -2.82e-14\npolygon 663 (hole)         4 -1.01723e-07     -1.52e-19\npolygon 664 (hole)         3 -1.45605e-02     -2.17e-14\npolygon 665 (hole)         6 -2.86011e-06     -4.27e-18\npolygon 666 (hole)         3 -2.28810e-02     -3.42e-14\npolygon 667 (hole)         4 -9.08794e-08     -1.36e-19\npolygon 668 (hole)         5 -1.72617e-02     -2.58e-14\npolygon 669 (hole)         3 -4.96859e-03     -7.42e-15\npolygon 670 (hole)         4 -1.85807e-02     -2.77e-14\npolygon 671 (hole)         4 -8.61249e-03     -1.29e-14\npolygon 672 (hole)         3 -1.66645e-03     -2.49e-15\npolygon 673 (hole)         7 -1.66808e-02     -2.49e-14\npolygon 674 (hole)         4 -1.73584e-06     -2.59e-18\npolygon 675 (hole)         3 -8.26479e-08     -1.23e-19\npolygon 676 (hole)         6 -1.56749e-06     -2.34e-18\npolygon 677 (hole)         3 -2.86223e-09     -4.27e-21\npolygon 678 (hole)         8 -1.27636e-06     -1.91e-18\npolygon 679 (hole)        11 -3.66415e-06     -5.47e-18\npolygon 680 (hole)        10 -3.21224e-06     -4.80e-18\npolygon 681 (hole)        10 -2.58025e-06     -3.85e-18\npolygon 682 (hole)         3 -1.73697e-07     -2.59e-19\npolygon 683 (hole)         3 -1.38098e-08     -2.06e-20\npolygon 684 (hole)        14 -2.82179e-06     -4.21e-18\npolygon 685 (hole)         4 -2.41048e-07     -3.60e-19\npolygon 686 (hole)        19 -6.09380e-06     -9.10e-18\npolygon 687 (hole)         5 -5.81704e-07     -8.69e-19\npolygon 688 (hole)         8 -2.67945e-06     -4.00e-18\npolygon 689 (hole)        15 -6.54951e-06     -9.78e-18\npolygon 690 (hole)         3 -2.38016e-08     -3.55e-20\npolygon 691 (hole)         4 -1.05535e-06     -1.58e-18\npolygon 692 (hole)         8 -3.22016e-07     -4.81e-19\npolygon 693 (hole)         7 -1.49278e-06     -2.23e-18\npolygon 694 (hole)         8 -2.37875e-06     -3.55e-18\npolygon 695 (hole)         7 -6.28647e-07     -9.39e-19\npolygon 696 (hole)        16 -4.13786e-06     -6.18e-18\npolygon 697 (hole)        34 -1.71423e-05     -2.56e-17\npolygon 698 (hole)         4 -1.63033e-06     -2.43e-18\npolygon 699 (hole)         4 -2.10479e-07     -3.14e-19\npolygon 700 (hole)         8 -5.80075e-06     -8.66e-18\npolygon 701 (hole)         3 -6.63547e-08     -9.91e-20\npolygon 702 (hole)         8 -6.48529e-07     -9.68e-19\npolygon 703 (hole)         4 -1.22292e-06     -1.83e-18\npolygon 704 (hole)         3 -3.69723e-09     -5.52e-21\npolygon 705 (hole)         6 -1.48900e-06     -2.22e-18\npolygon 706 (hole)         8 -1.39392e-06     -2.08e-18\npolygon 707 (hole)        11 -5.05385e-06     -7.55e-18\npolygon 708 (hole)        15 -9.73640e-06     -1.45e-17\npolygon 709 (hole)         6 -9.42407e-07     -1.41e-18\npolygon 710 (hole)         4 -4.51758e-07     -6.75e-19\npolygon 711 (hole)         3 -1.40094e-08     -2.09e-20\npolygon 712 (hole)         4 -5.59670e-07     -8.36e-19\npolygon 713 (hole)         8 -5.07976e-07     -7.58e-19\npolygon 714 (hole)         9 -2.30103e-06     -3.44e-18\npolygon 715 (hole)        11 -1.85244e-06     -2.77e-18\npolygon 716 (hole)         4 -4.41141e-07     -6.59e-19\npolygon 717 (hole)         3 -5.14970e-09     -7.69e-21\npolygon 718 (hole)         3 -1.23756e-07     -1.85e-19\npolygon 719 (hole)        10 -5.08583e-06     -7.59e-18\npolygon 720 (hole)         3 -3.50795e-09     -5.24e-21\npolygon 721 (hole)         3 -2.55812e-08     -3.82e-20\npolygon 722 (hole)        10 -2.30769e-06     -3.45e-18\npolygon 723 (hole)         4 -2.79503e-07     -4.17e-19\npolygon 724 (hole)         5 -4.95816e-07     -7.40e-19\npolygon 725 (hole)        50 -2.64857e-05     -3.95e-17\npolygon 726 (hole)         4 -8.77056e-07     -1.31e-18\npolygon 727 (hole)         6 -2.22331e-06     -3.32e-18\npolygon 728 (hole)         4 -2.50835e-06     -3.75e-18\npolygon 729 (hole)         4 -1.17536e-07     -1.76e-19\npolygon 730 (hole)         5 -1.71933e-06     -2.57e-18\npolygon 731 (hole)         4 -2.01837e-06     -3.01e-18\npolygon 732 (hole)        10 -3.98806e-06     -5.95e-18\npolygon 733 (hole)         6 -2.21318e-06     -3.30e-18\npolygon 734 (hole)         6 -8.93389e-07     -1.33e-18\npolygon 735 (hole)         6 -2.07502e-06     -3.10e-18\npolygon 736 (hole)        25 -1.89169e-05     -2.82e-17\npolygon 737 (hole)         4 -7.39039e-08     -1.10e-19\npolygon 738 (hole)         4 -1.38246e-08     -2.06e-20\npolygon 739 (hole)         4 -3.40264e-07     -5.08e-19\npolygon 740 (hole)         3 -1.77119e-07     -2.64e-19\npolygon 741 (hole)        14 -6.84286e-06     -1.02e-17\npolygon 742 (hole)        12 -4.68955e-06     -7.00e-18\npolygon 743 (hole)         5 -5.12786e-07     -7.66e-19\npolygon 744 (hole)         7 -6.35489e-07     -9.49e-19\npolygon 745 (hole)         5 -4.23206e-07     -6.32e-19\npolygon 746 (hole)        14 -5.39036e-06     -8.05e-18\npolygon 747               19  2.15295e+05      3.21e-07\npolygon 748               16  3.50061e+05      5.23e-07\npolygon 749 (hole)         3 -1.78834e+02     -2.67e-10\npolygon 750               14  2.11571e+05      3.16e-07\npolygon 751               11  1.59536e+05      2.38e-07\npolygon 752              111  7.35028e+07      1.10e-04\npolygon 753               54  9.35305e+06      1.40e-05\npolygon 754               19  6.34649e+05      9.48e-07\npolygon 755               10  3.74827e+04      5.60e-08\npolygon 756               13  1.37100e+05      2.05e-07\npolygon 757               31  4.47193e+06      6.68e-06\npolygon 758               19  1.23742e+06      1.85e-06\npolygon 759               20  1.79201e+06      2.68e-06\npolygon 760               16  2.19464e+05      3.28e-07\npolygon 761               11  7.94092e+04      1.19e-07\npolygon 762               14  1.45779e+05      2.18e-07\npolygon 763               31  6.24672e+05      9.33e-07\npolygon 764               11  2.29288e+04      3.42e-08\npolygon 765               18  2.10998e+05      3.15e-07\npolygon 766               26  2.52571e+06      3.77e-06\npolygon 767               16  5.77783e+05      8.63e-07\npolygon 768               26  8.87985e+05      1.33e-06\npolygon 769               13  1.10557e+05      1.65e-07\npolygon 770               21  9.55338e+05      1.43e-06\npolygon 771               32  2.18189e+06      3.26e-06\npolygon 772               18  7.64830e+05      1.14e-06\npolygon 773               34  1.71336e+06      2.56e-06\npolygon 774              115  9.29594e+05      1.39e-06\npolygon 775               68  2.06761e+05      3.09e-07\npolygon 776               40  4.87851e+06      7.28e-06\npolygon 777               10  7.43137e+04      1.11e-07\npolygon 778               17  5.95020e+05      8.88e-07\npolygon 779               21  4.02132e+05      6.00e-07\npolygon 780               21  1.09635e+06      1.64e-06\npolygon 781               14  1.15356e+05      1.72e-07\npolygon 782               20  3.13610e+05      4.68e-07\npolygon 783              275  3.92648e+08      5.86e-04\npolygon 784               16  2.19612e+05      3.28e-07\npolygon 785               13  2.64858e+05      3.95e-07\npolygon 786               23  1.25549e+06      1.87e-06\npolygon 787                9  1.79312e+05      2.68e-07\npolygon 788               15  2.93132e+05      4.38e-07\npolygon 789               15  5.29892e+05      7.91e-07\npolygon 790               23  4.95351e+05      7.40e-07\npolygon 791               14  4.41976e+05      6.60e-07\npolygon 792               19  3.32318e+05      4.96e-07\npolygon 793               16  4.15914e+05      6.21e-07\npolygon 794               22  5.10526e+05      7.62e-07\npolygon 795               48  1.87148e+07      2.79e-05\npolygon 796               18  1.62882e+06      2.43e-06\npolygon 797               71  2.43615e+07      3.64e-05\npolygon 798              116  5.16444e+07      7.71e-05\npolygon 799               19  1.54144e+06      2.30e-06\npolygon 800               11  2.01013e+05      3.00e-07\npolygon 801               20  2.31201e+06      3.45e-06\npolygon 802               15  5.94674e+05      8.88e-07\npolygon 803              218  1.56252e+08      2.33e-04\npolygon 804              162  8.80247e+07      1.31e-04\npolygon 805               16  3.69968e+05      5.52e-07\npolygon 806               14  1.61451e+05      2.41e-07\npolygon 807               18  5.54566e+05      8.28e-07\npolygon 808               19  5.07078e+05      7.57e-07\npolygon 809               57  6.86475e+06      1.03e-05\npolygon 810               15  6.56018e+05      9.80e-07\npolygon 811               21  6.65092e+05      9.93e-07\npolygon 812               15  5.97784e+05      8.93e-07\npolygon 813               37  2.56010e+06      3.82e-06\npolygon 814               13  1.66996e+05      2.49e-07\npolygon 815               20  8.18381e+05      1.22e-06\npolygon 816               21  2.89704e+06      4.33e-06\npolygon 817               15  4.08213e+05      6.10e-07\npolygon 818              104  4.71547e+07      7.04e-05\npolygon 819               28  3.80443e+06      5.68e-06\npolygon 820               67  3.17343e+07      4.74e-05\npolygon 821              730  9.20735e+08      1.37e-03\npolygon 822               16  2.01576e+05      3.01e-07\npolygon 823               12  1.41506e+05      2.11e-07\npolygon 824               15  4.92125e+05      7.35e-07\npolygon 825               18  1.58128e+06      2.36e-06\npolygon 826               25  1.94322e+06      2.90e-06\npolygon 827               12  2.51373e+05      3.75e-07\npolygon 828              412  4.47936e+08      6.69e-04\npolygon 829               22  7.57105e+05      1.13e-06\npolygon 830               16  6.97434e+05      1.04e-06\npolygon 831               39  4.45130e+06      6.65e-06\npolygon 832               13  8.83786e+05      1.32e-06\npolygon 833               10  2.06200e+05      3.08e-07\npolygon 834               76  3.60497e+07      5.38e-05\npolygon 835               13  4.56433e+05      6.82e-07\npolygon 836               28  2.30613e+06      3.44e-06\npolygon 837               27  2.50338e+06      3.74e-06\npolygon 838               14  4.69238e+05      7.01e-07\npolygon 839               10  1.69886e+05      2.54e-07\npolygon 840               16  5.42822e+05      8.11e-07\npolygon 841               10  1.17633e+05      1.76e-07\npolygon 842                8  7.08579e+04      1.06e-07\npolygon 843              144  7.85300e+07      1.17e-04\npolygon 844               37  1.93477e+06      2.89e-06\npolygon 845               25  5.59996e+05      8.36e-07\npolygon 846               44  2.86031e+06      4.27e-06\npolygon 847               26  1.26276e+06      1.89e-06\npolygon 848              149  1.37840e+08      2.06e-04\npolygon 849               18  4.84958e+05      7.24e-07\npolygon 850               73  2.93195e+07      4.38e-05\npolygon 851               45  6.87481e+06      1.03e-05\npolygon 852               64  1.80880e+07      2.70e-05\npolygon 853               12  8.76879e+05      1.31e-06\npolygon 854               26  2.78381e+06      4.16e-06\npolygon 855               35  8.72326e+06      1.30e-05\npolygon 856               53  1.06237e+07      1.59e-05\npolygon 857               26  5.40467e+06      8.07e-06\npolygon 858              148  1.05037e+08      1.57e-04\npolygon 859               21  8.32798e+05      1.24e-06\npolygon 860               21  2.23023e+06      3.33e-06\npolygon 861                8  6.30805e+05      9.42e-07\npolygon 862               78  3.67603e+07      5.49e-05\npolygon 863               18  1.64745e+06      2.46e-06\npolygon 864               58  1.31747e+07      1.97e-05\npolygon 865               94  1.16837e+07      1.74e-05\npolygon 866               53  3.17801e+06      4.75e-06\npolygon 867              137  8.46454e+06      1.26e-05\npolygon 868               23  4.36507e+05      6.52e-07\npolygon 869               27  9.72136e+05      1.45e-06\npolygon 870 (hole)         5 -6.97021e-07     -1.04e-18\npolygon 871 (hole)         8 -3.52861e-06     -5.27e-18\npolygon 872               55  1.98854e+06      2.97e-06\npolygon 873 (hole)         3 -2.04762e-08     -3.06e-20\npolygon 874 (hole)         4 -6.22375e-07     -9.29e-19\npolygon 875 (hole)         4 -2.36873e-07     -3.54e-19\npolygon 876 (hole)        10 -2.81071e-06     -4.20e-18\npolygon 877 (hole)         3 -7.27160e-09     -1.09e-20\npolygon 878 (hole)         4 -1.10286e-06     -1.65e-18\npolygon 879 (hole)         6 -1.93232e-06     -2.89e-18\npolygon 880 (hole)         4 -1.51309e-07     -2.26e-19\npolygon 881 (hole)        10 -7.07665e-06     -1.06e-17\npolygon 882 (hole)         6 -2.19324e-07     -3.27e-19\npolygon 883 (hole)         4 -2.88552e-07     -4.31e-19\npolygon 884 (hole)         4 -1.75262e-07     -2.62e-19\npolygon 885 (hole)         6 -7.12345e-07     -1.06e-18\npolygon 886 (hole)         4 -1.22366e-06     -1.83e-18\npolygon 887 (hole)         3 -2.13831e-08     -3.19e-20\npolygon 888 (hole)         4 -9.22699e-07     -1.38e-18\npolygon 889 (hole)         7 -1.61583e-06     -2.41e-18\npolygon 890 (hole)         4 -3.05722e-07     -4.56e-19\npolygon 891 (hole)         4 -2.78836e-07     -4.16e-19\npolygon 892 (hole)        10 -4.43177e-06     -6.62e-18\npolygon 893 (hole)         4 -1.73147e-06     -2.59e-18\npolygon 894 (hole)         5 -1.27245e-06     -1.90e-18\npolygon 895 (hole)         6 -1.04516e-06     -1.56e-18\npolygon 896 (hole)        10 -1.02181e-06     -1.53e-18\npolygon 897 (hole)        10 -4.76338e-06     -7.11e-18\npolygon 898 (hole)         3 -5.17982e-08     -7.73e-20\npolygon 899 (hole)         4 -4.56779e-07     -6.82e-19\npolygon 900 (hole)        14 -6.60975e-06     -9.87e-18\npolygon 901 (hole)         4 -1.89112e-07     -2.82e-19\npolygon 902 (hole)         3 -2.16955e-08     -3.24e-20\npolygon 903 (hole)         5 -7.94332e-07     -1.19e-18\npolygon 904 (hole)         4 -9.89198e-08     -1.48e-19\npolygon 905 (hole)         3 -1.77373e-08     -2.65e-20\npolygon 906 (hole)         4 -3.64370e-07     -5.44e-19\npolygon 907 (hole)         4 -2.24606e-07     -3.35e-19\npolygon 908 (hole)         8 -2.36780e-06     -3.54e-18\npolygon 909 (hole)         4 -7.04234e-08     -1.05e-19\npolygon 910 (hole)         5 -5.34330e-07     -7.98e-19\npolygon 911 (hole)         3 -7.79609e-08     -1.16e-19\npolygon 912 (hole)         4 -1.25316e-07     -1.87e-19\npolygon 913 (hole)         7 -1.04799e-06     -1.56e-18\npolygon 914 (hole)        10 -2.48459e-06     -3.71e-18\npolygon 915 (hole)         7 -7.38000e-07     -1.10e-18\npolygon 916 (hole)         7 -3.13894e-07     -4.69e-19\npolygon 917 (hole)        12 -7.14816e-06     -1.07e-17\npolygon 918 (hole)         6 -5.26802e-07     -7.87e-19\npolygon 919 (hole)        12 -4.31344e-06     -6.44e-18\npolygon 920 (hole)         5 -5.57508e-07     -8.32e-19\npolygon 921 (hole)         4 -2.54699e-07     -3.80e-19\npolygon 922 (hole)         4 -1.30150e-07     -1.94e-19\npolygon 923 (hole)         7 -6.13772e-07     -9.16e-19\npolygon 924 (hole)         7 -6.14897e-06     -9.18e-18\npolygon 925 (hole)         3 -2.18561e-08     -3.26e-20\npolygon 926 (hole)         3 -6.63760e-09     -9.91e-21\npolygon 927 (hole)         4 -2.83899e-07     -4.24e-19\npolygon 928 (hole)         8 -3.03154e-06     -4.53e-18\npolygon 929 (hole)         4 -1.34999e-07     -2.02e-19\npolygon 930 (hole)         4 -9.24206e-09     -1.38e-20\npolygon 931 (hole)         4 -3.37664e-07     -5.04e-19\npolygon 932 (hole)         4 -6.24926e-07     -9.33e-19\npolygon 933 (hole)         4 -1.86883e-07     -2.79e-19\npolygon 934 (hole)         5 -3.87980e-07     -5.79e-19\npolygon 935 (hole)         3 -1.19726e-07     -1.79e-19\npolygon 936 (hole)         3 -3.16269e-08     -4.72e-20\npolygon 937 (hole)        14 -1.35927e-05     -2.03e-17\npolygon 938 (hole)         4 -2.44946e-07     -3.66e-19\npolygon 939 (hole)         5 -7.43645e-08     -1.11e-19\npolygon 940 (hole)         3 -2.82993e-08     -4.23e-20\npolygon 941 (hole)         6 -3.50049e-06     -5.23e-18\npolygon 942 (hole)         3 -3.12799e-09     -4.67e-21\npolygon 943 (hole)         8 -1.63751e-06     -2.45e-18\npolygon 944 (hole)         3 -3.41559e-08     -5.10e-20\npolygon 945 (hole)         4 -1.35920e-07     -2.03e-19\npolygon 946 (hole)         6 -1.48117e-06     -2.21e-18\npolygon 947 (hole)         4 -1.87856e-06     -2.81e-18\npolygon 948 (hole)         5 -7.00330e-07     -1.05e-18\npolygon 949 (hole)         6 -9.15044e-07     -1.37e-18\npolygon 950 (hole)         4 -7.13686e-07     -1.07e-18\npolygon 951 (hole)         6 -1.69196e-06     -2.53e-18\npolygon 952               48  1.02651e+07      1.53e-05\npolygon 953 (hole)        12 -5.63666e-06     -8.42e-18\npolygon 954 (hole)         3 -6.62619e-07     -9.89e-19\npolygon 955 (hole)         4 -7.51731e-07     -1.12e-18\npolygon 956 (hole)         3 -4.76591e-07     -7.12e-19\npolygon 957 (hole)         4 -1.39374e-06     -2.08e-18\npolygon 958 (hole)         4 -3.54028e-06     -5.29e-18\npolygon 959 (hole)         3 -2.20492e-09     -3.29e-21\npolygon 960 (hole)        20 -1.44592e-05     -2.16e-17\npolygon 961 (hole)         5 -4.19637e-07     -6.27e-19\npolygon 962 (hole)        39 -1.89868e-05     -2.84e-17\npolygon 963 (hole)         6 -7.08690e-07     -1.06e-18\npolygon 964 (hole)         3 -5.33030e-08     -7.96e-20\npolygon 965 (hole)         3 -4.18672e-08     -6.25e-20\npolygon 966 (hole)         6 -1.19843e-06     -1.79e-18\npolygon 967 (hole)         5 -1.19407e-07     -1.78e-19\npolygon 968 (hole)         4 -7.75621e-08     -1.16e-19\npolygon 969 (hole)         8 -1.14379e-06     -1.71e-18\npolygon 970 (hole)         3 -2.13254e-08     -3.18e-20\npolygon 971 (hole)         7 -1.65696e-07     -2.47e-19\npolygon 972 (hole)         3 -1.12670e-09     -1.68e-21\npolygon 973 (hole)         3 -6.74502e-09     -1.01e-20\npolygon 974 (hole)         3 -8.15548e-08     -1.22e-19\npolygon 975 (hole)         3 -3.27681e-09     -4.89e-21\npolygon 976 (hole)         3 -1.22342e-08     -1.83e-20\npolygon 977 (hole)         3 -5.54257e-11     -8.28e-23\npolygon 978 (hole)         3 -3.48620e-09     -5.21e-21\npolygon 979 (hole)         4 -5.48096e-07     -8.18e-19\npolygon 980 (hole)         4 -6.02066e-08     -8.99e-20\npolygon 981 (hole)         3 -1.26456e-08     -1.89e-20\npolygon 982 (hole)         4 -6.89152e-08     -1.03e-19\npolygon 983 (hole)         4 -4.57305e-07     -6.83e-19\npolygon 984 (hole)         4 -7.91420e-07     -1.18e-18\npolygon 985 (hole)         4 -1.33472e-06     -1.99e-18\npolygon 986               15  3.16153e+05      4.72e-07\npolygon 987               22  8.93201e+05      1.33e-06\npolygon 988               18  2.91538e+05      4.35e-07\npolygon 989               59  3.70736e+06      5.54e-06\npolygon 990               11  1.55205e+05      2.32e-07\npolygon 991               14  1.87401e+05      2.80e-07\npolygon 992               11  6.54128e+04      9.77e-08\npolygon 993               11  8.64659e+04      1.29e-07\npolygon 994               12  2.25129e+05      3.36e-07\npolygon 995               30  2.72178e+06      4.06e-06\npolygon 996 (hole)         3 -2.26252e+00     -3.38e-12\npolygon 997              180  1.80314e+07      2.69e-05\npolygon 998               14  4.01942e+05      6.00e-07\npolygon 999              103  1.33467e+07      1.99e-05\npolygon 1000              14  2.07708e+05      3.10e-07\npolygon 1001              55  4.38623e+06      6.55e-06\npolygon 1002              41  4.69733e+06      7.01e-06\npolygon 1003              74  3.92633e+06      5.86e-06\npolygon 1004              31  2.79477e+06      4.17e-06\npolygon 1005              17  8.74607e+05      1.31e-06\npolygon 1006              26  4.50962e+05      6.73e-07\npolygon 1007              18  1.15065e+06      1.72e-06\npolygon 1008             164  1.48037e+07      2.21e-05\npolygon 1009              12  3.17290e+05      4.74e-07\npolygon 1010              69  2.59551e+07      3.88e-05\npolygon 1011              37  7.85963e+05      1.17e-06\npolygon 1012              14  3.37873e+05      5.05e-07\npolygon 1013              12  1.77980e+05      2.66e-07\npolygon 1014              21  6.46195e+05      9.65e-07\npolygon 1015              24  2.69998e+06      4.03e-06\npolygon 1016              30  1.00675e+06      1.50e-06\npolygon 1017              57  4.22747e+06      6.31e-06\npolygon 1018              23  8.63543e+05      1.29e-06\npolygon 1019              11  2.01925e+05      3.02e-07\npolygon 1020              95  2.88232e+07      4.30e-05\npolygon 1021             452  9.64208e+07      1.44e-04\npolygon 1022              77  1.72297e+07      2.57e-05\npolygon 1023              16  3.33522e+05      4.98e-07\npolygon 1024              19  6.82895e+05      1.02e-06\npolygon 1025              43  3.95062e+06      5.90e-06\npolygon 1026              29  1.00709e+06      1.50e-06\npolygon 1027              21  8.90014e+05      1.33e-06\npolygon 1028              22  7.93453e+05      1.18e-06\npolygon 1029              13  4.52813e+05      6.76e-07\npolygon 1030              30  1.49817e+06      2.24e-06\npolygon 1031              48  4.23996e+06      6.33e-06\npolygon 1032              37  1.20290e+06      1.80e-06\npolygon 1033              19  4.85805e+05      7.25e-07\npolygon 1034              46  2.18001e+06      3.26e-06\npolygon 1035               7  1.33723e+05      2.00e-07\npolygon 1036              54  1.82059e+07      2.72e-05\npolygon 1037              10  8.57866e+05      1.28e-06\npolygon 1038              14  1.98445e+05      2.96e-07\npolygon 1039              19  4.68357e+05      6.99e-07\npolygon 1040              52  8.57765e+06      1.28e-05\npolygon 1041              73  7.91998e+06      1.18e-05\npolygon 1042              23  8.19561e+06      1.22e-05\npolygon 1043              10  1.06594e+05      1.59e-07\npolygon 1044             169  1.39462e+07      2.08e-05\npolygon 1045              17  2.55915e+05      3.82e-07\npolygon 1046              12  1.81516e+05      2.71e-07\npolygon 1047              16  3.68509e+05      5.50e-07\npolygon 1048              12  1.24954e+05      1.87e-07\npolygon 1049            1012  4.61886e+08      6.90e-04\npolygon 1050              15  5.42647e+05      8.10e-07\npolygon 1051              12  5.53088e+05      8.26e-07\npolygon 1052              24  1.06455e+06      1.59e-06\npolygon 1053              14  3.17038e+05      4.73e-07\npolygon 1054              17  1.25559e+06      1.87e-06\npolygon 1055              16  1.92407e+06      2.87e-06\npolygon 1056              80  1.86306e+07      2.78e-05\npolygon 1057              11  6.83880e+04      1.02e-07\npolygon 1058             166  4.21470e+07      6.29e-05\npolygon 1059              22  1.36174e+06      2.03e-06\npolygon 1060              31  6.07363e+05      9.07e-07\npolygon 1061              10  1.27067e+05      1.90e-07\npolygon 1062             164  5.02951e+07      7.51e-05\npolygon 1063              17  1.20798e+06      1.80e-06\npolygon 1064              59  2.41720e+06      3.61e-06\npolygon 1065              12  2.52952e+05      3.78e-07\npolygon 1066              14  2.44407e+05      3.65e-07\npolygon 1067              43  4.89177e+06      7.30e-06\npolygon 1068              40  3.86642e+06      5.77e-06\npolygon 1069              23  4.59203e+05      6.86e-07\npolygon 1070              14  1.79442e+05      2.68e-07\npolygon 1071              13  1.61191e+05      2.41e-07\npolygon 1072              43  1.33365e+06      1.99e-06\npolygon 1073              75  1.20247e+07      1.80e-05\npolygon 1074              17  9.96466e+04      1.49e-07\npolygon 1075              22  1.60660e+06      2.40e-06\npolygon 1076             730  1.16983e+08      1.75e-04\npolygon 1077             129  7.87539e+06      1.18e-05\npolygon 1078              22  4.66256e+05      6.96e-07\npolygon 1079              19  5.44519e+05      8.13e-07\npolygon 1080              16  3.73911e+05      5.58e-07\npolygon 1081              88  3.47678e+07      5.19e-05\npolygon 1082              46  3.23711e+06      4.83e-06\npolygon 1083              47  9.17482e+05      1.37e-06\npolygon 1084              14  4.44869e+05      6.64e-07\npolygon 1085              43  1.29527e+06      1.93e-06\npolygon 1086              65  3.20974e+06      4.79e-06\npolygon 1087             306  1.83695e+07      2.74e-05\npolygon 1088              17  4.25486e+05      6.35e-07\npolygon 1089              29  1.08467e+06      1.62e-06\npolygon 1090              26  1.16602e+06      1.74e-06\npolygon 1091             135  4.90655e+06      7.33e-06\npolygon 1092              23  1.87723e+06      2.80e-06\npolygon 1093              21  7.02338e+05      1.05e-06\npolygon 1094              30  4.99970e+06      7.47e-06\npolygon 1095              21  7.71571e+05      1.15e-06\npolygon 1096              13  1.47832e+05      2.21e-07\npolygon 1097              26  3.17307e+06      4.74e-06\npolygon 1098              17  1.03642e+06      1.55e-06\npolygon 1099             100  8.74537e+06      1.31e-05\npolygon 1100              11  1.13950e+05      1.70e-07\npolygon 1101              26  8.27840e+05      1.24e-06\npolygon 1102              17  4.10882e+05      6.14e-07\npolygon 1103              13  1.49250e+05      2.23e-07\npolygon 1104              35  1.76408e+06      2.63e-06\npolygon 1105              15  2.03390e+05      3.04e-07\npolygon 1106              18  1.70982e+05      2.55e-07\npolygon 1107              32  7.98599e+06      1.19e-05\npolygon 1108              27  3.20839e+05      4.79e-07\npolygon 1109             539  1.17139e+08      1.75e-04\npolygon 1110              51  1.57614e+06      2.35e-06\npolygon 1111              19  3.60772e+05      5.39e-07\npolygon 1112              58  2.10060e+06      3.14e-06\npolygon 1113              13  1.70224e+05      2.54e-07\npolygon 1114              11  6.11736e+05      9.13e-07\npolygon 1115              35  5.26152e+06      7.86e-06\npolygon 1116              16  1.99371e+05      2.98e-07\npolygon 1117              14  4.48979e+05      6.70e-07\npolygon 1118              25  1.92913e+06      2.88e-06\npolygon 1119              16  4.26157e+05      6.36e-07\npolygon 1120              46  1.88229e+06      2.81e-06\npolygon 1121              17  2.29456e+05      3.43e-07\npolygon 1122              36  4.01418e+06      5.99e-06\npolygon 1123              57  1.77153e+07      2.65e-05\npolygon 1124              20  5.72298e+05      8.55e-07\npolygon 1125              14  2.46782e+05      3.68e-07\npolygon 1126              29  1.01300e+06      1.51e-06\npolygon 1127              90  8.54955e+06      1.28e-05\npolygon 1128              21  3.99098e+05      5.96e-07\npolygon 1129              12  2.81650e+05      4.21e-07\npolygon 1130              52  3.19337e+06      4.77e-06\npolygon 1131              13  3.40300e+05      5.08e-07\npolygon 1132              29  9.08533e+05      1.36e-06\npolygon 1133              20  3.07393e+05      4.59e-07\npolygon 1134              19  1.15906e+06      1.73e-06\npolygon 1135              17  1.16182e+06      1.73e-06\npolygon 1136              21  2.60877e+06      3.90e-06\npolygon 1137              15  1.09001e+05      1.63e-07\npolygon 1138              37  1.31921e+06      1.97e-06\npolygon 1139              53  1.46854e+06      2.19e-06\npolygon 1140              59  8.92822e+06      1.33e-05\npolygon 1141               9  7.44981e+04      1.11e-07\npolygon 1142              14  2.41462e+05      3.61e-07\npolygon 1143              96  7.25940e+06      1.08e-05\npolygon 1144              11  1.06055e+05      1.58e-07\npolygon 1145              49  1.87834e+06      2.80e-06\npolygon 1146              23  6.08310e+05      9.08e-07\npolygon 1147              50  6.76488e+05      1.01e-06\npolygon 1148              22  4.83089e+05      7.21e-07\npolygon 1149              17  1.17278e+05      1.75e-07\npolygon 1150              13  8.98786e+05      1.34e-06\npolygon 1151              43  1.01757e+06      1.52e-06\npolygon 1152              52  1.68377e+06      2.51e-06\npolygon 1153             348  2.50314e+08      3.74e-04\npolygon 1154              43  1.29120e+06      1.93e-06\npolygon 1155              71  2.02836e+06      3.03e-06\npolygon 1156 (hole)        4 -4.12791e+00     -6.16e-12\npolygon 1157             141  4.53240e+06      6.77e-06\npolygon 1158              52  3.62008e+06      5.41e-06\npolygon 1159              20  7.69539e+05      1.15e-06\npolygon 1160              88  8.88904e+06      1.33e-05\npolygon 1161              12  1.44668e+05      2.16e-07\npolygon 1162              46  2.28026e+06      3.40e-06\npolygon 1163              39  4.79165e+06      7.15e-06\npolygon 1164              53  2.86736e+06      4.28e-06\npolygon 1165              38  3.22508e+06      4.82e-06\npolygon 1166              18  4.44863e+05      6.64e-07\npolygon 1167              45  1.45134e+06      2.17e-06\npolygon 1168              86  2.56400e+07      3.83e-05\npolygon 1169             158  1.74510e+07      2.61e-05\npolygon 1170              14  2.50383e+05      3.74e-07\npolygon 1171             120  7.17019e+06      1.07e-05\npolygon 1172             146  2.28448e+07      3.41e-05\npolygon 1173             143  2.34472e+07      3.50e-05\npolygon 1174              20  3.47415e+05      5.19e-07\npolygon 1175              84  3.86387e+06      5.77e-06\npolygon 1176              68  1.10850e+07      1.66e-05\npolygon 1177             863  7.47702e+07      1.12e-04\npolygon 1178              53  7.54742e+06      1.13e-05\npolygon 1179              64  2.11016e+06      3.15e-06\npolygon 1180             103  1.47525e+07      2.20e-05\npolygon 1181              26  3.40345e+06      5.08e-06\npolygon 1182             103  8.40445e+06      1.25e-05\npolygon 1183              23  4.92041e+05      7.35e-07\npolygon 1184              27  5.53625e+05      8.27e-07\npolygon 1185              60  3.56102e+06      5.32e-06\npolygon 1186             151  1.51314e+07      2.26e-05\npolygon 1187             708  4.18129e+08      6.24e-04\npolygon 1188             120  1.32857e+07      1.98e-05\npolygon 1189             856  2.53898e+08      3.79e-04\npolygon 1190              13  2.47298e+05      3.69e-07\npolygon 1191              16  7.35754e+05      1.10e-06\npolygon 1192              21  5.31633e+05      7.94e-07\npolygon 1193              72  1.03185e+07      1.54e-05\npolygon 1194              38  1.34734e+06      2.01e-06\npolygon 1195               8  4.09489e+05      6.11e-07\npolygon 1196              17  2.46995e+05      3.69e-07\npolygon 1197              14  1.42285e+05      2.12e-07\npolygon 1198               9  1.56346e+05      2.33e-07\npolygon 1199              42  5.49581e+05      8.21e-07\npolygon 1200              59  1.15813e+06      1.73e-06\npolygon 1201              12  1.16845e+05      1.74e-07\npolygon 1202              11  6.00122e+04      8.96e-08\npolygon 1203              14  1.63465e+05      2.44e-07\npolygon 1204               8  4.73674e+04      7.07e-08\npolygon 1205              23  6.69330e+05      9.99e-07\npolygon 1206             144  6.48346e+06      9.68e-06\npolygon 1207              74  4.79923e+06      7.17e-06\npolygon 1208             116  1.02706e+07      1.53e-05\npolygon 1209              16  2.74005e+05      4.09e-07\npolygon 1210              97  4.72599e+06      7.06e-06\npolygon 1211              18  6.15583e+05      9.19e-07\npolygon 1212             146  1.38979e+07      2.08e-05\npolygon 1213              32  1.94516e+06      2.90e-06\npolygon 1214              26  9.81356e+05      1.47e-06\npolygon 1215              82  4.39797e+06      6.57e-06\npolygon 1216              33  9.36113e+05      1.40e-06\npolygon 1217              47  1.51844e+06      2.27e-06\npolygon 1218             196  2.32689e+07      3.47e-05\npolygon 1219              53  1.30069e+06      1.94e-06\npolygon 1220              70  1.00802e+07      1.51e-05\npolygon 1221              10  5.33870e+05      7.97e-07\npolygon 1222             211  2.73026e+07      4.08e-05\npolygon 1223              41  1.44141e+06      2.15e-06\npolygon 1224               9  5.20220e+05      7.77e-07\npolygon 1225             316  6.66808e+07      9.96e-05\npolygon 1226              17  7.48505e+05      1.12e-06\npolygon 1227              15  1.49799e+05      2.24e-07\npolygon 1228              24  4.99500e+05      7.46e-07\npolygon 1229              12  2.24463e+05      3.35e-07\npolygon 1230             100  1.06028e+07      1.58e-05\npolygon 1231              11  1.24267e+05      1.86e-07\npolygon 1232             143  1.89581e+07      2.83e-05\npolygon 1233              60  7.07802e+06      1.06e-05\npolygon 1234             124  1.23476e+07      1.84e-05\npolygon 1235              34  5.67625e+06      8.48e-06\npolygon 1236             797  1.86955e+08      2.79e-04\npolygon 1237              15  7.15891e+05      1.07e-06\npolygon 1238              20  1.61624e+06      2.41e-06\npolygon 1239              13  1.73955e+05      2.60e-07\npolygon 1240              60  2.42590e+06      3.62e-06\npolygon 1241              20  3.86365e+05      5.77e-07\npolygon 1242             213  3.69421e+07      5.52e-05\npolygon 1243              15  4.55574e+05      6.80e-07\npolygon 1244              35  1.56058e+06      2.33e-06\npolygon 1245              32  1.42419e+06      2.13e-06\npolygon 1246              68  2.30711e+06      3.44e-06\npolygon 1247             240  5.93935e+07      8.87e-05\npolygon 1248             145  1.58875e+07      2.37e-05\npolygon 1249              39  3.67239e+06      5.48e-06\npolygon 1250              54  3.84847e+06      5.75e-06\npolygon 1251              32  1.14073e+06      1.70e-06\npolygon 1252              18  3.58549e+05      5.35e-07\npolygon 1253              25  8.06470e+05      1.20e-06\npolygon 1254              15  2.67818e+05      4.00e-07\npolygon 1255              26  1.43681e+06      2.15e-06\npolygon 1256              18  3.10061e+05      4.63e-07\npolygon 1257              18  4.71644e+05      7.04e-07\npolygon 1258              16  5.04146e+05      7.53e-07\npolygon 1259              72  7.33720e+06      1.10e-05\npolygon 1260              27  1.37772e+06      2.06e-06\npolygon 1261              15  3.17217e+05      4.74e-07\npolygon 1262              37  1.17498e+06      1.75e-06\npolygon 1263              21  7.05388e+05      1.05e-06\npolygon 1264             216  2.05399e+07      3.07e-05\npolygon 1265              16  2.40093e+05      3.59e-07\npolygon 1266              29  1.71282e+06      2.56e-06\npolygon 1267              30  1.28695e+06      1.92e-06\npolygon 1268              36  2.29670e+06      3.43e-06\npolygon 1269             129  1.97698e+07      2.95e-05\npolygon 1270              65  2.65969e+06      3.97e-06\npolygon 1271             283  3.30575e+07      4.94e-05\npolygon 1272              28  7.06271e+05      1.05e-06\npolygon 1273              28  5.50158e+05      8.21e-07\npolygon 1274              49  2.25015e+06      3.36e-06\npolygon 1275              26  1.24280e+06      1.86e-06\npolygon 1276              28  9.02794e+05      1.35e-06\npolygon 1277              18  4.84064e+05      7.23e-07\npolygon 1278              47  2.33442e+06      3.49e-06\npolygon 1279              17  2.23835e+05      3.34e-07\npolygon 1280              34  7.32504e+05      1.09e-06\npolygon 1281              41  7.15538e+05      1.07e-06\npolygon 1282              21  5.81687e+05      8.69e-07\npolygon 1283              63  3.83819e+06      5.73e-06\npolygon 1284              27  1.33192e+06      1.99e-06\npolygon 1285              46  2.95028e+06      4.41e-06\npolygon 1286              10  1.34210e+05      2.00e-07\npolygon 1287              16  2.38274e+05      3.56e-07\npolygon 1288              18  4.18536e+05      6.25e-07\npolygon 1289              46  1.26584e+06      1.89e-06\npolygon 1290              14  2.14679e+05      3.21e-07\npolygon 1291              76  3.63371e+06      5.43e-06\npolygon 1292             339  4.44685e+07      6.64e-05\npolygon 1293             109  6.29786e+06      9.40e-06\npolygon 1294              14  2.89570e+05      4.32e-07\npolygon 1295              37  9.07704e+05      1.36e-06\npolygon 1296              68  3.86104e+06      5.77e-06\npolygon 1297             183  1.45458e+07      2.17e-05\npolygon 1298              44  1.64355e+06      2.45e-06\npolygon 1299              26  1.21667e+06      1.82e-06\npolygon 1300              13  1.95710e+05      2.92e-07\npolygon 1301              38  1.44402e+06      2.16e-06\npolygon 1302              14  3.29394e+05      4.92e-07\npolygon 1303              14  1.79828e+05      2.69e-07\npolygon 1304              44  2.11118e+06      3.15e-06\npolygon 1305             643  1.79215e+08      2.68e-04\npolygon 1306              24  1.10979e+06      1.66e-06\npolygon 1307              30  1.57106e+06      2.35e-06\npolygon 1308              46  3.61716e+06      5.40e-06\npolygon 1309              93  7.56340e+05      1.13e-06\npolygon 1310              57  3.07732e+06      4.59e-06\npolygon 1311              18  2.16224e+05      3.23e-07\npolygon 1312              17  5.12388e+05      7.65e-07\npolygon 1313               9  7.44780e+04      1.11e-07\npolygon 1314              57  8.09122e+06      1.21e-05\npolygon 1315              16  4.01323e+05      5.99e-07\npolygon 1316             118  2.90304e+07      4.33e-05\npolygon 1317              22  4.44693e+05      6.64e-07\npolygon 1318              43  2.28763e+06      3.42e-06\npolygon 1319              27  1.15444e+06      1.72e-06\npolygon 1320              25  1.21695e+06      1.82e-06\npolygon 1321              53  4.49228e+06      6.71e-06\npolygon 1322 (hole)        8 -1.14003e-01     -1.70e-13\npolygon 1323 (hole)        4 -5.05161e-02     -7.54e-14\npolygon 1324 (hole)        6 -3.83858e-06     -5.73e-18\npolygon 1325 (hole)        6 -6.42550e-02     -9.59e-14\npolygon 1326 (hole)        4 -1.10823e-02     -1.65e-14\npolygon 1327 (hole)        8 -1.54074e-01     -2.30e-13\npolygon 1328 (hole)        4 -5.15531e-03     -7.70e-15\npolygon 1329 (hole)        7 -4.08919e-02     -6.11e-14\npolygon 1330 (hole)        9 -6.45354e-02     -9.64e-14\npolygon 1331 (hole)       13 -6.64876e-02     -9.93e-14\npolygon 1332 (hole)        5 -5.31928e-02     -7.94e-14\npolygon 1333 (hole)        6 -4.67378e-02     -6.98e-14\npolygon 1334 (hole)        4 -2.58840e-02     -3.86e-14\npolygon 1335 (hole)       10 -9.35297e-02     -1.40e-13\npolygon 1336 (hole)        4 -1.76462e-02     -2.63e-14\npolygon 1337 (hole)        4 -5.14884e-02     -7.69e-14\npolygon 1338 (hole)        3 -1.43940e-03     -2.15e-15\npolygon 1339 (hole)        3 -2.72931e-02     -4.08e-14\npolygon 1340 (hole)        4 -9.91931e-02     -1.48e-13\npolygon 1341 (hole)       16 -1.55622e-05     -2.32e-17\npolygon 1342 (hole)        8 -2.24831e-06     -3.36e-18\npolygon 1343              79  1.47390e+07      2.20e-05\npolygon 1344           37614  6.60254e+11      9.86e-01\npolygon 1345 (hole)        8 -3.42277e-06     -5.11e-18\nenclosing rectangle: [-210008.6, 724647.6] x [1072026.3, 3158467.1] units\n                     (934700 x 2086000 units)\nWindow area = 6.69714e+11 square units\nFraction of frame area: 0.343\n\nplot(acledmyanmar_2021.Q1_ppp)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#first-order-spatial-point-patterns-analysis",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#first-order-spatial-point-patterns-analysis",
    "title": "Take-Home_Ex01",
    "section": "First-order Spatial Point Patterns Analysis",
    "text": "First-order Spatial Point Patterns Analysis\nAfter data wrangling is complete, we will perform first-order spatial point pattern analysis using functions from the spatstat package.\n\nQuarterly KDE layers\n\n# overall\nacledmyanmar_ppp.km &lt;- rescale(acledmyanmar_ppp, 1000, \"km\")\n\n# by quarters\nacledmyanmar_2021.Q1_ppp.km &lt;- rescale(acledmyanmar_2021.Q1_ppp, 1000, \"km\")\nacledmyanmar_2021.Q2_ppp.km &lt;- rescale(acledmyanmar_2021.Q2_ppp, 1000, \"km\")\nacledmyanmar_2021.Q3_ppp.km &lt;- rescale(acledmyanmar_2021.Q3_ppp, 1000, \"km\")\nacledmyanmar_2021.Q4_ppp.km &lt;- rescale(acledmyanmar_2021.Q4_ppp, 1000, \"km\")\n\nacledmyanmar_2022.Q1_ppp.km &lt;- rescale(acledmyanmar_2022.Q1_ppp, 1000, \"km\")\nacledmyanmar_2022.Q2_ppp.km &lt;- rescale(acledmyanmar_2022.Q2_ppp, 1000, \"km\")\nacledmyanmar_2022.Q3_ppp.km &lt;- rescale(acledmyanmar_2022.Q3_ppp, 1000, \"km\")\nacledmyanmar_2022.Q4_ppp.km &lt;- rescale(acledmyanmar_2022.Q4_ppp, 1000, \"km\")\n\nacledmyanmar_2023.Q1_ppp.km &lt;- rescale(acledmyanmar_2023.Q1_ppp, 1000, \"km\")\nacledmyanmar_2023.Q2_ppp.km &lt;- rescale(acledmyanmar_2023.Q2_ppp, 1000, \"km\")\nacledmyanmar_2023.Q3_ppp.km &lt;- rescale(acledmyanmar_2023.Q3_ppp, 1000, \"km\")\nacledmyanmar_2023.Q4_ppp.km &lt;- rescale(acledmyanmar_2023.Q4_ppp, 1000, \"km\")\n\nacledmyanmar_2024.Q1_ppp.km &lt;- rescale(acledmyanmar_2024.Q1_ppp, 1000, \"km\")\nacledmyanmar_2024.Q2_ppp.km &lt;- rescale(acledmyanmar_2024.Q2_ppp, 1000, \"km\")\n\n\nkde_acledmyanmar_2021.Q1.bw &lt;- density(acledmyanmar_2021.Q1_ppp.km, \n                                       sigma=20, \n                                       edge=TRUE, \n                                       kernel=\"gaussian\")\nkde_acledmyanmar_2021.Q2.bw &lt;- density(acledmyanmar_2021.Q2_ppp.km, \n                                       sigma=20, \n                                       edge=TRUE, \n                                       kernel=\"gaussian\")\nkde_acledmyanmar_2021.Q3.bw &lt;- density(acledmyanmar_2021.Q3_ppp.km, \n                                       sigma=20, \n                                       edge=TRUE, \n                                       kernel=\"gaussian\")\nkde_acledmyanmar_2021.Q4.bw &lt;- density(acledmyanmar_2021.Q4_ppp.km, \n                                       sigma=20, \n                                       edge=TRUE, \n                                       kernel=\"gaussian\")\n\nkde_acledmyanmar_2022.Q1.bw &lt;- density(acledmyanmar_2022.Q1_ppp.km, \n                                       sigma=20, \n                                       edge=TRUE, \n                                       kernel=\"gaussian\")\nkde_acledmyanmar_2022.Q2.bw &lt;- density(acledmyanmar_2022.Q2_ppp.km, \n                                      sigma=20, \n                                       edge=TRUE, \n                                       kernel=\"gaussian\")\nkde_acledmyanmar_2022.Q3.bw &lt;- density(acledmyanmar_2022.Q3_ppp.km, \n                                       sigma=20, \n                                       edge=TRUE, \n                                       kernel=\"gaussian\")\nkde_acledmyanmar_2022.Q4.bw &lt;- density(acledmyanmar_2022.Q4_ppp.km, \n                                       sigma=20, \n                                       edge=TRUE, \n                                       kernel=\"gaussian\")\n\nkde_acledmyanmar_2023.Q1.bw &lt;- density(acledmyanmar_2023.Q1_ppp.km, \n                                       sigma=20, \n                                       edge=TRUE, \n                                       kernel=\"gaussian\")\nkde_acledmyanmar_2023.Q2.bw &lt;- density(acledmyanmar_2023.Q2_ppp.km, \n                                       sigma=20, \n                                       edge=TRUE, \n                                       kernel=\"gaussian\")\nkde_acledmyanmar_2023.Q3.bw &lt;- density(acledmyanmar_2023.Q3_ppp.km, \n                                       sigma=20, \n                                       edge=TRUE, \n                                       kernel=\"gaussian\")\nkde_acledmyanmar_2023.Q4.bw &lt;- density(acledmyanmar_2023.Q4_ppp.km, \n                                       sigma=20, \n                                       edge=TRUE, \n                                       kernel=\"gaussian\")\n\nkde_acledmyanmar_2024.Q1.bw &lt;- density(acledmyanmar_2024.Q1_ppp.km, \n                                       sigma=20, \n                                       edge=TRUE, \n                                       kernel=\"gaussian\")\nkde_acledmyanmar_2024.Q2.bw &lt;- density(acledmyanmar_2024.Q2_ppp.km, \n                                       sigma=20, \n                                       edge=TRUE, \n                                       kernel=\"gaussian\")\n\n\nplot(kde_acledmyanmar_2021.Q1.bw)\n\n\n\n\n\n\n\nplot(kde_acledmyanmar_2021.Q2.bw)\n\n\n\n\n\n\n\nplot(kde_acledmyanmar_2021.Q3.bw)\n\n\n\n\n\n\n\nplot(kde_acledmyanmar_2021.Q4.bw)\n\n\n\n\n\n\n\nplot(kde_acledmyanmar_2022.Q1.bw)\n\n\n\n\n\n\n\nplot(kde_acledmyanmar_2022.Q2.bw)\n\n\n\n\n\n\n\nplot(kde_acledmyanmar_2022.Q3.bw)\n\n\n\n\n\n\n\nplot(kde_acledmyanmar_2022.Q4.bw)\n\n\n\n\n\n\n\nplot(kde_acledmyanmar_2023.Q1.bw)\n\n\n\n\n\n\n\nplot(kde_acledmyanmar_2023.Q2.bw)\n\n\n\n\n\n\n\nplot(kde_acledmyanmar_2023.Q3.bw)\n\n\n\n\n\n\n\nplot(kde_acledmyanmar_2023.Q4.bw)\n\n\n\n\n\n\n\nplot(kde_acledmyanmar_2024.Q1.bw)\n\n\n\n\n\n\n\nplot(kde_acledmyanmar_2024.Q2.bw)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#data-wrangling-for-second-order-analysis",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#data-wrangling-for-second-order-analysis",
    "title": "Take-Home_Ex01",
    "section": "Data Wrangling for Second-order analysis",
    "text": "Data Wrangling for Second-order analysis\n\nExtracting study areas\nThe code chunk below targets the areas with the highest amount of activity.\n\nmyanmar_sf\n\nSimple feature collection with 18 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -210008.6 ymin: 1072026 xmax: 724647.6 ymax: 3158467\nProjected CRS: WGS 84 / UTM zone 47N\nFirst 10 features:\n   OBJECTID          ST ST_PCODE  ST_RG               ST_MMR PCode_V\n1         1  Ayeyarwady   MMR017 Region       ဧရာဝတီတိုင်းဒေသကြီး     9.4\n2         2 Bago (East)   MMR007 Region   ပဲခူးတိုင်းဒေသကြီး (အရှေ့)     9.4\n3         3 Bago (West)   MMR008 Region ပဲခူးတိုင်းဒေသကြီး (အနောက်)     9.4\n4         4        Chin   MMR004  State            ချင်းပြည်နယ်     9.4\n5         5      Kachin   MMR001  State            ကချင်ပြည်နယ်     9.4\n6         6       Kayah   MMR002  State            ကယားပြည်နယ်     9.4\n7         7       Kayin   MMR003  State             ကရင်ပြည်နယ်     9.4\n8         8      Magway   MMR009 Region        မကွေးတိုင်းဒေသကြီး     9.4\n9         9    Mandalay   MMR010 Region      မန္တလေးတိုင်းဒေသကြီး     9.4\n10       10         Mon   MMR011  State              မွန်ပြည်နယ်     9.4\n                         geometry\n1  MULTIPOLYGON (((93411.72 17...\n2  MULTIPOLYGON (((203949.9 21...\n3  MULTIPOLYGON (((153405.1 21...\n4  MULTIPOLYGON (((-72918.03 2...\n5  MULTIPOLYGON (((362696.3 31...\n6  MULTIPOLYGON (((309155.7 22...\n7  MULTIPOLYGON (((373551.3 18...\n8  MULTIPOLYGON (((-1717.607 2...\n9  MULTIPOLYGON (((208184.3 26...\n10 MULTIPOLYGON (((364238.4 16...\n\n\n\nSGI &lt;- myanmar_sf %&gt;%\n  filter(ST == \"Sagaing\")\nKC &lt;- myanmar_sf %&gt;%\n  filter(ST == \"Kachin\")\nMW &lt;- myanmar_sf %&gt;%\n  filter(ST == \"Magway\")\nMDL &lt;- myanmar_sf %&gt;%\n  filter(ST == \"Mandalay\")\n\n\n\nCombining event points and the study area\nBy using the code chunk below, we are able to extract events that is within specific regions to do our analysis later on.\n\nSGI_owin &lt;- as.owin(SGI)\nKC_owin &lt;- as.owin(KC)\nMW_owin &lt;- as.owin(MW)\nMDL_owin &lt;- as.owin(MDL)\n\n\nSGI_ppp = acled_ppp_jit[SGI_owin] \nKC_ppp = acled_ppp_jit[KC_owin] \nMW_ppp = acled_ppp_jit[MW_owin] \nMDL_ppp = acled_ppp_jit[MDL_owin]\n\nrescale() is used to transform the unit of measurement from meters to kilometers.\n\nSGI_ppp.km = rescale(SGI_ppp, 1000, \"km\") \nKC_ppp.km = rescale(KC_ppp, 1000, \"km\") \nMW_ppp.km = rescale(MW_ppp, 1000, \"km\") \nMDL_ppp.km = rescale(MDL_ppp, 1000, \"km\")\n\nThe code chunk below plots the four study areas.\n\npar(mfrow=c(2,2)) \nplot(SGI_ppp.km, main=\"Sagaing\") \nplot(KC_ppp.km, main=\"Kachin\") \nplot(MW_ppp.km, main=\"Magway\") \nplot(MDL_ppp.km, main=\"Mandalay\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#analysing-spatial-point-process-using-g-function",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#analysing-spatial-point-process-using-g-function",
    "title": "Take-Home_Ex01",
    "section": "Analysing Spatial Point Process Using G-Function",
    "text": "Analysing Spatial Point Process Using G-Function\n\nKachin area\n\nG_KC = Gest(KC_ppp, correction = \"border\") \nplot(G_KC, xlim=c(0,500))\n\n\n\n\n\n\n\n\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\nHo = The distribution of events in Kachin are randomly distributed.\nH1= The distribution of events in Kachin are not randomly distributed.\n\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with G-function:\n\nG_KC.csr &lt;- envelope(KC_ppp, Gest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\nplot(G_KC.csr)\n\n\n\n\n\n\n\n\n\n\nMagway area\n\nG_MW = Gest(MW_ppp, correction = \"border\") \n\nplot(G_MW, xlim=c(0,500))\n\n\n\n\n\n\n\n\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\nHo = The distribution of events in Magway are randomly distributed.\nH1= The distribution of events in Magway are not randomly distributed.\n\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with G-function:\n\nG_MW.csr &lt;- envelope(MW_ppp, Gest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10 [6:11 remaining] .........20 [5:32 remaining] ...\n......30 [5:26 remaining] .........40 [5:20 remaining] .........50 [4:57 remaining] ..\n.......60 [4:43 remaining] .........70 [4:54 remaining] .........80 [4:58 remaining] .\n........90 [5:01 remaining] .........100 [5:03 remaining] .........110\n [5:00 remaining] .........120 [4:58 remaining] .........130 [4:59 remaining] .........\n140 [4:53 remaining] .........150 [4:45 remaining] .........160 [4:36 remaining] ........\n.170 [4:28 remaining] .........180 [4:20 remaining] .........190 [4:16 remaining] .......\n..200 [4:13 remaining] .........210 [4:11 remaining] .........220 [4:08 remaining] ......\n...230 [4:05 remaining] .........240 [4:04 remaining] .........250 [4:02 remaining] .....\n....260 [3:59 remaining] .........270 [3:56 remaining] .........280 [3:51 remaining] ....\n.....290 [3:46 remaining] .........300 [3:41 remaining] .........310 [3:37 remaining] ...\n......320 [3:33 remaining] .........330 [3:28 remaining] .........340 [3:23 remaining] ..\n.......350 [3:19 remaining] .........360 [3:16 remaining] .........370 [3:12 remaining] .\n........380 [3:10 remaining] .........390 [3:07 remaining] .........400\n [3:04 remaining] .........410 [3:02 remaining] .........420 [2:59 remaining] .........\n430 [2:56 remaining] .........440 [2:53 remaining] .........450 [2:50 remaining] ........\n.460 [2:47 remaining] .........470 [2:44 remaining] .........480 [2:41 remaining] .......\n..490 [2:38 remaining] .........500 [2:35 remaining] .........510 [2:31 remaining] ......\n...520 [2:28 remaining] .........530 [2:24 remaining] .........540 [2:20 remaining] .....\n....550 [2:17 remaining] .........560 [2:14 remaining] .........570 [2:11 remaining] ....\n.....580 [2:08 remaining] .........590 [2:05 remaining] .........600 [2:03 remaining] ...\n......610 [2:00 remaining] .........620 [1:57 remaining] .........630 [1:54 remaining] ..\n.......640 [1:50 remaining] .........650 [1:47 remaining] .........660 [1:44 remaining] .\n........670 [1:40 remaining] .........680 [1:37 remaining] .........690\n [1:33 remaining] .........700 [1:30 remaining] .........710 [1:27 remaining] .........\n720 [1:24 remaining] .........730 [1:21 remaining] .........740 [1:18 remaining] ........\n.750 [1:15 remaining] .........760 [1:11 remaining] .........770 [1:08 remaining] .......\n..780 [1:05 remaining] .........790 [1:02 remaining] .........800 [59 sec remaining] ......\n...810 [56 sec remaining] .........820 [53 sec remaining] .........830 [50 sec remaining] .....\n....840 [47 sec remaining] .........850 [44 sec remaining] .........860 [41 sec remaining] ....\n.....870 [38 sec remaining] .........880 [35 sec remaining] .........890 [32 sec remaining] ...\n......900 [29 sec remaining] .........910 [26 sec remaining] .........920 [23 sec remaining] ..\n.......930 [20 sec remaining] .........940 [17 sec remaining] .........950 [14 sec remaining] .\n........960 [11 sec remaining] .........970 [8 sec remaining] .........980\n [5 sec remaining] .........990 [3 sec remaining] ........\n999.\n\nDone.\n\nplot(G_MW.csr)\n\n\n\n\n\n\n\n\n\n\nMandalay area\n\nG_MDL = Gest(MDL_ppp, correction = \"border\") \n\nplot(G_MDL, xlim=c(0,500))\n\n\n\n\n\n\n\n\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\nHo = The distribution of events in Mandalay are randomly distributed.\nH1= The distribution of events in Mandalay are not randomly distributed.\n\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with G-function:\n\nG_MDL.csr &lt;- envelope(MDL_ppp, Gest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10 [4:50 remaining] .........20 [4:51 remaining] ...\n......30 [4:51 remaining] .........40 [4:46 remaining] .........50 [4:44 remaining] ..\n.......60 [4:41 remaining] .........70 [4:38 remaining] .........80 [4:34 remaining] .\n........90 [4:33 remaining] .........100 [4:30 remaining] .........110\n [4:27 remaining] .........120 [4:24 remaining] .........130 [4:22 remaining] .........\n140 [4:20 remaining] .........150 [4:17 remaining] .........160 [4:14 remaining] ........\n.170 [4:11 remaining] .........180 [4:08 remaining] .........190 [4:04 remaining] .......\n..200 [4:01 remaining] .........210 [3:58 remaining] .........220 [3:55 remaining] ......\n...230 [3:52 remaining] .........240 [3:49 remaining] .........250 [3:46 remaining] .....\n....260 [3:43 remaining] .........270 [3:40 remaining] .........280 [3:37 remaining] ....\n.....290 [3:34 remaining] .........300 [3:31 remaining] .........310 [3:28 remaining] ...\n......320 [3:25 remaining] .........330 [3:22 remaining] .........340 [3:19 remaining] ..\n.......350 [3:16 remaining] .........360 [3:13 remaining] .........370 [3:10 remaining] .\n........380 [3:07 remaining] .........390 [3:04 remaining] .........400\n [3:01 remaining] .........410 [2:58 remaining] .........420 [2:55 remaining] .........\n430 [2:52 remaining] .........440 [2:49 remaining] .........450 [2:46 remaining] ........\n.460 [2:43 remaining] .........470 [2:40 remaining] .........480 [2:37 remaining] .......\n..490 [2:34 remaining] .........500 [2:31 remaining] .........510 [2:28 remaining] ......\n...520 [2:25 remaining] .........530 [2:22 remaining] .........540 [2:19 remaining] .....\n....550 [2:16 remaining] .........560 [2:13 remaining] .........570 [2:10 remaining] ....\n.....580 [2:07 remaining] .........590 [2:04 remaining] .........600 [2:01 remaining] ...\n......610 [1:59 remaining] .........620 [1:56 remaining] .........630 [1:53 remaining] ..\n.......640 [1:51 remaining] .........650 [1:48 remaining] .........660 [1:45 remaining] .\n........670 [1:42 remaining] .........680 [1:39 remaining] .........690\n [1:36 remaining] .........700 [1:34 remaining] .........710 [1:31 remaining] .........\n720 [1:28 remaining] .........730 [1:25 remaining] .........740 [1:21 remaining] ........\n.750 [1:18 remaining] .........760 [1:15 remaining] .........770 [1:12 remaining] .......\n..780 [1:09 remaining] .........790 [1:06 remaining] .........800 [1:03 remaining] ......\n...810 [1:00 remaining] .........820 [57 sec remaining] .........830 [54 sec remaining] .....\n....840 [51 sec remaining] .........850 [48 sec remaining] .........860 [44 sec remaining] ....\n.....870 [41 sec remaining] .........880 [38 sec remaining] .........890 [35 sec remaining] ...\n......900 [32 sec remaining] .........910 [29 sec remaining] .........920 [25 sec remaining] ..\n.......930 [22 sec remaining] .........940 [19 sec remaining] .........950 [16 sec remaining] .\n........960 [13 sec remaining] .........970 [9 sec remaining] .........980\n [6 sec remaining] .........990 [3 sec remaining] ........\n999.\n\nDone.\n\nplot(G_MDL.csr)\n\n\n\n\n\n\n\n\n\n\nSagaing area\nThe code chunk below is used to compute G-function using Gest() of spatat package.\n\nG_SGI = Gest(SGI_ppp, correction = \"border\") \n\nplot(G_SGI, xlim=c(0,500))\n\n\n\n\n\n\n\n\nTo confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:\n\nHo = The distribution of events in Sagaing are randomly distributed.\nH1= The distribution of events in Sagaing are not randomly distributed.\n\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\nMonte Carlo test with G-function:\n\nG_SGI.csr &lt;- envelope(SGI_ppp, Gest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10\n[17:48 remaining, estimate finish 2024-09-23 00:39:05]\n.........20\n[17:01 remaining, estimate finish 2024-09-23 00:38:28]\n.........30\n[16:55 remaining, estimate finish 2024-09-23 00:38:32]\n.........40\n[16:40 remaining, estimate finish 2024-09-23 00:38:27]\n.........50\n[16:36 remaining, estimate finish 2024-09-23 00:38:34]\n.........60\n[16:26 remaining, estimate finish 2024-09-23 00:38:35]\n.........70\n[16:17 remaining, estimate finish 2024-09-23 00:38:36]\n.........80\n[16:06 remaining, estimate finish 2024-09-23 00:38:36]\n.........90\n[16:09 remaining, estimate finish 2024-09-23 00:38:51]\n.........100\n[15:57 remaining, estimate finish 2024-09-23 00:38:49]\n.........110\n[15:47 remaining, estimate finish 2024-09-23 00:38:50]\n.........120\n[15:37 remaining, estimate finish 2024-09-23 00:38:51]\n.........130\n[15:26 remaining, estimate finish 2024-09-23 00:38:50]\n.........140\n[15:16 remaining, estimate finish 2024-09-23 00:38:51]\n.........150\n[15:09 remaining, estimate finish 2024-09-23 00:38:56]\n.........160\n[15:05 remaining, estimate finish 2024-09-23 00:39:03]\n.........170\n[14:52 remaining, estimate finish 2024-09-23 00:39:00]\n.........180\n[14:35 remaining, estimate finish 2024-09-23 00:38:53]\n.........190\n[14:20 remaining, estimate finish 2024-09-23 00:38:47]\n.........200\n[14:07 remaining, estimate finish 2024-09-23 00:38:45]\n.........210\n[13:51 remaining, estimate finish 2024-09-23 00:38:38]\n.........220\n[13:35 remaining, estimate finish 2024-09-23 00:38:31]\n.........230\n[13:22 remaining, estimate finish 2024-09-23 00:38:28]\n.........240\n[13:23 remaining, estimate finish 2024-09-23 00:38:42]\n.........250\n[13:13 remaining, estimate finish 2024-09-23 00:38:43]\n.........260\n[12:59 remaining, estimate finish 2024-09-23 00:38:38]\n.........270\n[12:47 remaining, estimate finish 2024-09-23 00:38:37]\n.........280\n[12:37 remaining, estimate finish 2024-09-23 00:38:37]\n.........290\n[12:34 remaining, estimate finish 2024-09-23 00:38:48]\n.........300\n[12:30 remaining, estimate finish 2024-09-23 00:38:57]\n.........310\n[12:28 remaining, estimate finish 2024-09-23 00:39:10]\n.........320\n[12:24 remaining, estimate finish 2024-09-23 00:39:21]\n.........330\n[12:23 remaining, estimate finish 2024-09-23 00:39:35]\n.........340\n[12:15 remaining, estimate finish 2024-09-23 00:39:40]\n.........350\n[12:05 remaining, estimate finish 2024-09-23 00:39:42]\n.........360\n[11:58 remaining, estimate finish 2024-09-23 00:39:48]\n.........370\n[11:50 remaining, estimate finish 2024-09-23 00:39:53]\n.........380\n[11:45 remaining, estimate finish 2024-09-23 00:40:04]\n.........390\n[11:37 remaining, estimate finish 2024-09-23 00:40:09]\n.........400\n[11:27 remaining, estimate finish 2024-09-23 00:40:11]\n.........410\n[11:16 remaining, estimate finish 2024-09-23 00:40:12]\n.........420\n[11:06 remaining, estimate finish 2024-09-23 00:40:14]\n.........430\n[10:55 remaining, estimate finish 2024-09-23 00:40:16]\n.........440\n[10:43 remaining, estimate finish 2024-09-23 00:40:15]\n.........450\n[10:32 remaining, estimate finish 2024-09-23 00:40:16]\n.........460\n[10:21 remaining, estimate finish 2024-09-23 00:40:16]\n.........470\n[10:11 remaining, estimate finish 2024-09-23 00:40:19]\n.........480 [9:58 remaining] .........490 [9:48 remaining] .........500 [9:37 remaining] .........510 [9:26 remaining] .........520 [9:15 remaining] .........530 [9:05 remaining] ........\n.540 [8:53 remaining] .........550 [8:42 remaining] .........560 [8:32 remaining] .........570 [8:20 remaining] .........580 [8:08 remaining] .........590 [7:57 remaining] .........600 [7:45 remaining] ......\n...610 [7:34 remaining] .........620 [7:24 remaining] .........630 [7:12 remaining] .........640 [7:01 remaining] .........650 [6:48 remaining] .........660 [6:35 remaining] .........670 [6:22 remaining] ....\n.....680 [6:09 remaining] .........690 [5:57 remaining] .........700 [5:44 remaining] .........710 [5:32 remaining] .........720 [5:19 remaining] .........730 [5:07 remaining] .........740 [4:55 remaining] ..\n.......750 [4:42 remaining] .........760 [4:30 remaining] .........770 [4:18 remaining] .........780 [4:06 remaining] .........790 [3:54 remaining] .........800 [3:43 remaining] .........810\n [3:31 remaining] .........820 [3:19 remaining] .........830 [3:08 remaining] .........840 [2:56 remaining] .........850 [2:45 remaining] .........860 [2:33 remaining] .........870 [2:22 remaining] ........\n.880 [2:11 remaining] .........890 [2:00 remaining] .........900 [1:48 remaining] .........910 [1:37 remaining] .........920 [1:26 remaining] .........930 [1:15 remaining] .........940 [1:04 remaining] ......\n...950 [53 sec remaining] .........960 [42 sec remaining] .........970 [31 sec remaining] .........980 [20 sec remaining] .........990 [10 sec remaining] ........\n999.\n\nDone.\n\nplot(G_SGI.csr)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex06/Hands-On_Ex06.html",
    "href": "Hands-On_Ex/Hands-On_Ex06/Hands-On_Ex06.html",
    "title": "Hands-On_Ex06",
    "section": "",
    "text": "pacman::p_load(sf, spdep, tmap, tidyverse, knitr)"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex06/Hands-On_Ex06.html#global-measures-of-spatial-autocorrelation",
    "href": "Hands-On_Ex/Hands-On_Ex06/Hands-On_Ex06.html#global-measures-of-spatial-autocorrelation",
    "title": "Hands-On_Ex06",
    "section": "Global Measures of Spatial Autocorrelation",
    "text": "Global Measures of Spatial Autocorrelation\n\nComputing Contiguity Spatial Weights\nBefore we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.\nIn the code chunk below, poly2nb() of spdep package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\nMore specifically, the code chunk below is used to compute Queen contiguity weight matrix. (as we recall from ex5)\n\nwm_q &lt;- poly2nb(hunan_join, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\n\n\nRow-standardised weights matrix\nWe use a simple (“W”) here for equally rating by neighbor, but there’s other options like:\nStyle=“B” (Binary weights): This method assigns a weight of 1 to all neighboring polygons and 0 to non-neighbors. It can help reduce the edge effect but may still not fully address the issue.\n\nrswm_q &lt;- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\n\n\n\n\n\nNote\n\n\n\nImportant to note:\n\nstyle can take values “W”, “B”, “C”, “U”, “minmax” and “S”. B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\nIf zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex06/Hands-On_Ex06.html#global-measures-of-spatial-autocorrelation-morans-i",
    "href": "Hands-On_Ex/Hands-On_Ex06/Hands-On_Ex06.html#global-measures-of-spatial-autocorrelation-morans-i",
    "title": "Hands-On_Ex06",
    "section": "Global Measures of Spatial Autocorrelation: Moran’s I",
    "text": "Global Measures of Spatial Autocorrelation: Moran’s I"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex06/Hands-On_Ex06.html#morans-i",
    "href": "Hands-On_Ex/Hands-On_Ex06/Hands-On_Ex06.html#morans-i",
    "title": "Hands-On_Ex06",
    "section": "Moran’s I",
    "text": "Moran’s I\n\n\n\n\n\n\nNote\n\n\n\nMoran’s I is a measure of spatial autocorrelation, which assesses how similar or dissimilar values are across a geographic space. It helps determine if the pattern expressed is clustered, dispersed, or random.\n\nKey Points:\n\nPurpose: Measures the degree of spatial autocorrelation in a dataset.\nValues:\n\n+1: Perfect positive spatial autocorrelation (similar values cluster together).\n0: No spatial autocorrelation (random distribution).\n-1: Perfect negative spatial autocorrelation (dissimilar values cluster together).\n\n\n\n\n\nBelow is a chunk conducting it with moran.test() from spdep.\n\nmoran.test(hunan_join$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan_join$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\nAs we can see here, as the statistic is positive (&gt;0), it indicates a positive spatial autocorrelation, meaning that similar values of GDP per capita (GDPPC) are clustered together in the Hunan region.\nFurthermore, the expectation under the null hypothesis (no spatial autocorrelation) is -0.0115, and the variance is 0.0043, resulting in a p-value of 1.095e-06, which is &lt; 0.05, meaning that we can reject a null hypothesis (no correlation) in favor of a alternate hypothesis (positive correlation).\nWe next conduct permutation testing to confirm this:\n\nset.seed(1234)\nbperm= moran.mc(hunan_join$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan_join$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nAnd it is confirmed!\n\nVisualising Monte Carlo Moran’s I\nHere’s a plot to help us visualise this:\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\n\n\n\n\nIf that chart isn’t too your liking and you want more customizability, ggplot can do it too:\n\nlibrary(ggplot2)\n\n# Assuming bperm$res contains the simulated Moran's I values\nsimulated_values &lt;- bperm$res\n\n# Create a data frame for ggplot2\ndf &lt;- data.frame(simulated_values)\n\n# Plot the histogram using ggplot2\nggplot(df, aes(x = simulated_values)) +\n  geom_histogram(binwidth = 0.02, fill = \"blue\", color = \"black\", alpha = 0.7) +\n  geom_vline(xintercept = 0, color = \"red\", linetype = \"dashed\") +\n  labs(title = \"Simulated Moran's I\",\n       x = \"Simulated Moran's I\",\n       y = \"Frequency\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nThe red vertical line represents the observed Moran’s I value of 0.30075. We can see clearly from the graph that it is significantly higher than the majority of the simulated values, confirming the high spatial correlation.\n\n\nGeary’s C test\n\n\n\n\n\n\nNote\n\n\n\nGeary’s C Test is a measure of spatial autocorrelation, focusing on local spatial relationships. It assesses whether similar or dissimilar values are clustered together in a geographic space.\n\nKey Points:\n\nPurpose: Measures local spatial autocorrelation.\nValues:\n\nC &lt; 1: Positive spatial autocorrelation (similar values cluster together).\nC = 1: No spatial autocorrelation (random distribution).\nC &gt; 1: Negative spatial autocorrelation (dissimilar values cluster together).\n\n\n\n\n\nThe code chunk below performs Geary’s C test for spatial autocorrelation by using geary.test() of spdep.\n\ngeary.test(hunan_join$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan_join$GDPPC \nweights: rswm_q   \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\n\n\nComputing Monte Carlo Geary’s C\nThe code chunk below performs permutation test for Geary’s C statistic by using geary.mc() of spdep.\n\nset.seed(1234)\nbperm=geary.mc(hunan_join$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan_join$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\nSince it is under 1, and the p-value is 0.001 (p &lt; 0.05), this once again supports our alternate hypothesis of positive correlation, supported by our simulation which has confirmed it across the 1000 simulations.\n\n\nVisualising the Monte Carlo Geary’s C\nNext, we will plot a histogram to reveal the distribution of the simulated values by using the code chunk below.\n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\") \n\n\n\n\n\n\n\n\nThe red vertical line represents the observed Geary C value of 0.30075. We can see clearly from the graph that it is significantly higher than the majority of the simulated values, confirming the high spatial correlation.\nNow here’s the actual result plotted:\n\n\n# Assuming you've already run the geary.mc() function and stored it in 'bperm'\n\n# Create the histogram\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Geary's C\",\n     main=\"Histogram of Simulated Geary's C with Observed Statistic\",\n     ylim=c(0, max(hist(bperm$res, plot=FALSE)$counts) * 1.1))  # Increase y-axis limit slightly\n\n# Add a vertical red line for the null hypothesis (Geary's C = 1)\nabline(v=1, col=\"red\", lwd=2)\n\n# Add a vertical blue line for the observed Geary's C\nabline(v=bperm$statistic, col=\"blue\", lwd=2)\n\n# Add a legend\nlegend(\"topright\", \n       legend=c(\"Null hypothesis (C=1)\", \"Observed Geary's C\"), \n       col=c(\"red\", \"blue\"), \n       lwd=2)\n\n# Optionally, you can add text to show the exact value of the observed statistic\ntext(bperm$statistic, 0, round(bperm$statistic, 4), pos=4, col=\"blue\")\n\n\n\n\n\n\n\n\nThis contrasted from the simulated expected value vastly, coupled with the low p-value it’s now pretty clear that we can safely go for our alternate hypothesis!"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex06/Hands-On_Ex06.html#spatial-correlogram",
    "href": "Hands-On_Ex/Hands-On_Ex06/Hands-On_Ex06.html#spatial-correlogram",
    "title": "Hands-On_Ex06",
    "section": "Spatial Correlogram",
    "text": "Spatial Correlogram\nSpatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals. They show how correlated are pairs of spatial observations when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran’s I or Geary’s c) against distance.Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.\nMoran:\n\nMI_corr &lt;- sp.correlogram(wm_q, \n                          hunan_join$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\n\n\n\n\n\nprint(MI_corr)\n\nSpatial correlogram for hunan_join$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary’s C. The plot() of base Graph is then used to plot the output.\n\nGC_corr &lt;- sp.correlogram(wm_q, \n                          hunan_join$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\n\n\n\n\n\nprint(GC_corr)\n\nSpatial correlogram for hunan_join$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex06/Hands-On_Ex06.html#creating-a-lisa-cluster-map",
    "href": "Hands-On_Ex/Hands-On_Ex06/Hands-On_Ex06.html#creating-a-lisa-cluster-map",
    "title": "Hands-On_Ex06",
    "section": "Creating a LISA Cluster Map",
    "text": "Creating a LISA Cluster Map\nThe LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.\n\nPlotting Moran scatterplot\nThe Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.\nThe code chunk below plots the Moran scatterplot of GDPPC 2012 by using moran.plot() of spdep.\n\nnci &lt;- moran.plot(hunan_join$GDPPC, rswm_q,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")\n\n\n\n\n\n\n\n\n\n\nPlotting Moran scatterplot with standardised variable\nFirst we will use scale() to centers and scales the variable. Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.\n\nhunan$Z.GDPPC &lt;- scale(hunan_join$GDPPC) %&gt;% \n  as.vector \n\nThe as.vector() added to the end is to make sure that the data type we get out of this is a vector, that map neatly into out dataframe.\n\nnci2 &lt;- moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")\n\n\n\n\n\n\n\n\n\n\nPreparing LISA map classes\nThe code chunks below show the steps to prepare a LISA cluster map.\n\nquadrant &lt;- vector(mode=\"numeric\",length=nrow(localMI))\n\n\nhunan$lag_GDPPC &lt;- lag.listw(rswm_q, hunan_join$GDPPC)\nDV &lt;- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \n\n\nLM_I &lt;- localMI[,1] - mean(localMI[,1])    \n\n\nsignif &lt;- 0.05       \n\n\nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4      \n\n\nquadrant[localMI[,5]&gt;signif] &lt;- 0\n\nAlternatively:\n\nquadrant &lt;- vector(mode=\"numeric\",length=nrow(localMI))\nhunan$lag_GDPPC &lt;- lag.listw(rswm_q, hunan_join$GDPPC)\nDV &lt;- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \nLM_I &lt;- localMI[,1]   \nsignif &lt;- 0.05       \nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4    \nquadrant[localMI[,5]&gt;signif] &lt;- 0\n\n\n\nPlotting LISA map\nNow, we can build the LISA map by using the code chunks below.\n\nhunan.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\n\n\ngdppc &lt;- qtm(hunan_join, \"GDPPC\")\n\nhunan.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\nprint(LISAmap)\n\n\n\n\n\n\n\ntmap_arrange(gdppc, LISAmap, \n             asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nBased on the LISA (Local Indicators of Spatial Association) map shown on the right side of the image, we can draw several statistical observations:\n\nSpatial Clustering: There is clear evidence of spatial autocorrelation in the GDPPC (Gross Domestic Product Per Capita) across the region. This is indicated by the presence of colored areas on the LISA map, which show statistically significant local spatial associations.\nHigh-High Cluster: A large red area in the eastern part of the region represents a “high-high” cluster. This suggests that this area has high GDPPC values and is surrounded by neighboring areas that also have high GDPPC values. This cluster indicates a concentration of economic prosperity in this part of the region.\nLow-High Outlier: There’s a light blue area adjacent to the high-high cluster, indicating a “low-high” outlier. This represents an area with relatively low GDPPC that is surrounded by areas with high GDPPC. It could suggest an economically lagging area within a generally prosperous neighborhood.\nLow-Low Cluster: There are two dark blue areas, one in the central-western part and another smaller one in the north, representing “low-low” clusters. These are areas where low GDPPC values are surrounded by other areas with low GDPPC values, indicating pockets of relative economic disadvantage.\nInsignificant Areas: Most of the map is white, indicating areas where the spatial association of GDPPC is not statistically significant. This means that for these areas, the GDPPC values do not show a clear pattern of similarity or dissimilarity with their neighbors.\nAbsence of High-Low Outliers: Interestingly, there are no visible “high-low” outliers (which would be orange on this map), suggesting that there are no areas of high GDPPC immediately surrounded by areas of low GDPPC.\nEast-West Divide: There appears to be a general east-west divide in economic prosperity, with the high-high cluster concentrated in the east and the low-low clusters in the central and western parts.\n\nThese observations suggest that economic development in this region is not uniformly distributed and that there are significant spatial patterns in the distribution of GDPPC. This information could be valuable for regional economic planning, identifying areas for targeted development initiatives, and understanding the dynamics of economic growth and disparity within the region."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex06/Hands-On_Ex06.html#hot-spot-and-cold-spot-area-analysis",
    "href": "Hands-On_Ex/Hands-On_Ex06/Hands-On_Ex06.html#hot-spot-and-cold-spot-area-analysis",
    "title": "Hands-On_Ex06",
    "section": "Hot Spot and Cold Spot Area Analysis",
    "text": "Hot Spot and Cold Spot Area Analysis\nBeside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.\nThe term ‘hot spot’ has been used generically across disciplines to describe a region or value that is higher relative to its surroundings (Lepers et al 2005, Aben et al 2012, Isobe et al 2015).\n\nGetis and Ord’s G-Statistics\nAn alternative spatial statistics to detect spatial anomalies is the Getis and Ord’s G-statistics (Getis and Ord, 1972; Ord and Getis, 1995). It looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.\nThe analysis consists of three steps:\n\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi statistics\n\n\n\n10.6.2 Deriving distance-based weight matrix\nFirst, we need to define a new set of neighbours. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.\nThere are two type of distance-based proximity matrix, they are:\n\nfixed distance weight matrix; and\nadaptive distance weight matrix.\n\n\n10.6.2.1 Deriving the centroid\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid() on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid(). We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation\nTo get our longitude values we map the st_centroid() function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude &lt;- map_dbl(hunan_join$geometry, ~st_centroid(.x)[[1]])\n\n\nlatitude &lt;- map_dbl(hunan_join$geometry, ~st_centroid(.x)[[2]])\n\n\ncoords &lt;- cbind(longitude, latitude)\n\nDetermine the cut-off distance Firstly, we need to determine the upper limit for distance band by using the steps below:\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep. Convert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb(). Return the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise. Remove the list structure of the returned object by using unlist()."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex06/Hands-On_Ex06.html#computing-gi-statistics",
    "href": "Hands-On_Ex/Hands-On_Ex06/Hands-On_Ex06.html#computing-gi-statistics",
    "title": "Hands-On_Ex06",
    "section": "Computing GI statistics",
    "text": "Computing GI statistics\n\n10.7.1 GI statistics using fixed distance\n\nfips &lt;- order(hunan_join$County)\nwm62_lw &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm62_lw &lt;- nb2listw(wm62_lw)\ngi.fixed &lt;- localG(hunan_join$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"internals\")\n               Gi      E(Gi)        V(Gi)        Z(Gi) Pr(z != E(Gi))\n [1,] 0.012838590 0.01149425 9.503690e-06  0.436075843   6.627817e-01\n [2,] 0.010575005 0.01149425 1.198720e-05 -0.265505650   7.906200e-01\n [3,] 0.011240370 0.01149425 1.208429e-05 -0.073033665   9.417793e-01\n [4,] 0.013158593 0.01149425 1.623859e-05  0.413017033   6.795941e-01\n [5,] 0.012441985 0.01149425 1.204540e-05  0.273070579   7.847990e-01\n [6,] 0.008825335 0.01149425 4.998177e-05 -0.377510776   7.057941e-01\n [7,] 0.025403633 0.01149425 2.358849e-05  2.863898821   4.184617e-03\n [8,] 0.020991685 0.01149425 1.155183e-05  2.794350420   5.200409e-03\n [9,] 0.028937888 0.01149425 1.118351e-05  5.216125401   1.827045e-07\n[10,] 0.012278897 0.01149425 1.181883e-05  0.228236603   8.194623e-01\n[11,] 0.015273060 0.01149425 1.578760e-05  0.951035346   3.415864e-01\n[12,] 0.009836769 0.01149425 9.550530e-06 -0.536334231   5.917276e-01\n[13,] 0.012107295 0.01149425 1.202833e-05  0.176761556   8.596957e-01\n[14,] 0.017366876 0.01149425 2.412785e-05  1.195564020   2.318667e-01\n[15,] 0.011262043 0.01149425 4.945294e-05 -0.033020610   9.736582e-01\n[16,] 0.016282799 0.01149425 1.207418e-05  1.378081093   1.681783e-01\n[17,] 0.009195692 0.01149425 1.539847e-05 -0.585756761   5.580390e-01\n[18,] 0.009803104 0.01149425 1.623775e-05 -0.419680565   6.747188e-01\n[19,] 0.012293351 0.01149425 9.533538e-06  0.258805141   7.957856e-01\n[20,] 0.011531383 0.01149425 9.485210e-06  0.012056111   9.903808e-01\n[21,] 0.011086396 0.01149425 7.834240e-06 -0.145716531   8.841452e-01\n[22,] 0.011399974 0.01149425 1.205068e-05 -0.027158687   9.783332e-01\n[23,] 0.010215584 0.01149425 1.610581e-05 -0.318615290   7.500183e-01\n[24,] 0.008908888 0.01149425 1.191633e-05 -0.748946051   4.538897e-01\n[25,] 0.008151662 0.01149425 1.208055e-05 -0.961700582   3.362000e-01\n[26,] 0.008750338 0.01149425 1.185732e-05 -0.796851342   4.255374e-01\n[27,] 0.006373177 0.01149425 2.453147e-05 -1.033949773   3.011596e-01\n[28,] 0.010214653 0.01149425 7.705234e-06 -0.460979158   6.448136e-01\n[29,] 0.007138702 0.01149425 2.420829e-05 -0.885240161   3.760271e-01\n[30,] 0.009622875 0.01149425 4.924586e-05 -0.266671512   7.897221e-01\n[31,] 0.007129199 0.01149425 2.426311e-05 -0.886168613   3.755267e-01\n[32,] 0.005453443 0.01149425 4.986245e-05 -0.855476971   3.922871e-01\n[33,] 0.008656742 0.01149425 9.468436e-06 -0.922143185   3.564539e-01\n[34,] 0.006921171 0.01149425 1.547961e-05 -1.162328599   2.451020e-01\n[35,] 0.013543641 0.01149425 7.762217e-06  0.735582222   4.619850e-01\n[36,] 0.011483981 0.01149425 9.353749e-06 -0.003358489   9.973203e-01\n[37,] 0.006748566 0.01149425 2.406205e-05 -0.967459309   3.333145e-01\n[38,] 0.006429770 0.01149425 1.617381e-05 -1.259299080   2.079223e-01\n[39,] 0.006499068 0.01149425 1.183086e-05 -1.452256513   1.464303e-01\n[40,] 0.005364231 0.01149425 1.583085e-05 -1.540671121   1.233968e-01\n[41,] 0.007190523 0.01149425 9.517756e-06 -1.395011407   1.630124e-01\n[42,] 0.006338193 0.01149425 9.402416e-06 -1.681505286   9.266481e-02\n[43,] 0.006250026 0.01149425 1.592572e-05 -1.314110709   1.888090e-01\n[44,] 0.007724540 0.01149425 2.409666e-05 -0.767944457   4.425202e-01\n[45,] 0.010960115 0.01149425 7.668148e-06 -0.192889342   8.470456e-01\n[46,] 0.019793380 0.01149425 9.304010e-06  2.720804542   6.512325e-03\n[47,] 0.017083156 0.01149425 9.542983e-06  1.809191360   7.042128e-02\n[48,] 0.007763307 0.01149425 9.375805e-06 -1.218469473   2.230456e-01\n[49,] 0.009732968 0.01149425 1.183438e-05 -0.511984469   6.086619e-01\n[50,] 0.009183102 0.01149425 7.669301e-06 -0.834546363   4.039732e-01\n[51,] 0.008351251 0.01149425 1.197695e-05 -0.908179070   3.637836e-01\n[52,] 0.007173464 0.01149425 7.860947e-06 -1.541081516   1.232969e-01\n[53,] 0.005648849 0.01149425 2.403980e-05 -1.192199867   2.331829e-01\n[54,] 0.008193691 0.01149425 9.425273e-06 -1.075080164   2.823388e-01\n[55,] 0.005907416 0.01149425 1.173231e-05 -1.631075961   1.028743e-01\n[56,] 0.006281129 0.01149425 4.916619e-05 -0.743472246   4.571958e-01\n[57,] 0.012783731 0.01149425 9.478214e-06  0.418842387   6.753313e-01\n[58,] 0.014065001 0.01149425 9.525495e-06  0.832943753   4.048765e-01\n[59,] 0.008649096 0.01149425 1.604509e-05 -0.710289083   4.775249e-01\n[60,] 0.009938144 0.01149425 1.197285e-05 -0.449718820   6.529132e-01\n[61,] 0.009986857 0.01149425 9.339862e-06 -0.493238743   6.218439e-01\n[62,] 0.007741049 0.01149425 1.200155e-05 -1.083386776   2.786368e-01\n[63,] 0.011625837 0.01149425 9.373277e-06  0.042979051   9.657182e-01\n[64,] 0.011524128 0.01149425 1.207898e-05  0.008596093   9.931414e-01\n[65,] 0.012459080 0.01149425 5.008051e-05  0.136337469   8.915545e-01\n[66,] 0.018289547 0.01149425 9.510977e-06  2.203411744   2.756574e-02\n[67,] 0.024787936 0.01149425 2.441628e-05  2.690329952   7.138140e-03\n[68,] 0.026976803 0.01149425 1.208488e-05  4.453703219   8.440175e-06\n[69,] 0.009808075 0.01149425 2.447363e-05 -0.340842743   7.332220e-01\n[70,] 0.010974464 0.01149425 1.615591e-05 -0.129318589   8.971056e-01\n[71,] 0.015158831 0.01149425 2.466965e-05  0.737806634   4.606320e-01\n[72,] 0.006479194 0.01149425 1.617633e-05 -1.246912658   2.124295e-01\n[73,] 0.013811365 0.01149425 1.208024e-05  0.666667559   5.049845e-01\n[74,] 0.014855611 0.01149425 9.534152e-06  1.088613505   2.763244e-01\n[75,] 0.006634790 0.01149425 2.429996e-05 -0.985792573   3.242349e-01\n[76,] 0.016469276 0.01149425 1.626428e-05  1.233609606   2.173484e-01\n[77,] 0.009535250 0.01149425 1.616821e-05 -0.487196415   6.261191e-01\n[78,] 0.019543831 0.01149425 2.450260e-05  1.626174042   1.039126e-01\n[79,] 0.007861780 0.01149425 1.173415e-05 -1.060416797   2.889550e-01\n[80,] 0.012801059 0.01149425 9.438565e-06  0.425361422   6.705732e-01\n[81,] 0.008921306 0.01149425 9.429319e-06 -0.837897118   4.020885e-01\n[82,] 0.010616749 0.01149425 7.781742e-06 -0.314565243   7.530918e-01\n[83,] 0.012785551 0.01149425 1.208475e-05  0.371456331   7.102977e-01\n[84,] 0.025530278 0.01149425 1.006424e-05  4.424392623   9.671399e-06\n[85,] 0.010950731 0.01149425 2.460793e-05 -0.109566928   9.127528e-01\n[86,] 0.016232953 0.01149425 1.205894e-05  1.364597995   1.723794e-01\n[87,] 0.007936836 0.01149425 1.193667e-05 -1.029658605   3.031703e-01\n[88,] 0.007946659 0.01149425 2.441283e-05 -0.718000620   4.727569e-01\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan_join$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe output of localG() is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\nNext, we will join the Gi values to their corresponding hunan sf data frame by using the code chunk below.\n\n\n\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.fixed)) %&gt;%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\nIn fact, the code chunk above performs three tasks. First, it convert the output vector (i.e. gi.fixed) into r matrix object by using as.matrix(). Next, cbind() is used to join hunan@data and gi.fixed matrix to produce a new SpatialPolygonDataFrame called hunan.gi. Lastly, the field name of the gi values is renamed to gstat_fixed by using rename().\n\n\nMapping GI values with fixed distance weights\n\ngdppc &lt;- qtm(hunan_join, \"GDPPC\")\n\nGimap &lt;-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nHot Spots (High-High Clusters):\n\nThe eastern part of Hunan shows strong positive Gi* values (dark red), indicating a statistically significant cluster of high GDPPC counties.\nThis hot spot aligns with the high GDPPC values seen in the left map, confirming a concentration of economic prosperity in this region.\n\n\n\n\nCold Spots (Low-Low Clusters):\n\nThe western part of the province shows some areas with negative Gi* values (light to medium blue), indicating clusters of low GDPPC counties.\nThis corresponds to the lower GDPPC values observed in the western regions of the left map.\n\n\n\n\n** this lines up, as the bigger cities in Hunan like Changsha, Zhuzhou, Heiyang all are on the eastern side of Hunan, suggesting less economic development in West Hunan, leaving that part of Hunan behind.This might highlight the need for policies to spread economic benefits to more peripheral areas, possibly through improved connectivity or targeted rural development programs.\n\n\nGI statistics using adaptive distance\nThe code chunk below are used to compute the Gi values for GDPPC2012 by using an adaptive distance weight matrix (i.e knb_lw).\n\nfips &lt;- order(hunan_join$County)\nknn_lw &lt;- knn2nb(knearneigh(coords, k=6))\nknn_lw &lt;- nb2listw(knn_lw)\ngi.adaptive &lt;- localG(hunan_join$GDPPC, knn_lw)\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.adaptive)) %&gt;%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\n\nMapping GI values with adaptive distance weights\n\ngdppc&lt;- qtm(hunan_join, \"GDPPC\")\n\nGimap &lt;- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)\n\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThere is, once again, a prominent hot spot (dark red areas) in the northeastern part of Hunan. This indicates a statistically significant cluster of high GDPPC values. The Gi values in this region are between 4 to 6, suggesting very strong positive spatial autocorrelation of high values. This seems to correspond with Hunan’s capita Changsha which makes sense for gdp/ economic activity to be clustered highly there.\nA notable cold spot (dark blue area) is visible in the south-central part of the province. This represents a statistically significant cluster of low GDPPC values. The Gi values here are between -4 to -2, indicating strong negative spatial autocorrelation. This area is periphal to Huaihua, and still seems relatively connecting by roads like the other less cold regions, which could be a cause for concern, perhaps due to distance from the economic centre Changsha."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#computing-spatio-temporal-kde-by-quarters",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#computing-spatio-temporal-kde-by-quarters",
    "title": "Take-Home_Ex01",
    "section": "Computing spatio-temporal KDE by quarters",
    "text": "Computing spatio-temporal KDE by quarters\n\nacledmyanmar_2021_kde &lt;- spattemp.density(acled_quarter_2021_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nacledmyanmar_2022_kde &lt;- spattemp.density(acled_quarter_2022_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nacledmyanmar_2023_kde &lt;- spattemp.density(acled_quarter_2023_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nacledmyanmar_2024_kde &lt;- spattemp.density(acled_quarter_2024_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#computing-spatio-temporal-kde-by-quarters-1",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#computing-spatio-temporal-kde-by-quarters-1",
    "title": "Take-Home_Ex01",
    "section": "Computing spatio-temporal KDE by quarters",
    "text": "Computing spatio-temporal KDE by quarters\nspattemp.density() of sparr package is used to compute the STKDE.\n\nacledmyanmar_2021_kde &lt;- spattemp.density(acled_quarter_2021_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nacledmyanmar_2022_kde &lt;- spattemp.density(acled_quarter_2022_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nacledmyanmar_2023_kde &lt;- spattemp.density(acled_quarter_2023_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nacledmyanmar_2024_kde &lt;- spattemp.density(acled_quarter_2024_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\n\nPlotting the spatio-temporal KDE object\n\nquarters &lt;- c(1,2,3,4)\npar(mfcol=c(1,4))\nfor(i in quarters){ \n  plot(acledmyanmar_2021_kde, i, \n       override.par=FALSE, \n       fix.range=TRUE, \n       main=paste(\"KDE at 2021 Q\",i))\n}\n\n\n\n\n\n\n\npar(mfcol=c(1,4))\nfor(i in quarters){ \n  plot(acledmyanmar_2022_kde, i, \n       override.par=FALSE, \n       fix.range=TRUE, \n       main=paste(\"KDE at 2022 Q\",i))\n}\n\n\n\n\n\n\n\npar(mfcol=c(1,4))\nfor(i in quarters){ \n  plot(acledmyanmar_2023_kde, i, \n       override.par=FALSE, \n       fix.range=TRUE, \n       main=paste(\"KDE at 2023 Q\",i))\n}\n\n\n\n\n\n\n\nquarters &lt;- c(1,2)\npar(mfcol=c(1,2))\nfor(i in quarters){ \n  plot(acledmyanmar_2024_kde, i, \n       override.par=FALSE, \n       fix.range=TRUE, \n       main=paste(\"KDE at 2024 Q\",i))\n}"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#displaying-kde-layers",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#displaying-kde-layers",
    "title": "Take-Home_Ex01",
    "section": "Displaying KDE layers",
    "text": "Displaying KDE layers\n\nosm &lt;- osm %&gt;%    \ndplyr::select('osm_id', 'fclass') \nosm &lt;- st_transform(osm, crs = 32647)\n\n\nmerged_myanmar &lt;- st_union(myanmar_sf) \nosm_myanmar &lt;- st_intersection(osm, merged_myanmar)\n\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n\nosm_myanmar &lt;- st_cast(st_cast(osm_myanmar, \"MULTILINESTRING\"),\"LINESTRING\")\n\nWarning in st_cast.sf(st_cast(osm_myanmar, \"MULTILINESTRING\"), \"LINESTRING\"):\nrepeating attributes for all sub-geometries for which they may not be constant\n\n\n\nwrite_rds(osm_myanmar, \"data/osm_myanmar.rds\")\n\n\ntest_density &lt;- density(acledmyanmar_ppp,               sigma=25,               edge=TRUE,               kernel=\"gaussian\")  \ndensity_raster &lt;- raster(test_density) \nprojection(density_raster) &lt;- CRS(\"+init=EPSG:32647\")  \nplot(osm_myanmar)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#displaying-spatio-temporal-kde-layers",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#displaying-spatio-temporal-kde-layers",
    "title": "Take-Home_Ex01",
    "section": "Displaying Spatio-Temporal KDE layers",
    "text": "Displaying Spatio-Temporal KDE layers\n\nplot_stkde &lt;- function(kde) \n{   \n  test_density &lt;- density(kde,                 sigma=25,                 edge=TRUE,                 kernel=\"gaussian\")\n  density_raster &lt;- raster(test_density)   \n  projection(density_raster) &lt;- CRS(\"+init=EPSG:32647\")\n  plot(osm_myanmar) \n}\n\n\nplot_stkde(acled_quarter_2021_ppp)\n\n\n\n\n\n\n\n\n\nplot_stkde(acled_quarter_2022_ppp)\n\n\n\n\n\n\n\n\n\nplot_stkde(acled_quarter_2023_ppp)\n\n\n\n\n\n\n\n\n\nplot_stkde(acled_quarter_2024_ppp)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex06/In-Class_Ex06.html",
    "href": "In-Class_Ex/In-Class_Ex06/In-Class_Ex06.html",
    "title": "In-Class_Ex06",
    "section": "",
    "text": "pacman::p_load(sf, tmap, tidyverse, sfdep)\n\n\nImport Geospatial Data\n\nhunan &lt;- st_read(dsn = \"data/geospatial\",\n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\endurrus\\IS415-GAA\\In-Class_Ex\\In-Class_Ex06\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nhunan &lt;- left_join(hunan, hunan2012) |&gt;\n  select(1:4, 7, 15)\n\nJoining with `by = join_by(County)`\n\n\n\nhunan\n\nSimple feature collection with 88 features and 6 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC\n1   Changde 21098   Anxiang      County   Anxiang 23667\n2   Changde 21100   Hanshou      County   Hanshou 20981\n3   Changde 21101    Jinshi County City    Jinshi 34592\n4   Changde 21102        Li      County        Li 24473\n5   Changde 21103     Linli      County     Linli 25554\n6   Changde 21104    Shimen      County    Shimen 27137\n7  Changsha 21109   Liuyang County City   Liuyang 63118\n8  Changsha 21110 Ningxiang      County Ningxiang 62202\n9  Changsha 21111 Wangcheng      County Wangcheng 70666\n10 Chenzhou 21112     Anren      County     Anren 12761\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734...\n\n\n\nwrite_rds(hunan, \"data/rds/hunan.rds\")\n\n\nhunan &lt;- read_rds(\"data/rds/hunan.rds\")\n\n\nwm_q &lt;- hunan %&gt;%\n  mutate(nb = st_contiguity(geometry), \n         wt = st_weights(nb, style = \"W\"),\n         .before = 1)\n\n\nmoranI &lt;- global_moran(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt)\nglimpse(moranI)\n\nList of 2\n $ I: num 0.301\n $ K: num 7.64\n\n\nglobal moran’s I test\n\nglobal_moran_test(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\nseed for consistency\n\nset.seed(777)\n\nglobal moran’s I permutation test\n\nglobal_moran_perm(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt,\n                  nsim = 99)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.30075, observed rank = 100, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\nlocal moran’s I\n\nlisa &lt;- wm_q %&gt;% \n  mutate(local_moran = local_moran(\n    GDPPC, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_moran)\n\nviz LMI & pval\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nmap1 &lt;- tm_shape(lisa) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of GDPPC\",\n            main.title.size = 0.8)\n\nmap2 &lt;- tm_shape(lisa) +\n  tm_fill(\"p_ii\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nviz lisa map\n\nlisa_sig &lt;- lisa  %&gt;%\n  filter(p_ii &lt; 0.05)\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(lisa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_sig) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.4)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\n\n\n\nhot and cold (cantonese version)\nderive spatial weight matrix\n\nwm_idw &lt;- hunan %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wts = st_inverse_distance(nb, geometry,\n                                   scale = 1,\n                                   alpha = 1),\n         .before = 1)\n\n! Polygon provided. Using point on surface.\n\n\nWarning: There was 1 warning in `stopifnot()`.\nℹ In argument: `wts = st_inverse_distance(nb, geometry, scale = 1, alpha = 1)`.\nCaused by warning in `st_point_on_surface.sfc()`:\n! st_point_on_surface may not give correct results for longitude/latitude data\n\n\ncompute local Gi\n\nHCSA &lt;- wm_idw %&gt;% \n  mutate(local_Gi = local_gstar_perm(\n    GDPPC, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_Gi)\nHCSA\n\nSimple feature collection with 88 features and 18 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n# A tibble: 88 × 19\n   gi_star cluster   e_gi    var_gi  std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;    &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.0416 Low     0.0115   6.69e-6  0.00106 9.99e-1  0.84         0.42    1.21 \n 2 -0.333  Low     0.0107   6.09e-6 -0.101   9.19e-1  0.92         0.46    0.792\n 3  0.281  High    0.0123   8.52e-6 -0.0220  9.82e-1  0.78         0.39    0.805\n 4  0.411  High    0.0119   1.06e-5  0.216   8.29e-1  0.7          0.35    0.803\n 5  0.387  High    0.0116   8.61e-6  0.305   7.61e-1  0.62         0.31    1.07 \n 6 -0.368  High    0.0115   8.81e-6 -0.391   6.96e-1  0.8          0.4     1.17 \n 7  3.56   High    0.0149   6.87e-6  2.78    5.40e-3  0.04         0.02    0.991\n 8  2.52   High    0.0132   4.78e-6  1.86    6.28e-2  0.1          0.05    0.734\n 9  4.56   High    0.0144   5.87e-6  3.52    4.34e-4  0.02         0.01    0.602\n10  1.16   Low     0.0104   3.82e-6  1.78    7.43e-2  0.08         0.04    1.12 \n# ℹ 78 more rows\n# ℹ 10 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wts &lt;list&gt;, NAME_2 &lt;chr&gt;,\n#   ID_3 &lt;int&gt;, NAME_3 &lt;chr&gt;, ENGTYPE_3 &lt;chr&gt;, County &lt;chr&gt;, GDPPC &lt;dbl&gt;,\n#   geometry &lt;POLYGON [°]&gt;\n\n\nviz Gi\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(HCSA) +\n  tm_fill(\"gi_star\", palette = \"-RdBu\", style = \"cont\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8))\n\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nviz pval\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(HCSA) +\n  tm_fill(\"p_sim\") + \n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nviz hcsa\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nmap1 &lt;- tm_shape(HCSA) +\n  tm_fill(\"gi_star\", palette = \"-RdBu\", style = \"cont\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"Gi* of GDPPC\",\n            main.title.size = 0.8)\n\nmap2 &lt;- tm_shape(HCSA) +\n  tm_fill(\"p_value\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of Gi*\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nplot signif hot/cold areas\n\nHCSA_sig &lt;- HCSA  %&gt;%\n  filter(p_sim &lt; 0.05)\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(HCSA) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(HCSA_sig) +\n  tm_fill(\"gi_star\", palette = \"-RdBu\", style = \"cont\") + \n  tm_borders(alpha = 0.4)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "Hands-On_Ex/Hands-On_Ex07/Hands-On_Ex07.html",
    "href": "Hands-On_Ex/Hands-On_Ex07/Hands-On_Ex07.html",
    "title": "Hands-On_Ex07",
    "section": "",
    "text": "pacman::p_load(BiocManager, rgdal, spdep, tmap, sf, ClustGeo, \n               ggpubr, cluster, factoextra, NbClust,\n               heatmaply, corrplot, psych, tidyverse, GGally)\n\nInstalling package into 'C:/Users/Kai/AppData/Local/R/win-library/4.4'\n(as 'lib' is unspecified)\n\n\nWarning: unable to access index for repository http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.4:\n  cannot open URL 'http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.4/PACKAGES'\n\n\npackage 'BiocManager' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Kai\\AppData\\Local\\Temp\\RtmpqmGXjh\\downloaded_packages\n\n\n\nBiocManager installed\nInstalling package into 'C:/Users/Kai/AppData/Local/R/win-library/4.4'\n(as 'lib' is unspecified)\n\n\nWarning: package 'rgdal' is not available for this version of R\n\nA version of this package for your version of R might be available elsewhere,\nsee the ideas at\nhttps://cran.r-project.org/doc/manuals/r-patched/R-admin.html#Installing-packages\nWarning: unable to access index for repository http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.4:\n  cannot open URL 'http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.4/PACKAGES'\n\n\npackage 'BiocVersion' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Kai\\AppData\\Local\\Temp\\RtmpqmGXjh\\downloaded_packages\n\n\nWarning in p_install(package, character.only = TRUE, ...):\n\n\nWarning in library(package, lib.loc = lib.loc, character.only = TRUE,\nlogical.return = TRUE, : there is no package called 'rgdal'\n\n\nInstalling package into 'C:/Users/Kai/AppData/Local/R/win-library/4.4'\n(as 'lib' is unspecified)\n\n\nWarning: unable to access index for repository http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.4:\n  cannot open URL 'http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.4/PACKAGES'\n\n\npackage 'ClustGeo' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Kai\\AppData\\Local\\Temp\\RtmpqmGXjh\\downloaded_packages\n\n\n\nClustGeo installed\nInstalling package into 'C:/Users/Kai/AppData/Local/R/win-library/4.4'\n(as 'lib' is unspecified)\n\n\nalso installing the dependencies 'Deriv', 'microbenchmark', 'numDeriv', 'doBy', 'SparseM', 'MatrixModels', 'minqa', 'nloptr', 'carData', 'Formula', 'pbkrtest', 'quantreg', 'lme4', 'corrplot', 'car', 'ggrepel', 'ggsci', 'cowplot', 'ggsignif', 'gridExtra', 'polynom', 'rstatix'\n\n\nWarning: unable to access index for repository http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.4:\n  cannot open URL 'http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.4/PACKAGES'\n\n\npackage 'Deriv' successfully unpacked and MD5 sums checked\npackage 'microbenchmark' successfully unpacked and MD5 sums checked\npackage 'numDeriv' successfully unpacked and MD5 sums checked\npackage 'doBy' successfully unpacked and MD5 sums checked\npackage 'SparseM' successfully unpacked and MD5 sums checked\npackage 'MatrixModels' successfully unpacked and MD5 sums checked\npackage 'minqa' successfully unpacked and MD5 sums checked\npackage 'nloptr' successfully unpacked and MD5 sums checked\npackage 'carData' successfully unpacked and MD5 sums checked\npackage 'Formula' successfully unpacked and MD5 sums checked\npackage 'pbkrtest' successfully unpacked and MD5 sums checked\npackage 'quantreg' successfully unpacked and MD5 sums checked\npackage 'lme4' successfully unpacked and MD5 sums checked\npackage 'corrplot' successfully unpacked and MD5 sums checked\npackage 'car' successfully unpacked and MD5 sums checked\npackage 'ggrepel' successfully unpacked and MD5 sums checked\npackage 'ggsci' successfully unpacked and MD5 sums checked\npackage 'cowplot' successfully unpacked and MD5 sums checked\npackage 'ggsignif' successfully unpacked and MD5 sums checked\npackage 'gridExtra' successfully unpacked and MD5 sums checked\npackage 'polynom' successfully unpacked and MD5 sums checked\npackage 'rstatix' successfully unpacked and MD5 sums checked\npackage 'ggpubr' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Kai\\AppData\\Local\\Temp\\RtmpqmGXjh\\downloaded_packages\n\n\n\nggpubr installed\n\n\nInstalling package into 'C:/Users/Kai/AppData/Local/R/win-library/4.4'\n(as 'lib' is unspecified)\n\n\nalso installing the dependencies 'estimability', 'viridis', 'DT', 'ellipse', 'emmeans', 'flashClust', 'leaps', 'multcompView', 'scatterplot3d', 'plyr', 'dendextend', 'FactoMineR', 'reshape2'\n\n\nWarning: unable to access index for repository http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.4:\n  cannot open URL 'http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.4/PACKAGES'\n\n\npackage 'estimability' successfully unpacked and MD5 sums checked\npackage 'viridis' successfully unpacked and MD5 sums checked\npackage 'DT' successfully unpacked and MD5 sums checked\npackage 'ellipse' successfully unpacked and MD5 sums checked\npackage 'emmeans' successfully unpacked and MD5 sums checked\npackage 'flashClust' successfully unpacked and MD5 sums checked\npackage 'leaps' successfully unpacked and MD5 sums checked\npackage 'multcompView' successfully unpacked and MD5 sums checked\npackage 'scatterplot3d' successfully unpacked and MD5 sums checked\npackage 'plyr' successfully unpacked and MD5 sums checked\npackage 'dendextend' successfully unpacked and MD5 sums checked\npackage 'FactoMineR' successfully unpacked and MD5 sums checked\npackage 'reshape2' successfully unpacked and MD5 sums checked\npackage 'factoextra' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Kai\\AppData\\Local\\Temp\\RtmpqmGXjh\\downloaded_packages\n\n\n\nfactoextra installed\n\n\nInstalling package into 'C:/Users/Kai/AppData/Local/R/win-library/4.4'\n(as 'lib' is unspecified)\n\n\nWarning: unable to access index for repository http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.4:\n  cannot open URL 'http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.4/PACKAGES'\n\n\npackage 'NbClust' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Kai\\AppData\\Local\\Temp\\RtmpqmGXjh\\downloaded_packages\n\n\n\nNbClust installed\nInstalling package into 'C:/Users/Kai/AppData/Local/R/win-library/4.4'\n(as 'lib' is unspecified)\n\n\nalso installing the dependencies 'permute', 'ca', 'gclus', 'qap', 'registry', 'TSP', 'vegan', 'plotly', 'seriation', 'webshot', 'assertthat', 'egg'\n\n\nWarning: unable to access index for repository http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.4:\n  cannot open URL 'http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.4/PACKAGES'\n\n\npackage 'permute' successfully unpacked and MD5 sums checked\npackage 'ca' successfully unpacked and MD5 sums checked\npackage 'gclus' successfully unpacked and MD5 sums checked\npackage 'qap' successfully unpacked and MD5 sums checked\npackage 'registry' successfully unpacked and MD5 sums checked\npackage 'TSP' successfully unpacked and MD5 sums checked\npackage 'vegan' successfully unpacked and MD5 sums checked\npackage 'plotly' successfully unpacked and MD5 sums checked\npackage 'seriation' successfully unpacked and MD5 sums checked\npackage 'webshot' successfully unpacked and MD5 sums checked\npackage 'assertthat' successfully unpacked and MD5 sums checked\npackage 'egg' successfully unpacked and MD5 sums checked\npackage 'heatmaply' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Kai\\AppData\\Local\\Temp\\RtmpqmGXjh\\downloaded_packages\n\n\n\nheatmaply installed\n\n\nInstalling package into 'C:/Users/Kai/AppData/Local/R/win-library/4.4'\n(as 'lib' is unspecified)\n\n\nalso installing the dependencies 'mnormt', 'GPArotation'\n\n\nWarning: unable to access index for repository http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.4:\n  cannot open URL 'http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.4/PACKAGES'\n\n\npackage 'mnormt' successfully unpacked and MD5 sums checked\npackage 'GPArotation' successfully unpacked and MD5 sums checked\npackage 'psych' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Kai\\AppData\\Local\\Temp\\RtmpqmGXjh\\downloaded_packages\n\n\n\npsych installed\n\n\nInstalling package into 'C:/Users/Kai/AppData/Local/R/win-library/4.4'\n(as 'lib' is unspecified)\n\n\nalso installing the dependency 'ggstats'\n\n\nWarning: unable to access index for repository http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.4:\n  cannot open URL 'http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.4/PACKAGES'\n\n\npackage 'ggstats' successfully unpacked and MD5 sums checked\npackage 'GGally' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\Kai\\AppData\\Local\\Temp\\RtmpqmGXjh\\downloaded_packages\n\n\n\nGGally installed\n\n\nWarning in pacman::p_load(BiocManager, rgdal, spdep, tmap, sf, ClustGeo, : Failed to install/load:\nrgdal\n\n\n\nshan_sf &lt;- st_read(dsn = \"data/geospatial\", \n                   layer = \"myanmar_township_boundaries\") %&gt;%\n  filter(ST %in% c(\"Shan (East)\", \"Shan (North)\", \"Shan (South)\")) %&gt;%\n  select(c(2:7))\n\nReading layer `myanmar_township_boundaries' from data source \n  `C:\\endurrus\\IS415-GAA\\Hands-On_Ex\\Hands-On_Ex07\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.17275 ymin: 9.671252 xmax: 101.1699 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\n\nshan_sf\n\nSimple feature collection with 55 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 96.15107 ymin: 19.29932 xmax: 101.1699 ymax: 24.15907\nGeodetic CRS:  WGS 84\nFirst 10 features:\n             ST ST_PCODE       DT   DT_PCODE        TS  TS_PCODE\n1  Shan (North)   MMR015  Mongmit MMR015D008   Mongmit MMR015017\n2  Shan (South)   MMR014 Taunggyi MMR014D001   Pindaya MMR014006\n3  Shan (South)   MMR014 Taunggyi MMR014D001   Ywangan MMR014007\n4  Shan (South)   MMR014 Taunggyi MMR014D001  Pinlaung MMR014009\n5  Shan (North)   MMR015  Mongmit MMR015D008    Mabein MMR015018\n6  Shan (South)   MMR014 Taunggyi MMR014D001     Kalaw MMR014005\n7  Shan (South)   MMR014 Taunggyi MMR014D001     Pekon MMR014010\n8  Shan (South)   MMR014 Taunggyi MMR014D001  Lawksawk MMR014008\n9  Shan (North)   MMR015  Kyaukme MMR015D003 Nawnghkio MMR015013\n10 Shan (North)   MMR015  Kyaukme MMR015D003   Kyaukme MMR015012\n                         geometry\n1  MULTIPOLYGON (((96.96001 23...\n2  MULTIPOLYGON (((96.7731 21....\n3  MULTIPOLYGON (((96.78483 21...\n4  MULTIPOLYGON (((96.49518 20...\n5  MULTIPOLYGON (((96.66306 24...\n6  MULTIPOLYGON (((96.49518 20...\n7  MULTIPOLYGON (((97.14738 19...\n8  MULTIPOLYGON (((96.94981 22...\n9  MULTIPOLYGON (((96.75648 22...\n10 MULTIPOLYGON (((96.95498 22...\n\n\n\nict &lt;- read_csv (\"data/aspatial/Shan-ICT.csv\")\n\nRows: 55 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): District Pcode, District Name, Township Pcode, Township Name\ndbl (7): Total households, Radio, Television, Land line phone, Mobile phone,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nsummary(ict)\n\n District Pcode     District Name      Township Pcode     Township Name     \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n Total households     Radio         Television    Land line phone \n Min.   : 3318    Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711    1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685    Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369    Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471    3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604    Max.   :30176   Max.   :62388   Max.   :6736.0  \n  Mobile phone      Computer      Internet at home\n Min.   :  150   Min.   :  20.0   Min.   :   8.0  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0  \n Median : 3559   Median : 244.0   Median : 316.0  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0  \n\n\n\n1.0 Derive penetration rate\nAnalysing the penetration rate of devices in Myanmar:\n\nict_derived &lt;- ict %&gt;%\n  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %&gt;%\n  mutate(`TV_PR` = `Television`/`Total households`*1000) %&gt;%\n  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %&gt;%\n  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %&gt;%\n  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %&gt;%\n  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %&gt;%\n  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,\n         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,\n         `TT_HOUSEHOLDS`=`Total households`,\n         `RADIO`=`Radio`, `TV`=`Television`, \n         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,\n         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) \n\nsummary(ict_derived)\n\n   DT_PCODE              DT              TS_PCODE              TS           \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n TT_HOUSEHOLDS       RADIO             TV           LLPHONE      \n Min.   : 3318   Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711   1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685   Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369   Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471   3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604   Max.   :30176   Max.   :62388   Max.   :6736.0  \n     MPHONE         COMPUTER         INTERNET         RADIO_PR     \n Min.   :  150   Min.   :  20.0   Min.   :   8.0   Min.   : 21.05  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0   1st Qu.:138.95  \n Median : 3559   Median : 244.0   Median : 316.0   Median :210.95  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2   Mean   :215.68  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5   3rd Qu.:268.07  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0   Max.   :484.52  \n     TV_PR         LLPHONE_PR       MPHONE_PR       COMPUTER_PR    \n Min.   :116.0   Min.   :  2.78   Min.   : 36.42   Min.   : 3.278  \n 1st Qu.:450.2   1st Qu.: 22.84   1st Qu.:190.14   1st Qu.:11.832  \n Median :517.2   Median : 37.59   Median :305.27   Median :18.970  \n Mean   :509.5   Mean   : 51.09   Mean   :314.05   Mean   :24.393  \n 3rd Qu.:606.4   3rd Qu.: 69.72   3rd Qu.:428.43   3rd Qu.:29.897  \n Max.   :842.5   Max.   :181.49   Max.   :735.43   Max.   :92.402  \n  INTERNET_PR     \n Min.   :  1.041  \n 1st Qu.:  8.617  \n Median : 22.829  \n Mean   : 30.644  \n 3rd Qu.: 41.281  \n Max.   :117.985  \n\n\n\n\n2.0 EDA\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\n\n\n\n\n\n\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\n\n\n\n\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\n\n\n\n\n\n\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\n\n\n\n\n\nradio &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ntv &lt;- ggplot(data=ict_derived, \n             aes(x= `TV_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nllphone &lt;- ggplot(data=ict_derived, \n             aes(x= `LLPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nmphone &lt;- ggplot(data=ict_derived, \n             aes(x= `MPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ncomputer &lt;- ggplot(data=ict_derived, \n             aes(x= `COMPUTER_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ninternet &lt;- ggplot(data=ict_derived, \n             aes(x= `INTERNET_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\nggplot()\n\n\n\n\n\n\n\n\n\n\n2.1 EDA with Chloropeths\nCombining both datasets.\n\nshan_sf &lt;- left_join(shan_sf, \n                     ict_derived, by=c(\"TS_PCODE\"=\"TS_PCODE\"))\n  \nwrite_rds(shan_sf, \"data/rds/shan_sf.rds\")\n\n\nshan_sf &lt;- read_rds(\"data/rds/shan_sf.rds\")\n\n\nqtm(shan_sf, \"RADIO_PR\")\n\n\n\n\n\n\n\n\n\nTT_HOUSEHOLDS.map &lt;- tm_shape(shan_sf) + \n  tm_fill(col = \"TT_HOUSEHOLDS\",\n          n = 5,\n          style = \"jenks\", \n          title = \"Total households\") + \n  tm_borders(alpha = 0.5) \n\nRADIO.map &lt;- tm_shape(shan_sf) + \n  tm_fill(col = \"RADIO\",\n          n = 5,\n          style = \"jenks\",\n          title = \"Number Radio \") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(TT_HOUSEHOLDS.map, RADIO.map,\n             asp=NA, ncol=2)\n\n\n\n\n\n\n\n\n\ntm_shape(shan_sf) +\n    tm_polygons(c(\"TT_HOUSEHOLDS\", \"RADIO_PR\"),\n                style=\"jenks\") +\n    tm_facets(sync = TRUE, ncol = 2) +\n  tm_legend(legend.position = c(\"right\", \"bottom\"))+\n  tm_layout(outer.margins=0, asp=0)\n\n\n\n\n\n\n\n\n\n\n3.0 Correlation analysis\n\ncluster_vars.cor = cor(ict_derived[,12:17])\ncorrplot.mixed(cluster_vars.cor,\n         lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\nThe above shows that COMPUTER_PR and INTERNET_PR are highly correlated. This suggest that only one of them should be used in the cluster analysis.\n\n\n4.0 Hierarchy Cluster Analysis\n\ncluster_vars &lt;- shan_sf %&gt;%\n  st_set_geometry(NULL) %&gt;%\n  select(\"TS.x\", \"RADIO_PR\", \"TV_PR\", \"LLPHONE_PR\", \"MPHONE_PR\", \"COMPUTER_PR\")\nhead(cluster_vars,10)\n\n        TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1    Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\n2    Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\n3    Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\n4   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\n5     Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\n6      Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\n7      Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\n8   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\n9  Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\n10   Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\nRemoved INTERNET_PR because it is highly correlated with COMPUTER_PR.\n\nrow.names(cluster_vars) &lt;- cluster_vars$\"TS.x\"\nhead(cluster_vars,10)\n\n               TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit     Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya     Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan     Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\nMabein       Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw         Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\nPekon         Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme     Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\n\nrow.names(cluster_vars) &lt;- cluster_vars$\"TS.x\"\nhead(cluster_vars,10)\n\n               TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit     Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya     Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan     Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\nMabein       Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw         Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\nPekon         Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme     Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\n\nshan_ict &lt;- select(cluster_vars, c(2:6))\nhead(shan_ict, 10)\n\n          RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit   286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya   417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan   484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung  231.6499 541.7189   28.54454  249.4903    13.76255\nMabein    449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw     280.7624 611.6204   42.06478  408.7951    29.63160\nPekon     318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk  387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme   210.9548 601.1773   39.58267  372.4930    30.94709\n\n\n\nshan_ict.std &lt;- normalize(shan_ict)\nsummary(shan_ict.std)\n\n    RADIO_PR          TV_PR          LLPHONE_PR       MPHONE_PR     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.2544   1st Qu.:0.4600   1st Qu.:0.1123   1st Qu.:0.2199  \n Median :0.4097   Median :0.5523   Median :0.1948   Median :0.3846  \n Mean   :0.4199   Mean   :0.5416   Mean   :0.2703   Mean   :0.3972  \n 3rd Qu.:0.5330   3rd Qu.:0.6750   3rd Qu.:0.3746   3rd Qu.:0.5608  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n  COMPUTER_PR     \n Min.   :0.00000  \n 1st Qu.:0.09598  \n Median :0.17607  \n Mean   :0.23692  \n 3rd Qu.:0.29868  \n Max.   :1.00000  \n\n\nmin-max standardization\n\nshan_ict.std &lt;- normalize(shan_ict)\nsummary(shan_ict.std)\n\n    RADIO_PR          TV_PR          LLPHONE_PR       MPHONE_PR     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.2544   1st Qu.:0.4600   1st Qu.:0.1123   1st Qu.:0.2199  \n Median :0.4097   Median :0.5523   Median :0.1948   Median :0.3846  \n Mean   :0.4199   Mean   :0.5416   Mean   :0.2703   Mean   :0.3972  \n 3rd Qu.:0.5330   3rd Qu.:0.6750   3rd Qu.:0.3746   3rd Qu.:0.5608  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n  COMPUTER_PR     \n Min.   :0.00000  \n 1st Qu.:0.09598  \n Median :0.17607  \n Mean   :0.23692  \n 3rd Qu.:0.29868  \n Max.   :1.00000  \n\n\n\n4.1 Z-score standardisation\n\nshan_ict.z &lt;- scale(shan_ict)\ndescribe(shan_ict.z)\n\n            vars  n mean sd median trimmed  mad   min  max range  skew kurtosis\nRADIO_PR       1 55    0  1  -0.04   -0.06 0.94 -1.85 2.55  4.40  0.48    -0.27\nTV_PR          2 55    0  1   0.05    0.04 0.78 -2.47 2.09  4.56 -0.38    -0.23\nLLPHONE_PR     3 55    0  1  -0.33   -0.15 0.68 -1.19 3.20  4.39  1.37     1.49\nMPHONE_PR      4 55    0  1  -0.05   -0.06 1.01 -1.58 2.40  3.98  0.48    -0.34\nCOMPUTER_PR    5 55    0  1  -0.26   -0.18 0.64 -1.03 3.31  4.34  1.80     2.96\n              se\nRADIO_PR    0.13\nTV_PR       0.13\nLLPHONE_PR  0.13\nMPHONE_PR   0.13\nCOMPUTER_PR 0.13\n\n\n\n\n4.2 Visualising the standardised clustering variables\nThe code chunk below plots the scaled Radio_PR field.\n\nr &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df &lt;- as.data.frame(shan_ict.std)\ns &lt;- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df &lt;- as.data.frame(shan_ict.z)\nz &lt;- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\n\n\n\nr &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df &lt;- as.data.frame(shan_ict.std)\ns &lt;- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df &lt;- as.data.frame(shan_ict.z)\nz &lt;- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\n\n\n\nproxmat &lt;- dist(shan_ict, method = 'euclidean')\n\n\nproxmat\n\n             Mongmit   Pindaya   Ywangan  Pinlaung    Mabein     Kalaw\nPindaya    171.86828                                                  \nYwangan    381.88259 257.31610                                        \nPinlaung    57.46286 208.63519 400.05492                              \nMabein     263.37099 313.45776 529.14689 312.66966                    \nKalaw      160.05997 302.51785 499.53297 181.96406 198.14085          \nPekon       59.61977 117.91580 336.50410  94.61225 282.26877 211.91531\nLawksawk   140.11550 204.32952 432.16535 192.57320 130.36525 140.01101\nNawnghkio   89.07103 180.64047 377.87702 139.27495 204.63154 127.74787\nKyaukme    144.02475 311.01487 505.89191 139.67966 264.88283  79.42225\nMuse       563.01629 704.11252 899.44137 571.58335 453.27410 412.46033\nLaihka     141.87227 298.61288 491.83321 101.10150 345.00222 197.34633\nMongnai    115.86190 258.49346 422.71934  64.52387 358.86053 200.34668\nMawkmai    434.92968 437.99577 397.03752 398.11227 693.24602 562.59200\nKutkai      97.61092 212.81775 360.11861  78.07733 340.55064 204.93018\nMongton    192.67961 283.35574 361.23257 163.42143 425.16902 267.87522\nMongyai    256.72744 287.41816 333.12853 220.56339 516.40426 386.74701\nMongkaing  503.61965 481.71125 364.98429 476.29056 747.17454 625.24500\nLashio     251.29457 398.98167 602.17475 262.51735 231.28227 106.69059\nMongpan    193.32063 335.72896 483.68125 192.78316 301.52942 114.69105\nMatman     401.25041 354.39039 255.22031 382.40610 637.53975 537.63884\nTachileik  529.63213 635.51774 807.44220 555.01039 365.32538 373.64459\nNarphan    406.15714 474.50209 452.95769 371.26895 630.34312 463.53759\nMongkhet   349.45980 391.74783 408.97731 305.86058 610.30557 465.52013\nHsipaw     118.18050 245.98884 388.63147  76.55260 366.42787 212.36711\nMonghsat   214.20854 314.71506 432.98028 160.44703 470.48135 317.96188\nMongmao    242.54541 402.21719 542.85957 217.58854 384.91867 195.18913\nNansang    104.91839 275.44246 472.77637  85.49572 287.92364 124.30500\nLaukkaing  568.27732 726.85355 908.82520 563.81750 520.67373 427.77791\nPangsang   272.67383 428.24958 556.82263 244.47146 418.54016 224.03998\nNamtu      179.62251 225.40822 444.66868 170.04533 366.16094 307.27427\nMonghpyak  177.76325 221.30579 367.44835 222.20020 212.69450 167.08436\nKonkyan    403.39082 500.86933 528.12533 365.44693 613.51206 444.75859\nMongping   265.12574 310.64850 337.94020 229.75261 518.16310 375.64739\nHopong     136.93111 223.06050 352.85844  98.14855 398.00917 264.16294\nNyaungshwe  99.38590 216.52463 407.11649 138.12050 210.21337  95.66782\nHsihseng   131.49728 172.00796 342.91035 111.61846 381.20187 287.11074\nMongla     384.30076 549.42389 728.16301 372.59678 406.09124 260.26411\nHseni      189.37188 337.98982 534.44679 204.47572 213.61240  38.52842\nKunlong    224.12169 355.47066 531.63089 194.76257 396.61508 273.01375\nHopang     281.05362 443.26362 596.19312 265.96924 368.55167 185.14704\nNamhkan    386.02794 543.81859 714.43173 382.78835 379.56035 246.39577\nKengtung   246.45691 385.68322 573.23173 263.48638 219.47071  88.29335\nLangkho    164.26299 323.28133 507.78892 168.44228 253.84371  67.19580\nMonghsu    109.15790 198.35391 340.42789  80.86834 367.19820 237.34578\nTaunggyi   399.84278 503.75471 697.98323 429.54386 226.24011 252.26066\nPangwaun   381.51246 512.13162 580.13146 356.37963 523.44632 338.35194\nKyethi     202.92551 175.54012 287.29358 189.47065 442.07679 360.17247\nLoilen     145.48666 293.61143 469.51621  91.56527 375.06406 217.19877\nManton     430.64070 402.42888 306.16379 405.83081 674.01120 560.16577\nMongyang   309.51302 475.93982 630.71590 286.03834 411.88352 233.56349\nKunhing    173.50424 318.23811 449.67218 141.58836 375.82140 197.63683\nMongyawng  214.21738 332.92193 570.56521 235.55497 193.49994 173.43078\nTangyan    195.92520 208.43740 324.77002 169.50567 448.59948 348.06617\nNamhsan    237.78494 228.41073 286.16305 214.33352 488.33873 385.88676\n               Pekon  Lawksawk Nawnghkio   Kyaukme      Muse    Laihka\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk   157.51129                                                  \nNawnghkio  113.15370  90.82891                                        \nKyaukme    202.12206 186.29066 157.04230                              \nMuse       614.56144 510.13288 533.68806 434.75768                    \nLaihka     182.23667 246.74469 211.88187 128.24979 526.65211          \nMongnai    151.60031 241.71260 182.21245 142.45669 571.97975 100.53457\nMawkmai    416.00669 567.52693 495.15047 512.02846 926.93007 429.96554\nKutkai     114.98048 224.64646 147.44053 170.93318 592.90743 144.67198\nMongton    208.14888 311.07742 225.81118 229.28509 634.71074 212.07320\nMongyai    242.52301 391.26989 319.57938 339.27780 763.91399 264.13364\nMongkaing  480.23965 625.18712 546.69447 586.05094 995.66496 522.96309\nLashio     303.80011 220.75270 230.55346 129.95255 313.15288 238.64533\nMongpan    243.30037 228.54223 172.84425 110.37831 447.49969 210.76951\nMatman     368.25761 515.39711 444.05061 505.52285 929.11283 443.25453\nTachileik  573.39528 441.82621 470.45533 429.15493 221.19950 549.08985\nNarphan    416.84901 523.69580 435.59661 420.30003 770.40234 392.32592\nMongkhet   342.08722 487.41102 414.10280 409.03553 816.44931 324.97428\nHsipaw     145.37542 249.35081 176.09570 163.95741 591.03355 128.42987\nMonghsat   225.64279 352.31496 289.83220 253.25370 663.76026 158.93517\nMongmao    293.70625 314.64777 257.76465 146.09228 451.82530 185.99082\nNansang    160.37607 188.78869 151.13185  60.32773 489.35308  78.78999\nLaukkaing  624.82399 548.83928 552.65554 428.74978 149.26996 507.39700\nPangsang   321.81214 345.91486 287.10769 175.35273 460.24292 214.19291\nNamtu      165.02707 260.95300 257.52713 270.87277 659.16927 185.86794\nMonghpyak  190.93173 142.31691  93.03711 217.64419 539.43485 293.22640\nKonkyan    421.48797 520.31264 439.34272 393.79911 704.86973 351.75354\nMongping   259.68288 396.47081 316.14719 330.28984 744.44948 272.82761\nHopong     138.86577 274.91604 204.88286 218.84211 648.68011 157.48857\nNyaungshwe 139.31874 104.17830  43.26545 126.50414 505.88581 201.71653\nHsihseng   105.30573 257.11202 209.88026 250.27059 677.66886 175.89761\nMongla     441.20998 393.18472 381.40808 241.58966 256.80556 315.93218\nHseni      243.98001 171.50398 164.05304  81.20593 381.30567 204.49010\nKunlong    249.36301 318.30406 285.04608 215.63037 547.24297 122.68682\nHopang     336.38582 321.16462 279.84188 154.91633 377.44407 230.78652\nNamhkan    442.77120 379.41126 367.33575 247.81990 238.67060 342.43665\nKengtung   297.67761 209.38215 208.29647 136.23356 330.08211 258.23950\nLangkho    219.21623 190.30257 156.51662  51.67279 413.64173 160.94435\nMonghsu    113.84636 242.04063 170.09168 200.77712 633.21624 163.28926\nTaunggyi   440.66133 304.96838 344.79200 312.60547 250.81471 425.36916\nPangwaun   423.81347 453.02765 381.67478 308.31407 541.97887 351.78203\nKyethi     162.43575 317.74604 267.21607 328.14177 757.16745 255.83275\nLoilen     181.94596 265.29318 219.26405 146.92675 560.43400  59.69478\nManton     403.82131 551.13000 475.77296 522.86003 941.49778 458.30232\nMongyang   363.58788 363.37684 323.32123 188.59489 389.59919 229.71502\nKunhing    213.46379 278.68953 206.15773 145.00266 533.00162 142.03682\nMongyawng  248.43910 179.07229 220.61209 181.55295 422.37358 211.99976\nTangyan    167.79937 323.14701 269.07880 306.78359 736.93741 224.29176\nNamhsan    207.16559 362.84062 299.74967 347.85944 778.52971 273.79672\n             Mongnai   Mawkmai    Kutkai   Mongton   Mongyai Mongkaing\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai    374.50873                                                  \nKutkai      91.15307 364.95519                                        \nMongton    131.67061 313.35220 107.06341                              \nMongyai    203.23607 178.70499 188.94166 159.79790                    \nMongkaing  456.00842 133.29995 428.96133 365.50032 262.84016          \nLashio     270.86983 638.60773 289.82513 347.11584 466.36472 708.65819\nMongpan    178.09554 509.99632 185.18173 200.31803 346.39710 563.56780\nMatman     376.33870 147.83545 340.86349 303.04574 186.95158 135.51424\nTachileik  563.95232 919.38755 568.99109 608.76740 750.29555 967.14087\nNarphan    329.31700 273.75350 314.27683 215.97925 248.82845 285.65085\nMongkhet   275.76855 115.58388 273.91673 223.22828 104.98924 222.60577\nHsipaw      52.68195 351.34601  51.46282  90.69766 177.33790 423.77868\nMonghsat   125.25968 275.09705 154.32012 150.98053 127.35225 375.60376\nMongmao    188.29603 485.52853 204.69232 206.57001 335.61300 552.31959\nNansang     92.79567 462.41938 130.04549 199.58124 288.55962 542.16609\nLaukkaing  551.56800 882.51110 580.38112 604.66190 732.68347 954.11795\nPangsang   204.25746 484.14757 228.33583 210.77938 343.30638 548.40662\nNamtu      209.35473 427.95451 225.28268 308.71751 278.02761 525.04057\nMonghpyak  253.26470 536.71695 206.61627 258.04282 370.01575 568.21089\nKonkyan    328.82831 339.01411 310.60810 248.25265 287.87384 380.92091\nMongping   202.99615 194.31049 182.75266 119.86993  65.38727 257.18572\nHopong      91.53795 302.84362  73.45899 106.21031 124.62791 379.37916\nNyaungshwe 169.63695 502.99026 152.15482 219.72196 327.13541 557.32112\nHsihseng   142.36728 329.29477 128.21054 194.64317 162.27126 411.59788\nMongla     354.10985 686.88950 388.40984 411.06668 535.28615 761.48327\nHseni      216.81639 582.53670 229.37894 286.75945 408.23212 648.04408\nKunlong    202.92529 446.53763 204.54010 270.02165 299.36066 539.91284\nHopang     243.00945 561.24281 263.31986 273.50305 408.73288 626.17673\nNamhkan    370.05669 706.47792 392.48568 414.53594 550.62819 771.39688\nKengtung   272.28711 632.54638 279.19573 329.38387 460.39706 692.74693\nLangkho    174.67678 531.08019 180.51419 236.70878 358.95672 597.42714\nMonghsu     84.11238 332.07962  62.60859 107.04894 154.86049 400.71816\nTaunggyi   448.55282 810.74692 450.33382 508.40925 635.94105 866.21117\nPangwaun   312.13429 500.68857 321.80465 257.50434 394.07696 536.95736\nKyethi     210.50453 278.85535 184.23422 222.52947 137.79420 352.06533\nLoilen      58.41263 388.73386 131.56529 176.16001 224.79239 482.18190\nManton     391.54062 109.08779 361.82684 310.20581 195.59882  81.75337\nMongyang   260.39387 558.83162 285.33223 295.60023 414.31237 631.91325\nKunhing    110.55197 398.43973 108.84990 114.03609 238.99570 465.03971\nMongyawng  275.77546 620.04321 281.03383 375.22688 445.78964 700.98284\nTangyan    180.37471 262.66006 166.61820 198.88460 109.08506 348.56123\nNamhsan    218.10003 215.19289 191.32762 196.76188  77.35900 288.66231\n              Lashio   Mongpan    Matman Tachileik   Narphan  Mongkhet\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan    172.33279                                                  \nMatman     628.11049 494.81014                                        \nTachileik  311.95286 411.03849 890.12935                              \nNarphan    525.63854 371.13393 312.05193 760.29566                    \nMongkhet   534.44463 412.17123 203.02855 820.50164 217.28718          \nHsipaw     290.86435 179.52054 344.45451 576.18780 295.40170 253.80950\nMonghsat   377.86793 283.30992 313.59911 677.09508 278.21548 167.98445\nMongmao    214.23677 131.59966 501.59903 472.95568 331.42618 375.35820\nNansang    184.47950 144.77393 458.06573 486.77266 398.13308 360.99219\nLaukkaing  334.65738 435.58047 903.72094 325.06329 708.82887 769.06406\nPangsang   236.72516 140.23910 506.29940 481.31907 316.30314 375.58139\nNamtu      365.88437 352.91394 416.65397 659.56458 494.36143 355.99713\nMonghpyak  262.09281 187.85699 470.46845 444.04411 448.40651 462.63265\nKonkyan    485.51312 365.87588 392.40306 730.92980 158.82353 254.24424\nMongping   454.52548 318.47482 201.65224 727.08969 188.64567 113.80917\nHopong     345.31042 239.43845 291.84351 632.45718 294.40441 212.99485\nNyaungshwe 201.58191 137.29734 460.91883 445.81335 427.94086 417.08639\nHsihseng   369.00833 295.87811 304.02806 658.87060 377.52977 256.70338\nMongla     179.95877 253.20001 708.17595 347.33155 531.46949 574.40292\nHseni       79.41836 120.66550 564.64051 354.90063 474.12297 481.88406\nKunlong    295.23103 288.03320 468.27436 595.70536 413.07823 341.68641\nHopang     170.63913 135.62913 573.55355 403.82035 397.85908 451.51070\nNamhkan    173.27153 240.34131 715.42102 295.91660 536.85519 596.19944\nKengtung    59.85893 142.21554 613.01033 295.90429 505.40025 531.35998\nLangkho    115.18145  94.98486 518.86151 402.33622 420.65204 428.08061\nMonghsu    325.71557 216.25326 308.13805 605.02113 311.92379 247.73318\nTaunggyi   195.14541 319.81385 778.45810 150.84117 684.20905 712.80752\nPangwaun   362.45608 232.52209 523.43600 540.60474 264.64997 407.02947\nKyethi     447.10266 358.89620 233.83079 728.87329 374.90376 233.25039\nLoilen     268.92310 207.25000 406.56282 573.75476 354.79137 284.76895\nManton     646.66493 507.96808  59.52318 910.23039 280.26395 181.33894\nMongyang   209.33700 194.93467 585.61776 448.79027 401.39475 445.40621\nKunhing    255.10832 137.85278 403.66587 532.26397 281.62645 292.49814\nMongyawng  172.70139 275.15989 601.80824 432.10118 572.76394 522.91815\nTangyan    429.84475 340.39128 242.78233 719.84066 348.84991 201.49393\nNamhsan    472.04024 364.77086 180.09747 754.03913 316.54695 170.90848\n              Hsipaw  Monghsat   Mongmao   Nansang Laukkaing  Pangsang\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat   121.78922                                                  \nMongmao    185.99483 247.17708                                        \nNansang    120.24428 201.92690 164.99494                              \nLaukkaing  569.06099 626.44910 404.00848 480.60074                    \nPangsang   205.04337 256.37933  57.60801 193.36162 408.04016          \nNamtu      229.44658 231.78673 365.03882 217.61884 664.06286 392.97391\nMonghpyak  237.67919 356.84917 291.88846 227.52638 565.84279 315.11651\nKonkyan    296.74316 268.25060 281.87425 374.70456 635.92043 274.81900\nMongping   168.92101 140.95392 305.57166 287.36626 708.13447 308.33123\nHopong      62.86179 100.45714 244.16253 167.66291 628.48557 261.51075\nNyaungshwe 169.92664 286.37238 230.45003 131.18943 520.24345 257.77823\nHsihseng   136.54610 153.49551 311.98001 193.53779 670.74564 335.52974\nMongla     373.47509 429.00536 216.24705 289.45119 202.55831 217.88123\nHseni      231.48538 331.22632 184.67099 136.45492 391.74585 214.66375\nKunlong    205.10051 202.31862 224.43391 183.01388 521.88657 258.49342\nHopang     248.72536 317.64824  78.29342 196.47091 331.67199  92.57672\nNamhkan    382.79302 455.10875 223.32205 302.89487 196.46063 231.38484\nKengtung   284.08582 383.72138 207.58055 193.67980 351.48520 229.85484\nLangkho    183.05109 279.52329 134.50170  99.39859 410.41270 167.65920\nMonghsu     58.55724 137.24737 242.43599 153.59962 619.01766 260.52971\nTaunggyi   462.31183 562.88102 387.33906 365.04897 345.98041 405.59730\nPangwaun   298.12447 343.53898 187.40057 326.12960 470.63605 157.48757\nKyethi     195.17677 190.50609 377.89657 273.02385 749.99415 396.89963\nLoilen      98.04789 118.65144 190.26490  94.23028 535.57527 207.94433\nManton     359.60008 317.15603 503.79786 476.55544 907.38406 504.75214\nMongyang   267.10497 312.64797  91.06281 218.49285 326.19219 108.37735\nKunhing     90.77517 165.38834 103.91040 128.20940 500.41640 123.18870\nMongyawng  294.70967 364.40429 296.40789 191.11990 454.80044 336.16703\nTangyan    167.69794 144.59626 347.14183 249.70235 722.40954 364.76893\nNamhsan    194.47928 169.56962 371.71448 294.16284 760.45960 385.65526\n               Namtu Monghpyak   Konkyan  Mongping    Hopong Nyaungshwe\nPindaya                                                                \nYwangan                                                                \nPinlaung                                                               \nMabein                                                                 \nKalaw                                                                  \nPekon                                                                  \nLawksawk                                                               \nNawnghkio                                                              \nKyaukme                                                                \nMuse                                                                   \nLaihka                                                                 \nMongnai                                                                \nMawkmai                                                                \nKutkai                                                                 \nMongton                                                                \nMongyai                                                                \nMongkaing                                                              \nLashio                                                                 \nMongpan                                                                \nMatman                                                                 \nTachileik                                                              \nNarphan                                                                \nMongkhet                                                               \nHsipaw                                                                 \nMonghsat                                                               \nMongmao                                                                \nNansang                                                                \nLaukkaing                                                              \nPangsang                                                               \nNamtu                                                                  \nMonghpyak  346.57799                                                   \nKonkyan    478.37690 463.39594                                         \nMongping   321.66441 354.76537 242.02901                               \nHopong     206.82668 267.95563 304.49287 134.00139                     \nNyaungshwe 271.41464 103.97300 432.35040 319.32583 209.32532           \nHsihseng   131.89940 285.37627 383.49700 199.64389  91.65458  225.80242\nMongla     483.49434 408.03397 468.09747 512.61580 432.31105  347.60273\nHseni      327.41448 200.26876 448.84563 395.58453 286.41193  130.86310\nKunlong    233.60474 357.44661 329.11433 309.05385 219.06817  285.13095\nHopang     408.24516 304.26577 348.18522 379.27212 309.77356  247.19891\nNamhkan    506.32466 379.50202 481.59596 523.74815 444.13246  333.32428\nKengtung   385.33554 221.47613 474.82621 442.80821 340.47382  177.75714\nLangkho    305.03473 200.27496 386.95022 343.96455 239.63685  128.26577\nMonghsu    209.64684 232.17823 331.72187 158.90478  43.40665  173.82799\nTaunggyi   518.72748 334.17439 650.56905 621.53039 513.76415  325.09619\nPangwaun   517.03554 381.95144 263.97576 340.37881 346.00673  352.92324\nKyethi     186.90932 328.16234 400.10989 187.43974 136.49038  288.06872\nLoilen     194.24075 296.99681 334.19820 231.99959 124.74445  206.40432\nManton     448.58230 502.20840 366.66876 200.48082 310.58885  488.79874\nMongyang   413.26052 358.17599 329.39338 387.80686 323.35704  294.29500\nKunhing    296.43996 250.74435 253.74202 212.59619 145.15617  189.97131\nMongyawng  262.24331 285.56475 522.38580 455.59190 326.59925  218.12104\nTangyan    178.69483 335.26416 367.46064 161.67411 106.82328  284.14692\nNamhsan    240.95555 352.70492 352.20115 130.23777 132.70541  315.91750\n            Hsihseng    Mongla     Hseni   Kunlong    Hopang   Namhkan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla     478.66210                                                  \nHseni      312.74375 226.82048                                        \nKunlong    231.85967 346.46200 276.19175                              \nHopang     370.01334 147.02444 162.80878 271.34451                    \nNamhkan    492.09476  77.21355 212.11323 375.73885 146.18632          \nKengtung   370.72441 202.45004  66.12817 317.14187 164.29921 175.63015\nLangkho    276.27441 229.01675  66.66133 224.52741 134.24847 224.40029\nMonghsu     97.82470 424.51868 262.28462 239.89665 301.84458 431.32637\nTaunggyi   528.14240 297.09863 238.19389 471.29032 329.95252 257.29147\nPangwaun   433.06326 319.18643 330.70182 392.45403 206.98364 310.44067\nKyethi      84.04049 556.02500 388.33498 298.55859 440.48114 567.86202\nLoilen     158.84853 338.67408 227.10984 166.53599 242.89326 364.90647\nManton     334.87758 712.51416 584.63341 479.76855 577.52046 721.86149\nMongyang   382.59743 146.66661 210.19929 247.22785  69.25859 167.72448\nKunhing    220.15490 306.47566 206.47448 193.77551 172.96164 314.92119\nMongyawng  309.51462 315.57550 173.86004 240.39800 290.51360 321.21112\nTangyan     70.27241 526.80849 373.07575 268.07983 412.22167 542.64078\nNamhsan    125.74240 564.02740 411.96125 310.40560 440.51555 576.42717\n            Kengtung   Langkho   Monghsu  Taunggyi  Pangwaun    Kyethi\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho    107.16213                                                  \nMonghsu    316.91914 221.84918                                        \nTaunggyi   186.28225 288.27478 486.91951                              \nPangwaun   337.48335 295.38434 343.38498 497.61245                    \nKyethi     444.26274 350.91512 146.61572 599.57407 476.62610          \nLoilen     282.22935 184.10672 131.55208 455.91617 331.69981 232.32965\nManton     631.99123 535.95620 330.76503 803.08034 510.79265 272.03299\nMongyang   217.08047 175.35413 323.95988 374.58247 225.25026 453.86726\nKunhing    245.95083 146.38284 146.78891 429.98509 229.09986 278.95182\nMongyawng  203.87199 186.11584 312.85089 287.73864 475.33116 387.71518\nTangyan    429.95076 332.02048 127.42203 592.65262 447.05580  47.79331\nNamhsan    466.20497 368.20978 153.22576 631.49232 448.58030  68.67929\n              Loilen    Manton  Mongyang   Kunhing Mongyawng   Tangyan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho                                                               \nMonghsu                                                               \nTaunggyi                                                              \nPangwaun                                                              \nKyethi                                                                \nLoilen                                                                \nManton     419.06087                                                  \nMongyang   246.76592 585.70558                                        \nKunhing    130.39336 410.49230 188.89405                              \nMongyawng  261.75211 629.43339 304.21734 295.35984                    \nTangyan    196.60826 271.82672 421.06366 249.74161 377.52279          \nNamhsan    242.15271 210.48485 450.97869 270.79121 430.02019  63.67613\n\n\n\n\n\n5.0 Hierachial clustering\n\nhclust_ward &lt;- hclust(proxmat, method = 'ward.D')\n\n\nplot(hclust_ward, cex = 0.6)\n\n\n\n\n\n\n\n\nFind the optimal clustering algorithm:\n\nm &lt;- c( \"average\", \"single\", \"complete\", \"ward\")\nnames(m) &lt;- c( \"average\", \"single\", \"complete\", \"ward\")\n\nac &lt;- function(x) {\n  agnes(shan_ict, method = x)$ac\n}\n\nmap_dbl(m, ac)\n\n  average    single  complete      ward \n0.8131144 0.6628705 0.8950702 0.9427730 \n\n\n\n\n6.0 Find optimal cluster\n\nset.seed(12345)\ngap_stat &lt;- clusGap(shan_ict, \n                    FUN = hcut, \n                    nstart = 25, \n                    K.max = 10, \n                    B = 50)\n# Print the result\nprint(gap_stat, method = \"firstmax\")\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = shan_ict, FUNcluster = hcut, K.max = 10, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..10; spaceH0=\"scaledPCA\"\n --&gt; Number of clusters (method 'firstmax'): 1\n          logW   E.logW       gap     SE.sim\n [1,] 8.407129 8.680794 0.2736651 0.04460994\n [2,] 8.130029 8.350712 0.2206824 0.03880130\n [3,] 7.992265 8.202550 0.2102844 0.03362652\n [4,] 7.862224 8.080655 0.2184311 0.03784781\n [5,] 7.756461 7.978022 0.2215615 0.03897071\n [6,] 7.665594 7.887777 0.2221833 0.03973087\n [7,] 7.590919 7.806333 0.2154145 0.04054939\n [8,] 7.526680 7.731619 0.2049390 0.04198644\n [9,] 7.458024 7.660795 0.2027705 0.04421874\n[10,] 7.377412 7.593858 0.2164465 0.04540947\n\n\n\nfviz_gap_stat(gap_stat)\n\n\n\n\n\n\n\n\n\n\n7.0 Dendrogram interpretation\n\nplot(hclust_ward, cex = 0.6)\nrect.hclust(hclust_ward, \n            k = 6, \n            border = 2:5)\n\n\n\n\n\n\n\n\n\nshan_ict_mat &lt;- data.matrix(shan_ict)\n\n\nheatmaply(normalize(shan_ict_mat),\n          Colv=NA,\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          seriate = \"OLO\",\n          colors = Blues,\n          k_row = 6,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"Geographic Segmentation of Shan State by ICT indicators\",\n          xlab = \"ICT Indicators\",\n          ylab = \"Townships of Shan State\"\n          )\n\n\n\n\n\n\n\n8.0 Cluster mapping\n\ngroups &lt;- as.factor(cutree(hclust_ward, k=6))\n\n(retain the 6 as suggested earlier on by optimal cluster count where cluster count != 1)\n\nshan_sf_cluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER`=`as.matrix.groups.`)\n\n\nqtm(shan_sf_cluster, \"CLUSTER\")\n\n\n\n\n\n\n\n\n\nshan_sp &lt;- as_Spatial(shan_sf)\n\n\nshan.nb &lt;- poly2nb(shan_sp)\nsummary(shan.nb)\n\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\n\n\ncoords &lt;- st_coordinates(\n  st_centroid(st_geometry(shan_sf)))\n\n\nplot(st_geometry(shan_sf), \n     border=grey(.5))\nplot(shan.nb,\n     coords, \n     col=\"blue\", \n     add=TRUE)\n\n\n\n\n\n\n\n\n\n\n9.0 Have Graph, Will find MST (Min Span Tree)\n\nlcosts &lt;- nbcosts(shan.nb, shan_ict)\n\n\nshan.w &lt;- nb2listw(shan.nb, \n                   lcosts, \n                   style=\"B\")\nsummary(shan.w)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\nWeights style: B \nWeights constants summary:\n   n   nn       S0       S1        S2\nB 55 3025 76267.65 58260785 522016004\n\n\n\nshan.mst &lt;- mstree(shan.w)\n\n\nclass(shan.mst)\n\n[1] \"mst\"    \"matrix\"\n\n\n\ndim(shan.mst)\n\n[1] 54  3\n\n\n\nhead(shan.mst)\n\n     [,1] [,2]      [,3]\n[1,]   54   48  47.79331\n[2,]   54   17 109.08506\n[3,]   54   45 127.42203\n[4,]   45   52 146.78891\n[5,]   52   13 110.55197\n[6,]   13   28  92.79567\n\n\n\nplot(st_geometry(shan_sf), \n                 border=gray(.5))\nplot.mst(shan.mst, \n         coords, \n         col=\"blue\", \n         cex.lab=0.7, \n         cex.circles=0.005, \n         add=TRUE)\n\n\n\n\n\n\n\n\n\nclust6 &lt;- spdep::skater(edges = shan.mst[,1:2], \n                 data = shan_ict, \n                 method = \"euclidean\", \n                 ncuts = 5)\n\n\nstr(clust6)\n\nList of 8\n $ groups      : num [1:55] 3 3 6 3 3 3 3 3 3 3 ...\n $ edges.groups:List of 6\n  ..$ :List of 3\n  .. ..$ node: num [1:22] 13 48 54 55 45 37 34 16 25 52 ...\n  .. ..$ edge: num [1:21, 1:3] 48 55 54 37 34 16 45 25 13 13 ...\n  .. ..$ ssw : num 3423\n  ..$ :List of 3\n  .. ..$ node: num [1:18] 47 27 53 38 42 15 41 51 43 32 ...\n  .. ..$ edge: num [1:17, 1:3] 53 15 42 38 41 51 15 27 15 43 ...\n  .. ..$ ssw : num 3759\n  ..$ :List of 3\n  .. ..$ node: num [1:11] 2 6 8 1 36 4 10 9 46 5 ...\n  .. ..$ edge: num [1:10, 1:3] 6 1 8 36 4 6 8 10 10 9 ...\n  .. ..$ ssw : num 1458\n  ..$ :List of 3\n  .. ..$ node: num [1:2] 44 20\n  .. ..$ edge: num [1, 1:3] 44 20 95\n  .. ..$ ssw : num 95\n  ..$ :List of 3\n  .. ..$ node: num 23\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n  ..$ :List of 3\n  .. ..$ node: num 3\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n $ not.prune   : NULL\n $ candidates  : int [1:6] 1 2 3 4 5 6\n $ ssto        : num 12613\n $ ssw         : num [1:6] 12613 10977 9962 9540 9123 ...\n $ crit        : num [1:2] 1 Inf\n $ vec.crit    : num [1:55] 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"class\")= chr \"skater\"\n\n\n\nccs6 &lt;- clust6$groups\nccs6\n\n [1] 3 3 6 3 3 3 3 3 3 3 2 1 1 1 2 1 1 1 2 4 1 2 5 1 1 1 2 1 2 2 1 2 2 1 1 3 1 2\n[39] 2 2 2 2 2 4 1 3 2 1 1 1 2 1 2 1 1\n\n\n\ntable(ccs6)\n\nccs6\n 1  2  3  4  5  6 \n22 18 11  2  1  1 \n\n\nplot the pruned tree based off mst:\n\nplot(st_geometry(shan_sf), \n     border=gray(.5))\nplot(clust6, \n     coords, \n     cex.lab=.7,\n     groups.colors=c(\"red\",\"green\",\"blue\", \"brown\", \"pink\"),\n     cex.circles=0.005, \n     add=TRUE)\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\n\n\n\n\n\n\n\n\n\n\n\n10.0 Cluster Viz through Chloropeth\n\ngroups_mat &lt;- as.matrix(clust6$groups)\nshan_sf_spatialcluster &lt;- cbind(shan_sf_cluster, as.factor(groups_mat)) %&gt;%\n  rename(`SP_CLUSTER`=`as.factor.groups_mat.`)\nqtm(shan_sf_spatialcluster, \"SP_CLUSTER\")\n\n\n\n\n\n\n\n\n\nhclust.map &lt;- qtm(shan_sf_cluster,\n                  \"CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\nshclust.map &lt;- qtm(shan_sf_spatialcluster,\n                   \"SP_CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(hclust.map, shclust.map,\n             asp=NA, ncol=2)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\n\n\n\n\n\n11.0 Cluster-Geo time\nClustGeo : an R package specially designed to perform spatially constrained cluster analysis. More specifically, it provides a Ward-like hierarchical clustering algorithm called hclustgeo() including spatial/geographical constraints.\nThe idea is then to determine a value of alpha which increases the spatial contiguity without deteriorating too much the quality of the solution based on the variables of interest. This need is supported by a function called choicealpha().\n\nnongeo_cluster &lt;- hclustgeo(proxmat)\nplot(nongeo_cluster, cex = 0.5)\nrect.hclust(nongeo_cluster, \n            k = 6, \n            border = 2:5)\n\n\n\n\n\n\n\n\n\ngroups &lt;- as.factor(cutree(nongeo_cluster, k=6))\n\n\nshan_sf_ngeo_cluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\nqtm(shan_sf_ngeo_cluster, \"CLUSTER\")\n\n\n\n\n\n\n\n\n\ndist &lt;- st_distance(shan_sf, shan_sf)\ndistmat &lt;- as.dist(dist)\n\n\ncr &lt;- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K=6, graph = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclustG &lt;- hclustgeo(proxmat, distmat, alpha = 0.2)\n\n\ngroups &lt;- as.factor(cutree(clustG, k=6))\n\n\nshan_sf_Gcluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\nqtm(shan_sf_Gcluster, \"CLUSTER\")\n\n\n\n\n\n\n\n\n\n\n13.0 Clustering variable viz\n\nggplot(data = shan_sf_ngeo_cluster,\n       aes(x = CLUSTER, y = RADIO_PR)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\nCluster 3 displays the highest mean Radio Ownership Per Thousand Household.\n\nggparcoord(data = shan_sf_ngeo_cluster, \n           columns = c(17:21), \n           scale = \"globalminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of ICT Variables by Cluster\") +\n  facet_grid(~ CLUSTER) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\n\n\n\n\n\nshan_sf_ngeo_cluster %&gt;% \n  st_set_geometry(NULL) %&gt;%\n  group_by(CLUSTER) %&gt;%\n  summarise(mean_RADIO_PR = mean(RADIO_PR),\n            mean_TV_PR = mean(TV_PR),\n            mean_LLPHONE_PR = mean(LLPHONE_PR),\n            mean_MPHONE_PR = mean(MPHONE_PR),\n            mean_COMPUTER_PR = mean(COMPUTER_PR))\n\n# A tibble: 6 × 6\n  CLUSTER mean_RADIO_PR mean_TV_PR mean_LLPHONE_PR mean_MPHONE_PR\n  &lt;chr&gt;           &lt;dbl&gt;      &lt;dbl&gt;           &lt;dbl&gt;          &lt;dbl&gt;\n1 1               221.        521.            44.2           246.\n2 2               237.        402.            23.9           134.\n3 3               300.        611.            52.2           392.\n4 4               196.        744.            99.0           651.\n5 5               124.        224.            38.0           132.\n6 6                98.6       499.            74.5           468.\n# ℹ 1 more variable: mean_COMPUTER_PR &lt;dbl&gt;"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html",
    "title": "Take-Home_Ex02",
    "section": "",
    "text": "Drug abuse presents a persistent social challenge across Thailand, particularly among youth, with over 2.7 million individuals affected. Despite the country’s proximity to the Golden Triangle—a region notorious for drug production—drug use patterns display unexpected spatial variations. This analysis focuses on mapping drug use incidents across Thailand between 2017 and 2022, leveraging geospatial techniques to detect spatial clusters and trends. The overarching objective is to uncover the spatial dependence of drug abuse indicators and to explore how these patterns evolve over time.\nThe geopolitical location of Thailand, combined with its extensive transportation infrastructure, makes it both a market and a transit point for drug trafficking, especially for methamphetamines. This analysis will employ various spatial autocorrelation methods to investigate whether drug use cases exhibit any spatial dependence, followed by the identification of clusters, outliers, and potential hotspots. Additionally, this report will examine the evolution of drug-related offenses over the study period, with a particular focus on youth demographics.\n\n\n\npacman:: p_load(sf, tmap, tidyverse, sfdep, spdep)\n\n\n\n\n\ndrug_offenses &lt;- read_csv(\"data/thai_drug_offenses_2017_2022.csv\") %&gt;%\n  filter(types_of_drug_offenses == \"drug_use_cases\")\n\nRows: 7392 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): types_of_drug_offenses, province_th, province_en\ndbl (2): fiscal_year, no_cases\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\ndrug_offenses &lt;- drug_offenses %&gt;%\n  mutate(province_en = case_when(\n    province_en == \"buogkan\" ~ \"Bueng Kan\",\n    province_en == \"Loburi\" ~ \"Lop Buri\",\n    TRUE ~ province_en\n  ))"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#importing-packages",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#importing-packages",
    "title": "Take-Home_Ex02",
    "section": "",
    "text": "pacman:: p_load(sf, tmap, tidyverse, sfdep, spdep)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#importing-dataset-into-r-environment",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#importing-dataset-into-r-environment",
    "title": "Take-Home_Ex02",
    "section": "",
    "text": "drug_offenses &lt;- read_csv(\"data/thai_drug_offenses_2017_2022.csv\") %&gt;%\n  filter(types_of_drug_offenses == \"drug_use_cases\")\n\nRows: 7392 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): types_of_drug_offenses, province_th, province_en\ndbl (2): fiscal_year, no_cases\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\ndrug_offenses &lt;- drug_offenses %&gt;%\n  mutate(province_en = case_when(\n    province_en == \"buogkan\" ~ \"Bueng Kan\",\n    province_en == \"Loburi\" ~ \"Lop Buri\",\n    TRUE ~ province_en\n  ))"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#filtering-and-preparing-the-2018-data",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#filtering-and-preparing-the-2018-data",
    "title": "Take-Home_Ex02",
    "section": "Filtering and Preparing the 2018 Data",
    "text": "Filtering and Preparing the 2018 Data\nWe first retrieve data for drug use cases from the year 2018. The data is stored as a list, and this specific index extracts the 2018 subset for further analysis. The goal is to conduct spatial analysis for this year’s drug use cases.\n\ndrugoff_list[[2]]\n\nSimple feature collection with 77 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n# A tibble: 77 × 16\n   fiscal_year types_of_drug_offenses no_cases province_en Shape_Leng Shape_Area\n         &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt; &lt;chr&gt;            &lt;dbl&gt;      &lt;dbl&gt;\n 1        2018 drug_use_cases            16480 Bangkok           2.42     0.131 \n 2        2018 drug_use_cases              422 Chai Nat          2.90     0.209 \n 3        2018 drug_use_cases             1661 Nonthaburi        1.25     0.0532\n 4        2018 drug_use_cases             1823 Pathum Tha…       1.88     0.127 \n 5        2018 drug_use_cases             1123 Phra Nakho…       3.04     0.214 \n 6        2018 drug_use_cases             1850 Lop Buri          5.69     0.546 \n 7        2018 drug_use_cases             3015 Samut Prak…       1.70     0.0793\n 8        2018 drug_use_cases              628 Saraburi          4.77     0.292 \n 9        2018 drug_use_cases              402 Sing Buri         1.78     0.0687\n10        2018 drug_use_cases              660 Ang Thong         1.74     0.0792\n# ℹ 67 more rows\n# ℹ 10 more variables: ADM1_PCODE &lt;chr&gt;, ADM1_REF &lt;chr&gt;, ADM1ALT1EN &lt;chr&gt;,\n#   ADM1ALT2EN &lt;chr&gt;, ADM0_EN &lt;chr&gt;, ADM0_PCODE &lt;chr&gt;, date &lt;date&gt;,\n#   validOn &lt;date&gt;, validTo &lt;date&gt;, geometry &lt;MULTIPOLYGON [°]&gt;"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#generating-contiguity-neighbors",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#generating-contiguity-neighbors",
    "title": "Take-Home_Ex02",
    "section": "Generating Contiguity Neighbors",
    "text": "Generating Contiguity Neighbors\nHere, we compute the contiguity neighbors for the 2018 dataset. The function st_contiguity calculates which geographical units (provinces) share boundaries, storing this spatial relationship in the nb column. This neighbor information is essential for the subsequent spatial autocorrelation analysis.\nA specific geometry without neighbors is manually assigned the nearest neighboring geometry to ensure proper spatial analysis.\nSpatial weights are computed for each province based on the contiguity information. The st_weights function calculates weights following the “W” style (row-standardized), which is crucial for the spatial autocorrelation measures to follow.\n\nwm_q_du18 &lt;- drugoff_list[[2]] %&gt;%\n  mutate(nb = st_contiguity(geometry))\n\nWarning: There were 2 warnings in `stopifnot()`.\nThe first warning was:\nℹ In argument: `nb = st_contiguity(geometry)`.\nCaused by warning in `spdep::poly2nb()`:\n! some observations have no neighbours;\nif this seems unexpected, try increasing the snap argument.\nℹ Run `dplyr::last_dplyr_warnings()` to see the 1 remaining warning.\n\nempty_index &lt;- 68   \nnearest_index &lt;- 67 \n\nwm_q_du18$nb[[empty_index]] &lt;- as.integer(nearest_index)\n\nwm_q_DUC18 &lt;- wm_q_du18 %&gt;%\n  mutate(wt = st_weights(nb, style = \"W\"),\n         .before = 1)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#morans-i-global-spatial-autocorrelation",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#morans-i-global-spatial-autocorrelation",
    "title": "Take-Home_Ex02",
    "section": "Moran’s I: Global Spatial Autocorrelation",
    "text": "Moran’s I: Global Spatial Autocorrelation\nMoran’s I, a global measure of spatial autocorrelation, which indicates whether drug use cases in one province are spatially clustered or dispersed, is calculated. The global_moran function applies this test, and the glimpse function gives an overview of the resulting statistics.\n\nmoranI_DUC18 &lt;- global_moran(wm_q_DUC18$no_cases, wm_q_DUC18$nb, wm_q_DUC18$wt)\n\nglimpse(moranI_DUC18)\n\nList of 2\n $ I: num 0.0952\n $ K: num 27"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#morans-i-permutation-test",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#morans-i-permutation-test",
    "title": "Take-Home_Ex02",
    "section": "Moran’s I Permutation Test",
    "text": "Moran’s I Permutation Test\nA permutation test for Moran’s I is run to assess the statistical significance of the observed spatial autocorrelation. By setting a seed value and running 99 simulations, we can compare the observed Moran’s I with a distribution of random outcomes, enhancing the robustness of the results.\n\nglobal_moran_test(wm_q_DUC18$no_cases, wm_q_DUC18$nb, wm_q_DUC18$wt)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 1.7246, p-value = 0.0423\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.095202524      -0.013157895       0.003947668 \n\n\n\nset.seed(777)\n\n\nglobal_moran_perm(wm_q_DUC18$no_cases, wm_q_DUC18$nb, wm_q_DUC18$wt, nsim = 99)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.095203, observed rank = 92, p-value = 0.16\nalternative hypothesis: two.sided"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#local-morans-i-analysis-lisa",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#local-morans-i-analysis-lisa",
    "title": "Take-Home_Ex02",
    "section": "Local Moran’s I Analysis (LISA)",
    "text": "Local Moran’s I Analysis (LISA)\nLocal Moran’s I (LISA) is calculated to identify specific regions (provinces) where drug use cases are significantly clustered. Each province receives a local statistic measuring its spatial relationship with neighboring provinces. This local autocorrelation analysis helps pinpoint “hotspots” of high drug use.\n\nlisa_DUC18 &lt;- wm_q_DUC18 %&gt;% \n  mutate(local_moran = local_moran(no_cases, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_moran)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#visualization-of-local-morans-i",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#visualization-of-local-morans-i",
    "title": "Take-Home_Ex02",
    "section": "Visualization of Local Moran’s I",
    "text": "Visualization of Local Moran’s I\nThe results of the Local Moran’s I analysis are visualized. The first map shows the clustering intensity of drug use cases, while the second map displays the corresponding p-values. Areas with significant local autocorrelation are highlighted, offering insights into specific regions with notable drug activity.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\n\nmap1 &lt;- tm_shape(lisa_DUC18) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"Local Moran's I of no_cases\",\n            main.title.size = 0.8)\n\nmap2 &lt;- tm_shape(lisa_DUC18) +\n  tm_fill(\"p_ii\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#filtering-significant-results",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#filtering-significant-results",
    "title": "Take-Home_Ex02",
    "section": "Filtering Significant Results",
    "text": "Filtering Significant Results\nOnly provinces with statistically significant local Moran’s I values (p-value &lt; 0.05) are filtered for further analysis. These regions are displayed on a map, highlighting the key areas where drug use cases are either clustered or dispersed.\n\nlisa_sig_DUC18 &lt;- lisa_DUC18 %&gt;%\n  filter(p_ii &lt; 0.05)\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\n\ntm_shape(lisa_DUC18) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_sig_DUC18) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.4)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them)."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#inverse-distance-weights",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#inverse-distance-weights",
    "title": "Take-Home_Ex02",
    "section": "Inverse Distance Weights",
    "text": "Inverse Distance Weights\nInverse distance weights are calculated here to account for spatial relationships beyond just contiguity. This method emphasizes nearby locations more than distant ones and is used to enhance the local Gi* analysis in the next step.\n\nwm_idw_DUC18 &lt;- wm_q_du18 %&gt;%\n  mutate(wts = st_inverse_distance(nb, geometry,\n                                   scale = 1,\n                                   alpha = 1),\n         .before = 1)\n\n! Polygon provided. Using point on surface.\n\n\nWarning: There was 1 warning in `stopifnot()`.\nℹ In argument: `wts = st_inverse_distance(nb, geometry, scale = 1, alpha = 1)`.\nCaused by warning in `st_point_on_surface.sfc()`:\n! st_point_on_surface may not give correct results for longitude/latitude data"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#local-gi-analysis",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#local-gi-analysis",
    "title": "Take-Home_Ex02",
    "section": "Local Gi* Analysis",
    "text": "Local Gi* Analysis\nThe local Gi* statistic is computed to detect “hot” or “cold” spots of drug use cases. This method identifies clusters where provinces either have significantly higher or lower drug use compared to their neighbors. These clusters can indicate concentrated areas of drug problems or effective control.\n\nHCSA_DUC18 &lt;- wm_idw_DUC18 %&gt;% \n  mutate(local_Gi = local_gstar_perm(\n    no_cases, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_Gi)\nHCSA_DUC18\n\nSimple feature collection with 77 features and 27 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n# A tibble: 77 × 28\n   gi_star cluster   e_gi    var_gi std_dev  p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;    &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  2.71   High    0.0259 0.0000118   0.482  6.30e-1  0.5          0.25    0.821\n 2 -1.28   Low     0.0125 0.0000522  -1.08   2.81e-1  0.06         0.03    1.96 \n 3  3.01   Low     0.0126 0.0000396   3.15   1.62e-3  0.08         0.04    1.95 \n 4  2.18   Low     0.0121 0.0000195   2.85   4.39e-3  0.1          0.05    1.64 \n 5 -0.552  Low     0.0130 0.0000314  -0.490  6.24e-1  0.76         0.38    1.54 \n 6 -0.373  Low     0.0127 0.0000234  -0.296  7.67e-1  0.92         0.46    1.84 \n 7  4.30   High    0.0150 0.0000473   4.99   6.13e-7  0.04         0.02    3.16 \n 8  0.0122 Low     0.0113 0.0000288   0.323  7.47e-1  0.5          0.25    1.71 \n 9 -1.15   Low     0.0113 0.0000323  -0.884  3.77e-1  0.32         0.16    1.68 \n10 -0.833  Low     0.0117 0.0000347  -0.701  4.83e-1  0.48         0.24    1.52 \n# ℹ 67 more rows\n# ℹ 19 more variables: kurtosis &lt;dbl&gt;, wts &lt;list&gt;, fiscal_year &lt;dbl&gt;,\n#   types_of_drug_offenses &lt;chr&gt;, no_cases &lt;dbl&gt;, province_en &lt;chr&gt;,\n#   Shape_Leng &lt;dbl&gt;, Shape_Area &lt;dbl&gt;, ADM1_PCODE &lt;chr&gt;, ADM1_REF &lt;chr&gt;,\n#   ADM1ALT1EN &lt;chr&gt;, ADM1ALT2EN &lt;chr&gt;, ADM0_EN &lt;chr&gt;, ADM0_PCODE &lt;chr&gt;,\n#   date &lt;date&gt;, validOn &lt;date&gt;, validTo &lt;date&gt;, geometry &lt;MULTIPOLYGON [°]&gt;,\n#   nb &lt;nb&gt;"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#visualizing-local-gi-results",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#visualizing-local-gi-results",
    "title": "Take-Home_Ex02",
    "section": "Visualizing Local Gi* Results",
    "text": "Visualizing Local Gi* Results\nThe Local Gi* analysis results are visualized in two maps: one showing Gi* values and the other displaying p-values. These maps help identify significant spatial clusters, highlighting areas with abnormal drug use case patterns for deeper investigation.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\n\ntm_shape(HCSA_DUC18) +\n  tm_fill(\"gi_star\", palette = \"-RdBu\", style = \"cont\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8))\n\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\n\ntm_shape(HCSA_DUC18) + tm_fill(\"p_sim\") + tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\n\nmap1 &lt;- tm_shape(HCSA_DUC18) +\n  tm_fill(\"gi_star\", palette = \"-RdBu\", style = \"cont\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"Gi* of GDPPC\",\n            main.title.size = 0.8)\n\nmap2 &lt;- tm_shape(HCSA_DUC18) +\n  tm_fill(\"p_value\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of Gi*\",\n            main.title.size = 0.8)\n\ntmap_arrange(map1, map2, ncol = 2)\n\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#significant-gi-results",
    "href": "Take-Home_Ex/Take-Home_Ex02/Take-Home_Ex02.html#significant-gi-results",
    "title": "Take-Home_Ex02",
    "section": "Significant Gi* Results",
    "text": "Significant Gi* Results\nThe final step filters provinces where the Gi* statistic is significant (p-value &lt; 0.05). These significant regions are displayed on a map, offering an overview of “hot” and “cold” spots in drug use across Thailand in 2018.\n\nHCSA_sig_DUC18 &lt;- HCSA_DUC18  %&gt;%\n  filter(p_sim &lt; 0.05)\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\n\ntm_shape(HCSA_DUC18) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(HCSA_sig_DUC18) +\n  tm_fill(\"gi_star\", palette = \"-RdBu\", style = \"cont\") + \n  tm_borders(alpha = 0.4)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  }
]